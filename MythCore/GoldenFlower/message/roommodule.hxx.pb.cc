// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roommodule.hxx

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "roommodule.hxx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* UCreateGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UCreateGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* UEnterGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UEnterGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* DEnterGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DEnterGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* UReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* DReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* DSyncPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DSyncPlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ULeaveRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ULeaveRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* DLeaveRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DLeaveRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* DErrorMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DErrorMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UStartGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UStartGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* DStartGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DStartGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* DReconnectData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DReconnectData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DGameOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DGameOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* UGameBet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UGameBet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DAllGameBet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DAllGameBet_reflection_ = NULL;
const ::google::protobuf::Descriptor* URequestDissposeRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  URequestDissposeRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* DDissposeAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DDissposeAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* UDissposeConfirm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UDissposeConfirm_reflection_ = NULL;
const ::google::protobuf::Descriptor* DDissposeRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DDissposeRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* UYSZCheckPoker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UYSZCheckPoker_reflection_ = NULL;
const ::google::protobuf::Descriptor* DYSZCheckPoker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DYSZCheckPoker_reflection_ = NULL;
const ::google::protobuf::Descriptor* UYSZCompareCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UYSZCompareCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* DYSZCompareCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DYSZCompareCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* UYSZPass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UYSZPass_reflection_ = NULL;
const ::google::protobuf::Descriptor* DYSZNoticePlayPassCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DYSZNoticePlayPassCard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ROOM_MODULE_MSG_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_roommodule_2ehxx() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_roommodule_2ehxx() {
  protobuf_AddDesc_roommodule_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "roommodule.hxx");
  GOOGLE_CHECK(file != NULL);
  UCreateGame_descriptor_ = file->message_type(0);
  static const int UCreateGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UCreateGame, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UCreateGame, gametpye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UCreateGame, gametimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UCreateGame, gameperson_),
  };
  UCreateGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UCreateGame_descriptor_,
      UCreateGame::internal_default_instance(),
      UCreateGame_offsets_,
      -1,
      -1,
      -1,
      sizeof(UCreateGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UCreateGame, _internal_metadata_));
  UEnterGame_descriptor_ = file->message_type(1);
  static const int UEnterGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UEnterGame, roomid_),
  };
  UEnterGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UEnterGame_descriptor_,
      UEnterGame::internal_default_instance(),
      UEnterGame_offsets_,
      -1,
      -1,
      -1,
      sizeof(UEnterGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UEnterGame, _internal_metadata_));
  DEnterGame_descriptor_ = file->message_type(2);
  static const int DEnterGame_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEnterGame, creatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEnterGame, gametimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEnterGame, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEnterGame, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEnterGame, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEnterGame, curtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEnterGame, isstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEnterGame, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEnterGame, status_),
  };
  DEnterGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DEnterGame_descriptor_,
      DEnterGame::internal_default_instance(),
      DEnterGame_offsets_,
      -1,
      -1,
      -1,
      sizeof(DEnterGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEnterGame, _internal_metadata_));
  UReady_descriptor_ = file->message_type(3);
  static const int UReady_offsets_[1] = {
  };
  UReady_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UReady_descriptor_,
      UReady::internal_default_instance(),
      UReady_offsets_,
      -1,
      -1,
      -1,
      sizeof(UReady),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UReady, _internal_metadata_));
  DReady_descriptor_ = file->message_type(4);
  static const int DReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DReady, playerid_),
  };
  DReady_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DReady_descriptor_,
      DReady::internal_default_instance(),
      DReady_offsets_,
      -1,
      -1,
      -1,
      sizeof(DReady),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DReady, _internal_metadata_));
  DSyncPlayerData_descriptor_ = file->message_type(5);
  static const int DSyncPlayerData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSyncPlayerData, headimg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSyncPlayerData, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSyncPlayerData, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSyncPlayerData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSyncPlayerData, isbank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSyncPlayerData, isready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSyncPlayerData, bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSyncPlayerData, alive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSyncPlayerData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSyncPlayerData, isqiangzhuang_),
  };
  DSyncPlayerData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DSyncPlayerData_descriptor_,
      DSyncPlayerData::internal_default_instance(),
      DSyncPlayerData_offsets_,
      -1,
      -1,
      -1,
      sizeof(DSyncPlayerData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSyncPlayerData, _internal_metadata_));
  ULeaveRoom_descriptor_ = file->message_type(6);
  static const int ULeaveRoom_offsets_[1] = {
  };
  ULeaveRoom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ULeaveRoom_descriptor_,
      ULeaveRoom::internal_default_instance(),
      ULeaveRoom_offsets_,
      -1,
      -1,
      -1,
      sizeof(ULeaveRoom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ULeaveRoom, _internal_metadata_));
  DLeaveRoom_descriptor_ = file->message_type(7);
  static const int DLeaveRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DLeaveRoom, playerid_),
  };
  DLeaveRoom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DLeaveRoom_descriptor_,
      DLeaveRoom::internal_default_instance(),
      DLeaveRoom_offsets_,
      -1,
      -1,
      -1,
      sizeof(DLeaveRoom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DLeaveRoom, _internal_metadata_));
  DErrorMessage_descriptor_ = file->message_type(8);
  static const int DErrorMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DErrorMessage, errorcode_),
  };
  DErrorMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DErrorMessage_descriptor_,
      DErrorMessage::internal_default_instance(),
      DErrorMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(DErrorMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DErrorMessage, _internal_metadata_));
  UStartGame_descriptor_ = file->message_type(9);
  static const int UStartGame_offsets_[1] = {
  };
  UStartGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UStartGame_descriptor_,
      UStartGame::internal_default_instance(),
      UStartGame_offsets_,
      -1,
      -1,
      -1,
      sizeof(UStartGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UStartGame, _internal_metadata_));
  DStartGame_descriptor_ = file->message_type(10);
  static const int DStartGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DStartGame, status_),
  };
  DStartGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DStartGame_descriptor_,
      DStartGame::internal_default_instance(),
      DStartGame_offsets_,
      -1,
      -1,
      -1,
      sizeof(DStartGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DStartGame, _internal_metadata_));
  DReconnectData_descriptor_ = file->message_type(11);
  static const int DReconnectData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DReconnectData, roomid_),
  };
  DReconnectData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DReconnectData_descriptor_,
      DReconnectData::internal_default_instance(),
      DReconnectData_offsets_,
      -1,
      -1,
      -1,
      sizeof(DReconnectData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DReconnectData, _internal_metadata_));
  DGameOver_descriptor_ = file->message_type(12);
  static const int DGameOver_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DGameOver, bankerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DGameOver, curtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DGameOver, data_),
  };
  DGameOver_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DGameOver_descriptor_,
      DGameOver::internal_default_instance(),
      DGameOver_offsets_,
      -1,
      -1,
      -1,
      sizeof(DGameOver),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DGameOver, _internal_metadata_));
  UGameBet_descriptor_ = file->message_type(13);
  static const int UGameBet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGameBet, diamoud_),
  };
  UGameBet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UGameBet_descriptor_,
      UGameBet::internal_default_instance(),
      UGameBet_offsets_,
      -1,
      -1,
      -1,
      sizeof(UGameBet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGameBet, _internal_metadata_));
  DAllGameBet_descriptor_ = file->message_type(14);
  static const int DAllGameBet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DAllGameBet, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DAllGameBet, diamoud_),
  };
  DAllGameBet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DAllGameBet_descriptor_,
      DAllGameBet::internal_default_instance(),
      DAllGameBet_offsets_,
      -1,
      -1,
      -1,
      sizeof(DAllGameBet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DAllGameBet, _internal_metadata_));
  URequestDissposeRoom_descriptor_ = file->message_type(15);
  static const int URequestDissposeRoom_offsets_[1] = {
  };
  URequestDissposeRoom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      URequestDissposeRoom_descriptor_,
      URequestDissposeRoom::internal_default_instance(),
      URequestDissposeRoom_offsets_,
      -1,
      -1,
      -1,
      sizeof(URequestDissposeRoom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URequestDissposeRoom, _internal_metadata_));
  DDissposeAsk_descriptor_ = file->message_type(16);
  static const int DDissposeAsk_offsets_[1] = {
  };
  DDissposeAsk_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DDissposeAsk_descriptor_,
      DDissposeAsk::internal_default_instance(),
      DDissposeAsk_offsets_,
      -1,
      -1,
      -1,
      sizeof(DDissposeAsk),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDissposeAsk, _internal_metadata_));
  UDissposeConfirm_descriptor_ = file->message_type(17);
  static const int UDissposeConfirm_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDissposeConfirm, result_),
  };
  UDissposeConfirm_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UDissposeConfirm_descriptor_,
      UDissposeConfirm::internal_default_instance(),
      UDissposeConfirm_offsets_,
      -1,
      -1,
      -1,
      sizeof(UDissposeConfirm),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDissposeConfirm, _internal_metadata_));
  DDissposeRoom_descriptor_ = file->message_type(18);
  static const int DDissposeRoom_offsets_[1] = {
  };
  DDissposeRoom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DDissposeRoom_descriptor_,
      DDissposeRoom::internal_default_instance(),
      DDissposeRoom_offsets_,
      -1,
      -1,
      -1,
      sizeof(DDissposeRoom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDissposeRoom, _internal_metadata_));
  UYSZCheckPoker_descriptor_ = file->message_type(19);
  static const int UYSZCheckPoker_offsets_[1] = {
  };
  UYSZCheckPoker_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UYSZCheckPoker_descriptor_,
      UYSZCheckPoker::internal_default_instance(),
      UYSZCheckPoker_offsets_,
      -1,
      -1,
      -1,
      sizeof(UYSZCheckPoker),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UYSZCheckPoker, _internal_metadata_));
  DYSZCheckPoker_descriptor_ = file->message_type(20);
  static const int DYSZCheckPoker_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DYSZCheckPoker, card1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DYSZCheckPoker, card2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DYSZCheckPoker, card3_),
  };
  DYSZCheckPoker_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DYSZCheckPoker_descriptor_,
      DYSZCheckPoker::internal_default_instance(),
      DYSZCheckPoker_offsets_,
      -1,
      -1,
      -1,
      sizeof(DYSZCheckPoker),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DYSZCheckPoker, _internal_metadata_));
  UYSZCompareCards_descriptor_ = file->message_type(21);
  static const int UYSZCompareCards_offsets_[1] = {
  };
  UYSZCompareCards_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UYSZCompareCards_descriptor_,
      UYSZCompareCards::internal_default_instance(),
      UYSZCompareCards_offsets_,
      -1,
      -1,
      -1,
      sizeof(UYSZCompareCards),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UYSZCompareCards, _internal_metadata_));
  DYSZCompareCards_descriptor_ = file->message_type(22);
  static const int DYSZCompareCards_offsets_[1] = {
  };
  DYSZCompareCards_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DYSZCompareCards_descriptor_,
      DYSZCompareCards::internal_default_instance(),
      DYSZCompareCards_offsets_,
      -1,
      -1,
      -1,
      sizeof(DYSZCompareCards),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DYSZCompareCards, _internal_metadata_));
  UYSZPass_descriptor_ = file->message_type(23);
  static const int UYSZPass_offsets_[1] = {
  };
  UYSZPass_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UYSZPass_descriptor_,
      UYSZPass::internal_default_instance(),
      UYSZPass_offsets_,
      -1,
      -1,
      -1,
      sizeof(UYSZPass),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UYSZPass, _internal_metadata_));
  DYSZNoticePlayPassCard_descriptor_ = file->message_type(24);
  static const int DYSZNoticePlayPassCard_offsets_[1] = {
  };
  DYSZNoticePlayPassCard_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DYSZNoticePlayPassCard_descriptor_,
      DYSZNoticePlayPassCard::internal_default_instance(),
      DYSZNoticePlayPassCard_offsets_,
      -1,
      -1,
      -1,
      sizeof(DYSZNoticePlayPassCard),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DYSZNoticePlayPassCard, _internal_metadata_));
  ROOM_MODULE_MSG_ID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_roommodule_2ehxx);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UCreateGame_descriptor_, UCreateGame::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UEnterGame_descriptor_, UEnterGame::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DEnterGame_descriptor_, DEnterGame::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UReady_descriptor_, UReady::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DReady_descriptor_, DReady::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DSyncPlayerData_descriptor_, DSyncPlayerData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ULeaveRoom_descriptor_, ULeaveRoom::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DLeaveRoom_descriptor_, DLeaveRoom::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DErrorMessage_descriptor_, DErrorMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UStartGame_descriptor_, UStartGame::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DStartGame_descriptor_, DStartGame::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DReconnectData_descriptor_, DReconnectData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DGameOver_descriptor_, DGameOver::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UGameBet_descriptor_, UGameBet::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DAllGameBet_descriptor_, DAllGameBet::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      URequestDissposeRoom_descriptor_, URequestDissposeRoom::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DDissposeAsk_descriptor_, DDissposeAsk::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UDissposeConfirm_descriptor_, UDissposeConfirm::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DDissposeRoom_descriptor_, DDissposeRoom::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UYSZCheckPoker_descriptor_, UYSZCheckPoker::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DYSZCheckPoker_descriptor_, DYSZCheckPoker::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UYSZCompareCards_descriptor_, UYSZCompareCards::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DYSZCompareCards_descriptor_, DYSZCompareCards::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UYSZPass_descriptor_, UYSZPass::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DYSZNoticePlayPassCard_descriptor_, DYSZNoticePlayPassCard::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_roommodule_2ehxx() {
  UCreateGame_default_instance_.Shutdown();
  delete UCreateGame_reflection_;
  UEnterGame_default_instance_.Shutdown();
  delete UEnterGame_reflection_;
  DEnterGame_default_instance_.Shutdown();
  delete DEnterGame_reflection_;
  UReady_default_instance_.Shutdown();
  delete UReady_reflection_;
  DReady_default_instance_.Shutdown();
  delete DReady_reflection_;
  DSyncPlayerData_default_instance_.Shutdown();
  delete DSyncPlayerData_reflection_;
  ULeaveRoom_default_instance_.Shutdown();
  delete ULeaveRoom_reflection_;
  DLeaveRoom_default_instance_.Shutdown();
  delete DLeaveRoom_reflection_;
  DErrorMessage_default_instance_.Shutdown();
  delete DErrorMessage_reflection_;
  UStartGame_default_instance_.Shutdown();
  delete UStartGame_reflection_;
  DStartGame_default_instance_.Shutdown();
  delete DStartGame_reflection_;
  DReconnectData_default_instance_.Shutdown();
  delete DReconnectData_reflection_;
  DGameOver_default_instance_.Shutdown();
  delete DGameOver_reflection_;
  UGameBet_default_instance_.Shutdown();
  delete UGameBet_reflection_;
  DAllGameBet_default_instance_.Shutdown();
  delete DAllGameBet_reflection_;
  URequestDissposeRoom_default_instance_.Shutdown();
  delete URequestDissposeRoom_reflection_;
  DDissposeAsk_default_instance_.Shutdown();
  delete DDissposeAsk_reflection_;
  UDissposeConfirm_default_instance_.Shutdown();
  delete UDissposeConfirm_reflection_;
  DDissposeRoom_default_instance_.Shutdown();
  delete DDissposeRoom_reflection_;
  UYSZCheckPoker_default_instance_.Shutdown();
  delete UYSZCheckPoker_reflection_;
  DYSZCheckPoker_default_instance_.Shutdown();
  delete DYSZCheckPoker_reflection_;
  UYSZCompareCards_default_instance_.Shutdown();
  delete UYSZCompareCards_reflection_;
  DYSZCompareCards_default_instance_.Shutdown();
  delete DYSZCompareCards_reflection_;
  UYSZPass_default_instance_.Shutdown();
  delete UYSZPass_reflection_;
  DYSZNoticePlayPassCard_default_instance_.Shutdown();
  delete DYSZNoticePlayPassCard_reflection_;
}

void protobuf_InitDefaults_roommodule_2ehxx_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  UCreateGame_default_instance_.DefaultConstruct();
  UEnterGame_default_instance_.DefaultConstruct();
  DEnterGame_default_instance_.DefaultConstruct();
  UReady_default_instance_.DefaultConstruct();
  DReady_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DSyncPlayerData_default_instance_.DefaultConstruct();
  ULeaveRoom_default_instance_.DefaultConstruct();
  DLeaveRoom_default_instance_.DefaultConstruct();
  DErrorMessage_default_instance_.DefaultConstruct();
  UStartGame_default_instance_.DefaultConstruct();
  DStartGame_default_instance_.DefaultConstruct();
  DReconnectData_default_instance_.DefaultConstruct();
  DGameOver_default_instance_.DefaultConstruct();
  UGameBet_default_instance_.DefaultConstruct();
  DAllGameBet_default_instance_.DefaultConstruct();
  URequestDissposeRoom_default_instance_.DefaultConstruct();
  DDissposeAsk_default_instance_.DefaultConstruct();
  UDissposeConfirm_default_instance_.DefaultConstruct();
  DDissposeRoom_default_instance_.DefaultConstruct();
  UYSZCheckPoker_default_instance_.DefaultConstruct();
  DYSZCheckPoker_default_instance_.DefaultConstruct();
  UYSZCompareCards_default_instance_.DefaultConstruct();
  DYSZCompareCards_default_instance_.DefaultConstruct();
  UYSZPass_default_instance_.DefaultConstruct();
  DYSZNoticePlayPassCard_default_instance_.DefaultConstruct();
  UCreateGame_default_instance_.get_mutable()->InitAsDefaultInstance();
  UEnterGame_default_instance_.get_mutable()->InitAsDefaultInstance();
  DEnterGame_default_instance_.get_mutable()->InitAsDefaultInstance();
  UReady_default_instance_.get_mutable()->InitAsDefaultInstance();
  DReady_default_instance_.get_mutable()->InitAsDefaultInstance();
  DSyncPlayerData_default_instance_.get_mutable()->InitAsDefaultInstance();
  ULeaveRoom_default_instance_.get_mutable()->InitAsDefaultInstance();
  DLeaveRoom_default_instance_.get_mutable()->InitAsDefaultInstance();
  DErrorMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  UStartGame_default_instance_.get_mutable()->InitAsDefaultInstance();
  DStartGame_default_instance_.get_mutable()->InitAsDefaultInstance();
  DReconnectData_default_instance_.get_mutable()->InitAsDefaultInstance();
  DGameOver_default_instance_.get_mutable()->InitAsDefaultInstance();
  UGameBet_default_instance_.get_mutable()->InitAsDefaultInstance();
  DAllGameBet_default_instance_.get_mutable()->InitAsDefaultInstance();
  URequestDissposeRoom_default_instance_.get_mutable()->InitAsDefaultInstance();
  DDissposeAsk_default_instance_.get_mutable()->InitAsDefaultInstance();
  UDissposeConfirm_default_instance_.get_mutable()->InitAsDefaultInstance();
  DDissposeRoom_default_instance_.get_mutable()->InitAsDefaultInstance();
  UYSZCheckPoker_default_instance_.get_mutable()->InitAsDefaultInstance();
  DYSZCheckPoker_default_instance_.get_mutable()->InitAsDefaultInstance();
  UYSZCompareCards_default_instance_.get_mutable()->InitAsDefaultInstance();
  DYSZCompareCards_default_instance_.get_mutable()->InitAsDefaultInstance();
  UYSZPass_default_instance_.get_mutable()->InitAsDefaultInstance();
  DYSZNoticePlayPassCard_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_roommodule_2ehxx_once_);
void protobuf_InitDefaults_roommodule_2ehxx() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_roommodule_2ehxx_once_,
                 &protobuf_InitDefaults_roommodule_2ehxx_impl);
}
void protobuf_AddDesc_roommodule_2ehxx_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_roommodule_2ehxx();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016roommodule.hxx\"T\n\013UCreateGame\022\014\n\004type\030"
    "\001 \001(\r\022\020\n\010gametpye\030\002 \001(\r\022\021\n\tgameTimes\030\003 \001"
    "(\021\022\022\n\ngamePerson\030\004 \001(\021\"\034\n\nUEnterGame\022\016\n\006"
    "roomID\030\001 \001(\021\"\241\001\n\nDEnterGame\022\017\n\007creatid\030\001"
    " \001(\021\022\021\n\tgametimes\030\002 \001(\021\022\016\n\006roomID\030\003 \001(\021\022"
    "\014\n\004type\030\004 \001(\021\022\020\n\010gameType\030\005 \001(\021\022\017\n\007curTi"
    "me\030\006 \001(\021\022\017\n\007isStart\030\007 \001(\021\022\r\n\005count\030\010 \001(\021"
    "\022\016\n\006status\030\t \001(\021\"\010\n\006UReady\"\032\n\006DReady\022\020\n\010"
    "playerID\030\001 \001(\021\"\270\001\n\017DSyncPlayerData\022\017\n\007he"
    "adImg\030\001 \001(\t\022\020\n\010nickname\030\002 \001(\t\022\r\n\005money\030\003"
    " \001(\021\022\020\n\010playerID\030\004 \001(\021\022\016\n\006isbank\030\005 \001(\021\022\017"
    "\n\007isReady\030\006 \001(\021\022\013\n\003bet\030\007 \001(\021\022\r\n\005alive\030\010 "
    "\001(\021\022\r\n\005index\030\t \001(\021\022\025\n\risqiangzhuang\030\n \001("
    "\021\"\014\n\nULeaveRoom\"\036\n\nDLeaveRoom\022\020\n\010playerI"
    "D\030\002 \001(\021\"\"\n\rDErrorMessage\022\021\n\terrorCode\030\001 "
    "\001(\r\"\014\n\nUStartGame\"\034\n\nDStartGame\022\016\n\006statu"
    "s\030\001 \001(\r\" \n\016DReconnectData\022\016\n\006roomID\030\001 \001("
    "\021\"=\n\tDGameOver\022\020\n\010bankerId\030\001 \001(\021\022\020\n\010curT"
    "imes\030\002 \001(\021\022\014\n\004data\030\003 \001(\021\"\033\n\010UGameBet\022\017\n\007"
    "Diamoud\030\001 \001(\021\"0\n\013DAllGameBet\022\020\n\010playerId"
    "\030\001 \001(\021\022\017\n\007Diamoud\030\002 \001(\021\"\026\n\024URequestDissp"
    "oseRoom\"\016\n\014DDissposeAsk\"\"\n\020UDissposeConf"
    "irm\022\016\n\006result\030\001 \001(\021\"\017\n\rDDissposeRoom\"\020\n\016"
    "UYSZCheckPoker\"=\n\016DYSZCheckPoker\022\r\n\005card"
    "1\030\001 \001(\r\022\r\n\005card2\030\002 \001(\r\022\r\n\005card3\030\003 \001(\r\"\022\n"
    "\020UYSZCompareCards\"\022\n\020DYSZCompareCards\"\n\n"
    "\010UYSZPass\"\030\n\026DYSZNoticePlayPassCard*\250\004\n\022"
    "ROOM_MODULE_MSG_ID\022\030\n\024ID_ROOM_MODULE_ERR"
    "OR\020\000\022\037\n\032ID_C2S_REQUEST_CREATE_ROOM\020\200\020\022\036\n"
    "\031ID_C2S_REQUEST_ENTER_GAME\020\201\020\022\035\n\030ID_S2C_"
    "NOTIFY_ENTER_GAME\020\202\020\022\031\n\024ID_C2S_REQUEST_R"
    "EADY\020\203\020\022\032\n\025ID_S2C_RESPONSE_READY\020\204\020\022#\n\036I"
    "D_S2C_NOTIFY_SYNC_PLAYER_DATA\020\205\020\022\036\n\031ID_C"
    "2S_REQUEST_LEAVE_ROOM\020\206\020\022\036\n\031ID_C2S_RESPO"
    "NSE_LEAVEROOM\020\207\020\022\035\n\030ID_S2C_NOTIFY_LEAVE_"
    "ROOM\020\210\020\022\036\n\031ID_C2S_REQUEST_START_GAME\020\211\020\022"
    "\035\n\030ID_S2C_NOTIFY_START_GAME\020\212\020\022\034\n\027ID_S2C"
    "_NOTIFY_GAME_OVER\020\213\020\022\034\n\027ID_C2S_REQUEST_G"
    "AME_BET\020\214\020\022\037\n\032ID_S2C_NOTIFY_ALL_GAME_BET"
    "\020\215\020\022\037\n\032ID_C2S_REQUEST_CHECK_POKER\020\216\020\022 \n\033"
    "ID_S2C_RESPONSE_CHECK_POKER\020\217\020b\006proto3", 1638);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "roommodule.hxx", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_roommodule_2ehxx);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_roommodule_2ehxx_once_);
void protobuf_AddDesc_roommodule_2ehxx() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_roommodule_2ehxx_once_,
                 &protobuf_AddDesc_roommodule_2ehxx_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_roommodule_2ehxx {
  StaticDescriptorInitializer_roommodule_2ehxx() {
    protobuf_AddDesc_roommodule_2ehxx();
  }
} static_descriptor_initializer_roommodule_2ehxx_;
const ::google::protobuf::EnumDescriptor* ROOM_MODULE_MSG_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROOM_MODULE_MSG_ID_descriptor_;
}
bool ROOM_MODULE_MSG_ID_IsValid(int value) {
  switch (value) {
    case 0:
    case 2048:
    case 2049:
    case 2050:
    case 2051:
    case 2052:
    case 2053:
    case 2054:
    case 2055:
    case 2056:
    case 2057:
    case 2058:
    case 2059:
    case 2060:
    case 2061:
    case 2062:
    case 2063:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UCreateGame::kTypeFieldNumber;
const int UCreateGame::kGametpyeFieldNumber;
const int UCreateGame::kGameTimesFieldNumber;
const int UCreateGame::kGamePersonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UCreateGame::UCreateGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:UCreateGame)
}

void UCreateGame::InitAsDefaultInstance() {
}

UCreateGame::UCreateGame(const UCreateGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UCreateGame)
}

void UCreateGame::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&gameperson_) -
    reinterpret_cast<char*>(&type_) + sizeof(gameperson_));
  _cached_size_ = 0;
}

UCreateGame::~UCreateGame() {
  // @@protoc_insertion_point(destructor:UCreateGame)
  SharedDtor();
}

void UCreateGame::SharedDtor() {
}

void UCreateGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UCreateGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UCreateGame_descriptor_;
}

const UCreateGame& UCreateGame::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UCreateGame> UCreateGame_default_instance_;

UCreateGame* UCreateGame::New(::google::protobuf::Arena* arena) const {
  UCreateGame* n = new UCreateGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UCreateGame::Clear() {
// @@protoc_insertion_point(message_clear_start:UCreateGame)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UCreateGame, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UCreateGame*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, gameperson_);

#undef ZR_HELPER_
#undef ZR_

}

bool UCreateGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UCreateGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gametpye;
        break;
      }

      // optional uint32 gametpye = 2;
      case 2: {
        if (tag == 16) {
         parse_gametpye:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gametpye_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gameTimes;
        break;
      }

      // optional sint32 gameTimes = 3;
      case 3: {
        if (tag == 24) {
         parse_gameTimes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &gametimes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gamePerson;
        break;
      }

      // optional sint32 gamePerson = 4;
      case 4: {
        if (tag == 32) {
         parse_gamePerson:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &gameperson_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UCreateGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UCreateGame)
  return false;
#undef DO_
}

void UCreateGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UCreateGame)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 gametpye = 2;
  if (this->gametpye() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gametpye(), output);
  }

  // optional sint32 gameTimes = 3;
  if (this->gametimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->gametimes(), output);
  }

  // optional sint32 gamePerson = 4;
  if (this->gameperson() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->gameperson(), output);
  }

  // @@protoc_insertion_point(serialize_end:UCreateGame)
}

::google::protobuf::uint8* UCreateGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UCreateGame)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 gametpye = 2;
  if (this->gametpye() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gametpye(), target);
  }

  // optional sint32 gameTimes = 3;
  if (this->gametimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->gametimes(), target);
  }

  // optional sint32 gamePerson = 4;
  if (this->gameperson() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->gameperson(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:UCreateGame)
  return target;
}

size_t UCreateGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UCreateGame)
  size_t total_size = 0;

  // optional uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional uint32 gametpye = 2;
  if (this->gametpye() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gametpye());
  }

  // optional sint32 gameTimes = 3;
  if (this->gametimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->gametimes());
  }

  // optional sint32 gamePerson = 4;
  if (this->gameperson() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->gameperson());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UCreateGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UCreateGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UCreateGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UCreateGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UCreateGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UCreateGame)
    UnsafeMergeFrom(*source);
  }
}

void UCreateGame::MergeFrom(const UCreateGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UCreateGame)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UCreateGame::UnsafeMergeFrom(const UCreateGame& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.gametpye() != 0) {
    set_gametpye(from.gametpye());
  }
  if (from.gametimes() != 0) {
    set_gametimes(from.gametimes());
  }
  if (from.gameperson() != 0) {
    set_gameperson(from.gameperson());
  }
}

void UCreateGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UCreateGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UCreateGame::CopyFrom(const UCreateGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UCreateGame)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UCreateGame::IsInitialized() const {

  return true;
}

void UCreateGame::Swap(UCreateGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UCreateGame::InternalSwap(UCreateGame* other) {
  std::swap(type_, other->type_);
  std::swap(gametpye_, other->gametpye_);
  std::swap(gametimes_, other->gametimes_);
  std::swap(gameperson_, other->gameperson_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UCreateGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UCreateGame_descriptor_;
  metadata.reflection = UCreateGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UCreateGame

// optional uint32 type = 1;
void UCreateGame::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 UCreateGame::type() const {
  // @@protoc_insertion_point(field_get:UCreateGame.type)
  return type_;
}
void UCreateGame::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:UCreateGame.type)
}

// optional uint32 gametpye = 2;
void UCreateGame::clear_gametpye() {
  gametpye_ = 0u;
}
::google::protobuf::uint32 UCreateGame::gametpye() const {
  // @@protoc_insertion_point(field_get:UCreateGame.gametpye)
  return gametpye_;
}
void UCreateGame::set_gametpye(::google::protobuf::uint32 value) {
  
  gametpye_ = value;
  // @@protoc_insertion_point(field_set:UCreateGame.gametpye)
}

// optional sint32 gameTimes = 3;
void UCreateGame::clear_gametimes() {
  gametimes_ = 0;
}
::google::protobuf::int32 UCreateGame::gametimes() const {
  // @@protoc_insertion_point(field_get:UCreateGame.gameTimes)
  return gametimes_;
}
void UCreateGame::set_gametimes(::google::protobuf::int32 value) {
  
  gametimes_ = value;
  // @@protoc_insertion_point(field_set:UCreateGame.gameTimes)
}

// optional sint32 gamePerson = 4;
void UCreateGame::clear_gameperson() {
  gameperson_ = 0;
}
::google::protobuf::int32 UCreateGame::gameperson() const {
  // @@protoc_insertion_point(field_get:UCreateGame.gamePerson)
  return gameperson_;
}
void UCreateGame::set_gameperson(::google::protobuf::int32 value) {
  
  gameperson_ = value;
  // @@protoc_insertion_point(field_set:UCreateGame.gamePerson)
}

inline const UCreateGame* UCreateGame::internal_default_instance() {
  return &UCreateGame_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UEnterGame::kRoomIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UEnterGame::UEnterGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:UEnterGame)
}

void UEnterGame::InitAsDefaultInstance() {
}

UEnterGame::UEnterGame(const UEnterGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UEnterGame)
}

void UEnterGame::SharedCtor() {
  roomid_ = 0;
  _cached_size_ = 0;
}

UEnterGame::~UEnterGame() {
  // @@protoc_insertion_point(destructor:UEnterGame)
  SharedDtor();
}

void UEnterGame::SharedDtor() {
}

void UEnterGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UEnterGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UEnterGame_descriptor_;
}

const UEnterGame& UEnterGame::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UEnterGame> UEnterGame_default_instance_;

UEnterGame* UEnterGame::New(::google::protobuf::Arena* arena) const {
  UEnterGame* n = new UEnterGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UEnterGame::Clear() {
// @@protoc_insertion_point(message_clear_start:UEnterGame)
  roomid_ = 0;
}

bool UEnterGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UEnterGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 roomID = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UEnterGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UEnterGame)
  return false;
#undef DO_
}

void UEnterGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UEnterGame)
  // optional sint32 roomID = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->roomid(), output);
  }

  // @@protoc_insertion_point(serialize_end:UEnterGame)
}

::google::protobuf::uint8* UEnterGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UEnterGame)
  // optional sint32 roomID = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->roomid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:UEnterGame)
  return target;
}

size_t UEnterGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UEnterGame)
  size_t total_size = 0;

  // optional sint32 roomID = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UEnterGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UEnterGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UEnterGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UEnterGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UEnterGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UEnterGame)
    UnsafeMergeFrom(*source);
  }
}

void UEnterGame::MergeFrom(const UEnterGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UEnterGame)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UEnterGame::UnsafeMergeFrom(const UEnterGame& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void UEnterGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UEnterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UEnterGame::CopyFrom(const UEnterGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UEnterGame)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UEnterGame::IsInitialized() const {

  return true;
}

void UEnterGame::Swap(UEnterGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UEnterGame::InternalSwap(UEnterGame* other) {
  std::swap(roomid_, other->roomid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UEnterGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UEnterGame_descriptor_;
  metadata.reflection = UEnterGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UEnterGame

// optional sint32 roomID = 1;
void UEnterGame::clear_roomid() {
  roomid_ = 0;
}
::google::protobuf::int32 UEnterGame::roomid() const {
  // @@protoc_insertion_point(field_get:UEnterGame.roomID)
  return roomid_;
}
void UEnterGame::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:UEnterGame.roomID)
}

inline const UEnterGame* UEnterGame::internal_default_instance() {
  return &UEnterGame_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DEnterGame::kCreatidFieldNumber;
const int DEnterGame::kGametimesFieldNumber;
const int DEnterGame::kRoomIDFieldNumber;
const int DEnterGame::kTypeFieldNumber;
const int DEnterGame::kGameTypeFieldNumber;
const int DEnterGame::kCurTimeFieldNumber;
const int DEnterGame::kIsStartFieldNumber;
const int DEnterGame::kCountFieldNumber;
const int DEnterGame::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DEnterGame::DEnterGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DEnterGame)
}

void DEnterGame::InitAsDefaultInstance() {
}

DEnterGame::DEnterGame(const DEnterGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DEnterGame)
}

void DEnterGame::SharedCtor() {
  ::memset(&creatid_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&creatid_) + sizeof(status_));
  _cached_size_ = 0;
}

DEnterGame::~DEnterGame() {
  // @@protoc_insertion_point(destructor:DEnterGame)
  SharedDtor();
}

void DEnterGame::SharedDtor() {
}

void DEnterGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DEnterGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DEnterGame_descriptor_;
}

const DEnterGame& DEnterGame::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DEnterGame> DEnterGame_default_instance_;

DEnterGame* DEnterGame::New(::google::protobuf::Arena* arena) const {
  DEnterGame* n = new DEnterGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DEnterGame::Clear() {
// @@protoc_insertion_point(message_clear_start:DEnterGame)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DEnterGame, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DEnterGame*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(creatid_, count_);
  status_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool DEnterGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DEnterGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 creatid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &creatid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gametimes;
        break;
      }

      // optional sint32 gametimes = 2;
      case 2: {
        if (tag == 16) {
         parse_gametimes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &gametimes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roomID;
        break;
      }

      // optional sint32 roomID = 3;
      case 3: {
        if (tag == 24) {
         parse_roomID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional sint32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gameType;
        break;
      }

      // optional sint32 gameType = 5;
      case 5: {
        if (tag == 40) {
         parse_gameType:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &gametype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_curTime;
        break;
      }

      // optional sint32 curTime = 6;
      case 6: {
        if (tag == 48) {
         parse_curTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &curtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isStart;
        break;
      }

      // optional sint32 isStart = 7;
      case 7: {
        if (tag == 56) {
         parse_isStart:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &isstart_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_count;
        break;
      }

      // optional sint32 count = 8;
      case 8: {
        if (tag == 64) {
         parse_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_status;
        break;
      }

      // optional sint32 status = 9;
      case 9: {
        if (tag == 72) {
         parse_status:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DEnterGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DEnterGame)
  return false;
#undef DO_
}

void DEnterGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DEnterGame)
  // optional sint32 creatid = 1;
  if (this->creatid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->creatid(), output);
  }

  // optional sint32 gametimes = 2;
  if (this->gametimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->gametimes(), output);
  }

  // optional sint32 roomID = 3;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->roomid(), output);
  }

  // optional sint32 type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->type(), output);
  }

  // optional sint32 gameType = 5;
  if (this->gametype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->gametype(), output);
  }

  // optional sint32 curTime = 6;
  if (this->curtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->curtime(), output);
  }

  // optional sint32 isStart = 7;
  if (this->isstart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->isstart(), output);
  }

  // optional sint32 count = 8;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->count(), output);
  }

  // optional sint32 status = 9;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:DEnterGame)
}

::google::protobuf::uint8* DEnterGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DEnterGame)
  // optional sint32 creatid = 1;
  if (this->creatid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->creatid(), target);
  }

  // optional sint32 gametimes = 2;
  if (this->gametimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->gametimes(), target);
  }

  // optional sint32 roomID = 3;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->roomid(), target);
  }

  // optional sint32 type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->type(), target);
  }

  // optional sint32 gameType = 5;
  if (this->gametype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->gametype(), target);
  }

  // optional sint32 curTime = 6;
  if (this->curtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->curtime(), target);
  }

  // optional sint32 isStart = 7;
  if (this->isstart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->isstart(), target);
  }

  // optional sint32 count = 8;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->count(), target);
  }

  // optional sint32 status = 9;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DEnterGame)
  return target;
}

size_t DEnterGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DEnterGame)
  size_t total_size = 0;

  // optional sint32 creatid = 1;
  if (this->creatid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->creatid());
  }

  // optional sint32 gametimes = 2;
  if (this->gametimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->gametimes());
  }

  // optional sint32 roomID = 3;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->roomid());
  }

  // optional sint32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->type());
  }

  // optional sint32 gameType = 5;
  if (this->gametype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->gametype());
  }

  // optional sint32 curTime = 6;
  if (this->curtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->curtime());
  }

  // optional sint32 isStart = 7;
  if (this->isstart() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->isstart());
  }

  // optional sint32 count = 8;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->count());
  }

  // optional sint32 status = 9;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DEnterGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DEnterGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DEnterGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DEnterGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DEnterGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DEnterGame)
    UnsafeMergeFrom(*source);
  }
}

void DEnterGame::MergeFrom(const DEnterGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DEnterGame)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DEnterGame::UnsafeMergeFrom(const DEnterGame& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.creatid() != 0) {
    set_creatid(from.creatid());
  }
  if (from.gametimes() != 0) {
    set_gametimes(from.gametimes());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.gametype() != 0) {
    set_gametype(from.gametype());
  }
  if (from.curtime() != 0) {
    set_curtime(from.curtime());
  }
  if (from.isstart() != 0) {
    set_isstart(from.isstart());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void DEnterGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DEnterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DEnterGame::CopyFrom(const DEnterGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DEnterGame)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DEnterGame::IsInitialized() const {

  return true;
}

void DEnterGame::Swap(DEnterGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DEnterGame::InternalSwap(DEnterGame* other) {
  std::swap(creatid_, other->creatid_);
  std::swap(gametimes_, other->gametimes_);
  std::swap(roomid_, other->roomid_);
  std::swap(type_, other->type_);
  std::swap(gametype_, other->gametype_);
  std::swap(curtime_, other->curtime_);
  std::swap(isstart_, other->isstart_);
  std::swap(count_, other->count_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DEnterGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DEnterGame_descriptor_;
  metadata.reflection = DEnterGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DEnterGame

// optional sint32 creatid = 1;
void DEnterGame::clear_creatid() {
  creatid_ = 0;
}
::google::protobuf::int32 DEnterGame::creatid() const {
  // @@protoc_insertion_point(field_get:DEnterGame.creatid)
  return creatid_;
}
void DEnterGame::set_creatid(::google::protobuf::int32 value) {
  
  creatid_ = value;
  // @@protoc_insertion_point(field_set:DEnterGame.creatid)
}

// optional sint32 gametimes = 2;
void DEnterGame::clear_gametimes() {
  gametimes_ = 0;
}
::google::protobuf::int32 DEnterGame::gametimes() const {
  // @@protoc_insertion_point(field_get:DEnterGame.gametimes)
  return gametimes_;
}
void DEnterGame::set_gametimes(::google::protobuf::int32 value) {
  
  gametimes_ = value;
  // @@protoc_insertion_point(field_set:DEnterGame.gametimes)
}

// optional sint32 roomID = 3;
void DEnterGame::clear_roomid() {
  roomid_ = 0;
}
::google::protobuf::int32 DEnterGame::roomid() const {
  // @@protoc_insertion_point(field_get:DEnterGame.roomID)
  return roomid_;
}
void DEnterGame::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:DEnterGame.roomID)
}

// optional sint32 type = 4;
void DEnterGame::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 DEnterGame::type() const {
  // @@protoc_insertion_point(field_get:DEnterGame.type)
  return type_;
}
void DEnterGame::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:DEnterGame.type)
}

// optional sint32 gameType = 5;
void DEnterGame::clear_gametype() {
  gametype_ = 0;
}
::google::protobuf::int32 DEnterGame::gametype() const {
  // @@protoc_insertion_point(field_get:DEnterGame.gameType)
  return gametype_;
}
void DEnterGame::set_gametype(::google::protobuf::int32 value) {
  
  gametype_ = value;
  // @@protoc_insertion_point(field_set:DEnterGame.gameType)
}

// optional sint32 curTime = 6;
void DEnterGame::clear_curtime() {
  curtime_ = 0;
}
::google::protobuf::int32 DEnterGame::curtime() const {
  // @@protoc_insertion_point(field_get:DEnterGame.curTime)
  return curtime_;
}
void DEnterGame::set_curtime(::google::protobuf::int32 value) {
  
  curtime_ = value;
  // @@protoc_insertion_point(field_set:DEnterGame.curTime)
}

// optional sint32 isStart = 7;
void DEnterGame::clear_isstart() {
  isstart_ = 0;
}
::google::protobuf::int32 DEnterGame::isstart() const {
  // @@protoc_insertion_point(field_get:DEnterGame.isStart)
  return isstart_;
}
void DEnterGame::set_isstart(::google::protobuf::int32 value) {
  
  isstart_ = value;
  // @@protoc_insertion_point(field_set:DEnterGame.isStart)
}

// optional sint32 count = 8;
void DEnterGame::clear_count() {
  count_ = 0;
}
::google::protobuf::int32 DEnterGame::count() const {
  // @@protoc_insertion_point(field_get:DEnterGame.count)
  return count_;
}
void DEnterGame::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:DEnterGame.count)
}

// optional sint32 status = 9;
void DEnterGame::clear_status() {
  status_ = 0;
}
::google::protobuf::int32 DEnterGame::status() const {
  // @@protoc_insertion_point(field_get:DEnterGame.status)
  return status_;
}
void DEnterGame::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:DEnterGame.status)
}

inline const DEnterGame* DEnterGame::internal_default_instance() {
  return &DEnterGame_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UReady::UReady()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:UReady)
}

void UReady::InitAsDefaultInstance() {
}

UReady::UReady(const UReady& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UReady)
}

void UReady::SharedCtor() {
  _cached_size_ = 0;
}

UReady::~UReady() {
  // @@protoc_insertion_point(destructor:UReady)
  SharedDtor();
}

void UReady::SharedDtor() {
}

void UReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UReady_descriptor_;
}

const UReady& UReady::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UReady> UReady_default_instance_;

UReady* UReady::New(::google::protobuf::Arena* arena) const {
  UReady* n = new UReady;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UReady::Clear() {
// @@protoc_insertion_point(message_clear_start:UReady)
}

bool UReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:UReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UReady)
  return false;
#undef DO_
}

void UReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UReady)
  // @@protoc_insertion_point(serialize_end:UReady)
}

::google::protobuf::uint8* UReady::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UReady)
  // @@protoc_insertion_point(serialize_to_array_end:UReady)
  return target;
}

size_t UReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UReady)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UReady::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UReady)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UReady* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UReady>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UReady)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UReady)
    UnsafeMergeFrom(*source);
  }
}

void UReady::MergeFrom(const UReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UReady)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UReady::UnsafeMergeFrom(const UReady& from) {
  GOOGLE_DCHECK(&from != this);
}

void UReady::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UReady::CopyFrom(const UReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UReady)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UReady::IsInitialized() const {

  return true;
}

void UReady::Swap(UReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UReady::InternalSwap(UReady* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UReady_descriptor_;
  metadata.reflection = UReady_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UReady

inline const UReady* UReady::internal_default_instance() {
  return &UReady_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DReady::kPlayerIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DReady::DReady()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DReady)
}

void DReady::InitAsDefaultInstance() {
}

DReady::DReady(const DReady& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DReady)
}

void DReady::SharedCtor() {
  playerid_ = 0;
  _cached_size_ = 0;
}

DReady::~DReady() {
  // @@protoc_insertion_point(destructor:DReady)
  SharedDtor();
}

void DReady::SharedDtor() {
}

void DReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DReady_descriptor_;
}

const DReady& DReady::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DReady> DReady_default_instance_;

DReady* DReady::New(::google::protobuf::Arena* arena) const {
  DReady* n = new DReady;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DReady::Clear() {
// @@protoc_insertion_point(message_clear_start:DReady)
  playerid_ = 0;
}

bool DReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 playerID = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DReady)
  return false;
#undef DO_
}

void DReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DReady)
  // optional sint32 playerID = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->playerid(), output);
  }

  // @@protoc_insertion_point(serialize_end:DReady)
}

::google::protobuf::uint8* DReady::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DReady)
  // optional sint32 playerID = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->playerid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DReady)
  return target;
}

size_t DReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DReady)
  size_t total_size = 0;

  // optional sint32 playerID = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DReady::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DReady)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DReady* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DReady>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DReady)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DReady)
    UnsafeMergeFrom(*source);
  }
}

void DReady::MergeFrom(const DReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DReady)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DReady::UnsafeMergeFrom(const DReady& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void DReady::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DReady::CopyFrom(const DReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DReady)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DReady::IsInitialized() const {

  return true;
}

void DReady::Swap(DReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DReady::InternalSwap(DReady* other) {
  std::swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DReady_descriptor_;
  metadata.reflection = DReady_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DReady

// optional sint32 playerID = 1;
void DReady::clear_playerid() {
  playerid_ = 0;
}
::google::protobuf::int32 DReady::playerid() const {
  // @@protoc_insertion_point(field_get:DReady.playerID)
  return playerid_;
}
void DReady::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:DReady.playerID)
}

inline const DReady* DReady::internal_default_instance() {
  return &DReady_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DSyncPlayerData::kHeadImgFieldNumber;
const int DSyncPlayerData::kNicknameFieldNumber;
const int DSyncPlayerData::kMoneyFieldNumber;
const int DSyncPlayerData::kPlayerIDFieldNumber;
const int DSyncPlayerData::kIsbankFieldNumber;
const int DSyncPlayerData::kIsReadyFieldNumber;
const int DSyncPlayerData::kBetFieldNumber;
const int DSyncPlayerData::kAliveFieldNumber;
const int DSyncPlayerData::kIndexFieldNumber;
const int DSyncPlayerData::kIsqiangzhuangFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DSyncPlayerData::DSyncPlayerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DSyncPlayerData)
}

void DSyncPlayerData::InitAsDefaultInstance() {
}

DSyncPlayerData::DSyncPlayerData(const DSyncPlayerData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DSyncPlayerData)
}

void DSyncPlayerData::SharedCtor() {
  headimg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&money_, 0, reinterpret_cast<char*>(&isqiangzhuang_) -
    reinterpret_cast<char*>(&money_) + sizeof(isqiangzhuang_));
  _cached_size_ = 0;
}

DSyncPlayerData::~DSyncPlayerData() {
  // @@protoc_insertion_point(destructor:DSyncPlayerData)
  SharedDtor();
}

void DSyncPlayerData::SharedDtor() {
  headimg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DSyncPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DSyncPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DSyncPlayerData_descriptor_;
}

const DSyncPlayerData& DSyncPlayerData::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DSyncPlayerData> DSyncPlayerData_default_instance_;

DSyncPlayerData* DSyncPlayerData::New(::google::protobuf::Arena* arena) const {
  DSyncPlayerData* n = new DSyncPlayerData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DSyncPlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:DSyncPlayerData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DSyncPlayerData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DSyncPlayerData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(money_, alive_);
  headimg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(index_, isqiangzhuang_);

#undef ZR_HELPER_
#undef ZR_

}

bool DSyncPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DSyncPlayerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string headImg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headimg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->headimg().data(), this->headimg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DSyncPlayerData.headImg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DSyncPlayerData.nickname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional sint32 money = 3;
      case 3: {
        if (tag == 24) {
         parse_money:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_playerID;
        break;
      }

      // optional sint32 playerID = 4;
      case 4: {
        if (tag == 32) {
         parse_playerID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isbank;
        break;
      }

      // optional sint32 isbank = 5;
      case 5: {
        if (tag == 40) {
         parse_isbank:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &isbank_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isReady;
        break;
      }

      // optional sint32 isReady = 6;
      case 6: {
        if (tag == 48) {
         parse_isReady:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &isready_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bet;
        break;
      }

      // optional sint32 bet = 7;
      case 7: {
        if (tag == 56) {
         parse_bet:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bet_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_alive;
        break;
      }

      // optional sint32 alive = 8;
      case 8: {
        if (tag == 64) {
         parse_alive:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &alive_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_index;
        break;
      }

      // optional sint32 index = 9;
      case 9: {
        if (tag == 72) {
         parse_index:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_isqiangzhuang;
        break;
      }

      // optional sint32 isqiangzhuang = 10;
      case 10: {
        if (tag == 80) {
         parse_isqiangzhuang:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &isqiangzhuang_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DSyncPlayerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DSyncPlayerData)
  return false;
#undef DO_
}

void DSyncPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DSyncPlayerData)
  // optional string headImg = 1;
  if (this->headimg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->headimg().data(), this->headimg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DSyncPlayerData.headImg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->headimg(), output);
  }

  // optional string nickname = 2;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DSyncPlayerData.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional sint32 money = 3;
  if (this->money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->money(), output);
  }

  // optional sint32 playerID = 4;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->playerid(), output);
  }

  // optional sint32 isbank = 5;
  if (this->isbank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->isbank(), output);
  }

  // optional sint32 isReady = 6;
  if (this->isready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->isready(), output);
  }

  // optional sint32 bet = 7;
  if (this->bet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->bet(), output);
  }

  // optional sint32 alive = 8;
  if (this->alive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->alive(), output);
  }

  // optional sint32 index = 9;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->index(), output);
  }

  // optional sint32 isqiangzhuang = 10;
  if (this->isqiangzhuang() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->isqiangzhuang(), output);
  }

  // @@protoc_insertion_point(serialize_end:DSyncPlayerData)
}

::google::protobuf::uint8* DSyncPlayerData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DSyncPlayerData)
  // optional string headImg = 1;
  if (this->headimg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->headimg().data(), this->headimg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DSyncPlayerData.headImg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->headimg(), target);
  }

  // optional string nickname = 2;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DSyncPlayerData.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional sint32 money = 3;
  if (this->money() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->money(), target);
  }

  // optional sint32 playerID = 4;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->playerid(), target);
  }

  // optional sint32 isbank = 5;
  if (this->isbank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->isbank(), target);
  }

  // optional sint32 isReady = 6;
  if (this->isready() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->isready(), target);
  }

  // optional sint32 bet = 7;
  if (this->bet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->bet(), target);
  }

  // optional sint32 alive = 8;
  if (this->alive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->alive(), target);
  }

  // optional sint32 index = 9;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->index(), target);
  }

  // optional sint32 isqiangzhuang = 10;
  if (this->isqiangzhuang() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->isqiangzhuang(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DSyncPlayerData)
  return target;
}

size_t DSyncPlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DSyncPlayerData)
  size_t total_size = 0;

  // optional string headImg = 1;
  if (this->headimg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->headimg());
  }

  // optional string nickname = 2;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // optional sint32 money = 3;
  if (this->money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->money());
  }

  // optional sint32 playerID = 4;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->playerid());
  }

  // optional sint32 isbank = 5;
  if (this->isbank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->isbank());
  }

  // optional sint32 isReady = 6;
  if (this->isready() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->isready());
  }

  // optional sint32 bet = 7;
  if (this->bet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->bet());
  }

  // optional sint32 alive = 8;
  if (this->alive() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->alive());
  }

  // optional sint32 index = 9;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->index());
  }

  // optional sint32 isqiangzhuang = 10;
  if (this->isqiangzhuang() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->isqiangzhuang());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DSyncPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DSyncPlayerData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DSyncPlayerData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DSyncPlayerData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DSyncPlayerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DSyncPlayerData)
    UnsafeMergeFrom(*source);
  }
}

void DSyncPlayerData::MergeFrom(const DSyncPlayerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DSyncPlayerData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DSyncPlayerData::UnsafeMergeFrom(const DSyncPlayerData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.headimg().size() > 0) {

    headimg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headimg_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.money() != 0) {
    set_money(from.money());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.isbank() != 0) {
    set_isbank(from.isbank());
  }
  if (from.isready() != 0) {
    set_isready(from.isready());
  }
  if (from.bet() != 0) {
    set_bet(from.bet());
  }
  if (from.alive() != 0) {
    set_alive(from.alive());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.isqiangzhuang() != 0) {
    set_isqiangzhuang(from.isqiangzhuang());
  }
}

void DSyncPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DSyncPlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DSyncPlayerData::CopyFrom(const DSyncPlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DSyncPlayerData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DSyncPlayerData::IsInitialized() const {

  return true;
}

void DSyncPlayerData::Swap(DSyncPlayerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DSyncPlayerData::InternalSwap(DSyncPlayerData* other) {
  headimg_.Swap(&other->headimg_);
  nickname_.Swap(&other->nickname_);
  std::swap(money_, other->money_);
  std::swap(playerid_, other->playerid_);
  std::swap(isbank_, other->isbank_);
  std::swap(isready_, other->isready_);
  std::swap(bet_, other->bet_);
  std::swap(alive_, other->alive_);
  std::swap(index_, other->index_);
  std::swap(isqiangzhuang_, other->isqiangzhuang_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DSyncPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DSyncPlayerData_descriptor_;
  metadata.reflection = DSyncPlayerData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DSyncPlayerData

// optional string headImg = 1;
void DSyncPlayerData::clear_headimg() {
  headimg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DSyncPlayerData::headimg() const {
  // @@protoc_insertion_point(field_get:DSyncPlayerData.headImg)
  return headimg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DSyncPlayerData::set_headimg(const ::std::string& value) {
  
  headimg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DSyncPlayerData.headImg)
}
void DSyncPlayerData::set_headimg(const char* value) {
  
  headimg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DSyncPlayerData.headImg)
}
void DSyncPlayerData::set_headimg(const char* value, size_t size) {
  
  headimg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DSyncPlayerData.headImg)
}
::std::string* DSyncPlayerData::mutable_headimg() {
  
  // @@protoc_insertion_point(field_mutable:DSyncPlayerData.headImg)
  return headimg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DSyncPlayerData::release_headimg() {
  // @@protoc_insertion_point(field_release:DSyncPlayerData.headImg)
  
  return headimg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DSyncPlayerData::set_allocated_headimg(::std::string* headimg) {
  if (headimg != NULL) {
    
  } else {
    
  }
  headimg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headimg);
  // @@protoc_insertion_point(field_set_allocated:DSyncPlayerData.headImg)
}

// optional string nickname = 2;
void DSyncPlayerData::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DSyncPlayerData::nickname() const {
  // @@protoc_insertion_point(field_get:DSyncPlayerData.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DSyncPlayerData::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DSyncPlayerData.nickname)
}
void DSyncPlayerData::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DSyncPlayerData.nickname)
}
void DSyncPlayerData::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DSyncPlayerData.nickname)
}
::std::string* DSyncPlayerData::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:DSyncPlayerData.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DSyncPlayerData::release_nickname() {
  // @@protoc_insertion_point(field_release:DSyncPlayerData.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DSyncPlayerData::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:DSyncPlayerData.nickname)
}

// optional sint32 money = 3;
void DSyncPlayerData::clear_money() {
  money_ = 0;
}
::google::protobuf::int32 DSyncPlayerData::money() const {
  // @@protoc_insertion_point(field_get:DSyncPlayerData.money)
  return money_;
}
void DSyncPlayerData::set_money(::google::protobuf::int32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:DSyncPlayerData.money)
}

// optional sint32 playerID = 4;
void DSyncPlayerData::clear_playerid() {
  playerid_ = 0;
}
::google::protobuf::int32 DSyncPlayerData::playerid() const {
  // @@protoc_insertion_point(field_get:DSyncPlayerData.playerID)
  return playerid_;
}
void DSyncPlayerData::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:DSyncPlayerData.playerID)
}

// optional sint32 isbank = 5;
void DSyncPlayerData::clear_isbank() {
  isbank_ = 0;
}
::google::protobuf::int32 DSyncPlayerData::isbank() const {
  // @@protoc_insertion_point(field_get:DSyncPlayerData.isbank)
  return isbank_;
}
void DSyncPlayerData::set_isbank(::google::protobuf::int32 value) {
  
  isbank_ = value;
  // @@protoc_insertion_point(field_set:DSyncPlayerData.isbank)
}

// optional sint32 isReady = 6;
void DSyncPlayerData::clear_isready() {
  isready_ = 0;
}
::google::protobuf::int32 DSyncPlayerData::isready() const {
  // @@protoc_insertion_point(field_get:DSyncPlayerData.isReady)
  return isready_;
}
void DSyncPlayerData::set_isready(::google::protobuf::int32 value) {
  
  isready_ = value;
  // @@protoc_insertion_point(field_set:DSyncPlayerData.isReady)
}

// optional sint32 bet = 7;
void DSyncPlayerData::clear_bet() {
  bet_ = 0;
}
::google::protobuf::int32 DSyncPlayerData::bet() const {
  // @@protoc_insertion_point(field_get:DSyncPlayerData.bet)
  return bet_;
}
void DSyncPlayerData::set_bet(::google::protobuf::int32 value) {
  
  bet_ = value;
  // @@protoc_insertion_point(field_set:DSyncPlayerData.bet)
}

// optional sint32 alive = 8;
void DSyncPlayerData::clear_alive() {
  alive_ = 0;
}
::google::protobuf::int32 DSyncPlayerData::alive() const {
  // @@protoc_insertion_point(field_get:DSyncPlayerData.alive)
  return alive_;
}
void DSyncPlayerData::set_alive(::google::protobuf::int32 value) {
  
  alive_ = value;
  // @@protoc_insertion_point(field_set:DSyncPlayerData.alive)
}

// optional sint32 index = 9;
void DSyncPlayerData::clear_index() {
  index_ = 0;
}
::google::protobuf::int32 DSyncPlayerData::index() const {
  // @@protoc_insertion_point(field_get:DSyncPlayerData.index)
  return index_;
}
void DSyncPlayerData::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:DSyncPlayerData.index)
}

// optional sint32 isqiangzhuang = 10;
void DSyncPlayerData::clear_isqiangzhuang() {
  isqiangzhuang_ = 0;
}
::google::protobuf::int32 DSyncPlayerData::isqiangzhuang() const {
  // @@protoc_insertion_point(field_get:DSyncPlayerData.isqiangzhuang)
  return isqiangzhuang_;
}
void DSyncPlayerData::set_isqiangzhuang(::google::protobuf::int32 value) {
  
  isqiangzhuang_ = value;
  // @@protoc_insertion_point(field_set:DSyncPlayerData.isqiangzhuang)
}

inline const DSyncPlayerData* DSyncPlayerData::internal_default_instance() {
  return &DSyncPlayerData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ULeaveRoom::ULeaveRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ULeaveRoom)
}

void ULeaveRoom::InitAsDefaultInstance() {
}

ULeaveRoom::ULeaveRoom(const ULeaveRoom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ULeaveRoom)
}

void ULeaveRoom::SharedCtor() {
  _cached_size_ = 0;
}

ULeaveRoom::~ULeaveRoom() {
  // @@protoc_insertion_point(destructor:ULeaveRoom)
  SharedDtor();
}

void ULeaveRoom::SharedDtor() {
}

void ULeaveRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ULeaveRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ULeaveRoom_descriptor_;
}

const ULeaveRoom& ULeaveRoom::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ULeaveRoom> ULeaveRoom_default_instance_;

ULeaveRoom* ULeaveRoom::New(::google::protobuf::Arena* arena) const {
  ULeaveRoom* n = new ULeaveRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ULeaveRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:ULeaveRoom)
}

bool ULeaveRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ULeaveRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:ULeaveRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ULeaveRoom)
  return false;
#undef DO_
}

void ULeaveRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ULeaveRoom)
  // @@protoc_insertion_point(serialize_end:ULeaveRoom)
}

::google::protobuf::uint8* ULeaveRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ULeaveRoom)
  // @@protoc_insertion_point(serialize_to_array_end:ULeaveRoom)
  return target;
}

size_t ULeaveRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ULeaveRoom)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ULeaveRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ULeaveRoom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ULeaveRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ULeaveRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ULeaveRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ULeaveRoom)
    UnsafeMergeFrom(*source);
  }
}

void ULeaveRoom::MergeFrom(const ULeaveRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ULeaveRoom)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ULeaveRoom::UnsafeMergeFrom(const ULeaveRoom& from) {
  GOOGLE_DCHECK(&from != this);
}

void ULeaveRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ULeaveRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ULeaveRoom::CopyFrom(const ULeaveRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ULeaveRoom)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ULeaveRoom::IsInitialized() const {

  return true;
}

void ULeaveRoom::Swap(ULeaveRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ULeaveRoom::InternalSwap(ULeaveRoom* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ULeaveRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ULeaveRoom_descriptor_;
  metadata.reflection = ULeaveRoom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ULeaveRoom

inline const ULeaveRoom* ULeaveRoom::internal_default_instance() {
  return &ULeaveRoom_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DLeaveRoom::kPlayerIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DLeaveRoom::DLeaveRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DLeaveRoom)
}

void DLeaveRoom::InitAsDefaultInstance() {
}

DLeaveRoom::DLeaveRoom(const DLeaveRoom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DLeaveRoom)
}

void DLeaveRoom::SharedCtor() {
  playerid_ = 0;
  _cached_size_ = 0;
}

DLeaveRoom::~DLeaveRoom() {
  // @@protoc_insertion_point(destructor:DLeaveRoom)
  SharedDtor();
}

void DLeaveRoom::SharedDtor() {
}

void DLeaveRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DLeaveRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DLeaveRoom_descriptor_;
}

const DLeaveRoom& DLeaveRoom::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DLeaveRoom> DLeaveRoom_default_instance_;

DLeaveRoom* DLeaveRoom::New(::google::protobuf::Arena* arena) const {
  DLeaveRoom* n = new DLeaveRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DLeaveRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:DLeaveRoom)
  playerid_ = 0;
}

bool DLeaveRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DLeaveRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 playerID = 2;
      case 2: {
        if (tag == 16) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DLeaveRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DLeaveRoom)
  return false;
#undef DO_
}

void DLeaveRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DLeaveRoom)
  // optional sint32 playerID = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->playerid(), output);
  }

  // @@protoc_insertion_point(serialize_end:DLeaveRoom)
}

::google::protobuf::uint8* DLeaveRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DLeaveRoom)
  // optional sint32 playerID = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->playerid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DLeaveRoom)
  return target;
}

size_t DLeaveRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DLeaveRoom)
  size_t total_size = 0;

  // optional sint32 playerID = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DLeaveRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DLeaveRoom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DLeaveRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DLeaveRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DLeaveRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DLeaveRoom)
    UnsafeMergeFrom(*source);
  }
}

void DLeaveRoom::MergeFrom(const DLeaveRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DLeaveRoom)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DLeaveRoom::UnsafeMergeFrom(const DLeaveRoom& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void DLeaveRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DLeaveRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DLeaveRoom::CopyFrom(const DLeaveRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DLeaveRoom)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DLeaveRoom::IsInitialized() const {

  return true;
}

void DLeaveRoom::Swap(DLeaveRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DLeaveRoom::InternalSwap(DLeaveRoom* other) {
  std::swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DLeaveRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DLeaveRoom_descriptor_;
  metadata.reflection = DLeaveRoom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DLeaveRoom

// optional sint32 playerID = 2;
void DLeaveRoom::clear_playerid() {
  playerid_ = 0;
}
::google::protobuf::int32 DLeaveRoom::playerid() const {
  // @@protoc_insertion_point(field_get:DLeaveRoom.playerID)
  return playerid_;
}
void DLeaveRoom::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:DLeaveRoom.playerID)
}

inline const DLeaveRoom* DLeaveRoom::internal_default_instance() {
  return &DLeaveRoom_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DErrorMessage::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DErrorMessage::DErrorMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DErrorMessage)
}

void DErrorMessage::InitAsDefaultInstance() {
}

DErrorMessage::DErrorMessage(const DErrorMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DErrorMessage)
}

void DErrorMessage::SharedCtor() {
  errorcode_ = 0u;
  _cached_size_ = 0;
}

DErrorMessage::~DErrorMessage() {
  // @@protoc_insertion_point(destructor:DErrorMessage)
  SharedDtor();
}

void DErrorMessage::SharedDtor() {
}

void DErrorMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DErrorMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DErrorMessage_descriptor_;
}

const DErrorMessage& DErrorMessage::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DErrorMessage> DErrorMessage_default_instance_;

DErrorMessage* DErrorMessage::New(::google::protobuf::Arena* arena) const {
  DErrorMessage* n = new DErrorMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DErrorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DErrorMessage)
  errorcode_ = 0u;
}

bool DErrorMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DErrorMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 errorCode = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DErrorMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DErrorMessage)
  return false;
#undef DO_
}

void DErrorMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DErrorMessage)
  // optional uint32 errorCode = 1;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // @@protoc_insertion_point(serialize_end:DErrorMessage)
}

::google::protobuf::uint8* DErrorMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DErrorMessage)
  // optional uint32 errorCode = 1;
  if (this->errorcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DErrorMessage)
  return target;
}

size_t DErrorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DErrorMessage)
  size_t total_size = 0;

  // optional uint32 errorCode = 1;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DErrorMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DErrorMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DErrorMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DErrorMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DErrorMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DErrorMessage)
    UnsafeMergeFrom(*source);
  }
}

void DErrorMessage::MergeFrom(const DErrorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DErrorMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DErrorMessage::UnsafeMergeFrom(const DErrorMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
}

void DErrorMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DErrorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DErrorMessage::CopyFrom(const DErrorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DErrorMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DErrorMessage::IsInitialized() const {

  return true;
}

void DErrorMessage::Swap(DErrorMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DErrorMessage::InternalSwap(DErrorMessage* other) {
  std::swap(errorcode_, other->errorcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DErrorMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DErrorMessage_descriptor_;
  metadata.reflection = DErrorMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DErrorMessage

// optional uint32 errorCode = 1;
void DErrorMessage::clear_errorcode() {
  errorcode_ = 0u;
}
::google::protobuf::uint32 DErrorMessage::errorcode() const {
  // @@protoc_insertion_point(field_get:DErrorMessage.errorCode)
  return errorcode_;
}
void DErrorMessage::set_errorcode(::google::protobuf::uint32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:DErrorMessage.errorCode)
}

inline const DErrorMessage* DErrorMessage::internal_default_instance() {
  return &DErrorMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UStartGame::UStartGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:UStartGame)
}

void UStartGame::InitAsDefaultInstance() {
}

UStartGame::UStartGame(const UStartGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UStartGame)
}

void UStartGame::SharedCtor() {
  _cached_size_ = 0;
}

UStartGame::~UStartGame() {
  // @@protoc_insertion_point(destructor:UStartGame)
  SharedDtor();
}

void UStartGame::SharedDtor() {
}

void UStartGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UStartGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UStartGame_descriptor_;
}

const UStartGame& UStartGame::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UStartGame> UStartGame_default_instance_;

UStartGame* UStartGame::New(::google::protobuf::Arena* arena) const {
  UStartGame* n = new UStartGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UStartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:UStartGame)
}

bool UStartGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UStartGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:UStartGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UStartGame)
  return false;
#undef DO_
}

void UStartGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UStartGame)
  // @@protoc_insertion_point(serialize_end:UStartGame)
}

::google::protobuf::uint8* UStartGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UStartGame)
  // @@protoc_insertion_point(serialize_to_array_end:UStartGame)
  return target;
}

size_t UStartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UStartGame)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UStartGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UStartGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UStartGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UStartGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UStartGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UStartGame)
    UnsafeMergeFrom(*source);
  }
}

void UStartGame::MergeFrom(const UStartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UStartGame)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UStartGame::UnsafeMergeFrom(const UStartGame& from) {
  GOOGLE_DCHECK(&from != this);
}

void UStartGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UStartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UStartGame::CopyFrom(const UStartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UStartGame)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UStartGame::IsInitialized() const {

  return true;
}

void UStartGame::Swap(UStartGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UStartGame::InternalSwap(UStartGame* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UStartGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UStartGame_descriptor_;
  metadata.reflection = UStartGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UStartGame

inline const UStartGame* UStartGame::internal_default_instance() {
  return &UStartGame_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DStartGame::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DStartGame::DStartGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DStartGame)
}

void DStartGame::InitAsDefaultInstance() {
}

DStartGame::DStartGame(const DStartGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DStartGame)
}

void DStartGame::SharedCtor() {
  status_ = 0u;
  _cached_size_ = 0;
}

DStartGame::~DStartGame() {
  // @@protoc_insertion_point(destructor:DStartGame)
  SharedDtor();
}

void DStartGame::SharedDtor() {
}

void DStartGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DStartGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DStartGame_descriptor_;
}

const DStartGame& DStartGame::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DStartGame> DStartGame_default_instance_;

DStartGame* DStartGame::New(::google::protobuf::Arena* arena) const {
  DStartGame* n = new DStartGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DStartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:DStartGame)
  status_ = 0u;
}

bool DStartGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DStartGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DStartGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DStartGame)
  return false;
#undef DO_
}

void DStartGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DStartGame)
  // optional uint32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:DStartGame)
}

::google::protobuf::uint8* DStartGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DStartGame)
  // optional uint32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DStartGame)
  return target;
}

size_t DStartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DStartGame)
  size_t total_size = 0;

  // optional uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DStartGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DStartGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DStartGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DStartGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DStartGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DStartGame)
    UnsafeMergeFrom(*source);
  }
}

void DStartGame::MergeFrom(const DStartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DStartGame)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DStartGame::UnsafeMergeFrom(const DStartGame& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void DStartGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DStartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DStartGame::CopyFrom(const DStartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DStartGame)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DStartGame::IsInitialized() const {

  return true;
}

void DStartGame::Swap(DStartGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DStartGame::InternalSwap(DStartGame* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DStartGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DStartGame_descriptor_;
  metadata.reflection = DStartGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DStartGame

// optional uint32 status = 1;
void DStartGame::clear_status() {
  status_ = 0u;
}
::google::protobuf::uint32 DStartGame::status() const {
  // @@protoc_insertion_point(field_get:DStartGame.status)
  return status_;
}
void DStartGame::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:DStartGame.status)
}

inline const DStartGame* DStartGame::internal_default_instance() {
  return &DStartGame_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DReconnectData::kRoomIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DReconnectData::DReconnectData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DReconnectData)
}

void DReconnectData::InitAsDefaultInstance() {
}

DReconnectData::DReconnectData(const DReconnectData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DReconnectData)
}

void DReconnectData::SharedCtor() {
  roomid_ = 0;
  _cached_size_ = 0;
}

DReconnectData::~DReconnectData() {
  // @@protoc_insertion_point(destructor:DReconnectData)
  SharedDtor();
}

void DReconnectData::SharedDtor() {
}

void DReconnectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DReconnectData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DReconnectData_descriptor_;
}

const DReconnectData& DReconnectData::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DReconnectData> DReconnectData_default_instance_;

DReconnectData* DReconnectData::New(::google::protobuf::Arena* arena) const {
  DReconnectData* n = new DReconnectData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DReconnectData::Clear() {
// @@protoc_insertion_point(message_clear_start:DReconnectData)
  roomid_ = 0;
}

bool DReconnectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DReconnectData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 roomID = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DReconnectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DReconnectData)
  return false;
#undef DO_
}

void DReconnectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DReconnectData)
  // optional sint32 roomID = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->roomid(), output);
  }

  // @@protoc_insertion_point(serialize_end:DReconnectData)
}

::google::protobuf::uint8* DReconnectData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DReconnectData)
  // optional sint32 roomID = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->roomid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DReconnectData)
  return target;
}

size_t DReconnectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DReconnectData)
  size_t total_size = 0;

  // optional sint32 roomID = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DReconnectData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DReconnectData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DReconnectData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DReconnectData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DReconnectData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DReconnectData)
    UnsafeMergeFrom(*source);
  }
}

void DReconnectData::MergeFrom(const DReconnectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DReconnectData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DReconnectData::UnsafeMergeFrom(const DReconnectData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void DReconnectData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DReconnectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DReconnectData::CopyFrom(const DReconnectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DReconnectData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DReconnectData::IsInitialized() const {

  return true;
}

void DReconnectData::Swap(DReconnectData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DReconnectData::InternalSwap(DReconnectData* other) {
  std::swap(roomid_, other->roomid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DReconnectData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DReconnectData_descriptor_;
  metadata.reflection = DReconnectData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DReconnectData

// optional sint32 roomID = 1;
void DReconnectData::clear_roomid() {
  roomid_ = 0;
}
::google::protobuf::int32 DReconnectData::roomid() const {
  // @@protoc_insertion_point(field_get:DReconnectData.roomID)
  return roomid_;
}
void DReconnectData::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:DReconnectData.roomID)
}

inline const DReconnectData* DReconnectData::internal_default_instance() {
  return &DReconnectData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DGameOver::kBankerIdFieldNumber;
const int DGameOver::kCurTimesFieldNumber;
const int DGameOver::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DGameOver::DGameOver()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DGameOver)
}

void DGameOver::InitAsDefaultInstance() {
}

DGameOver::DGameOver(const DGameOver& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DGameOver)
}

void DGameOver::SharedCtor() {
  ::memset(&bankerid_, 0, reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&bankerid_) + sizeof(data_));
  _cached_size_ = 0;
}

DGameOver::~DGameOver() {
  // @@protoc_insertion_point(destructor:DGameOver)
  SharedDtor();
}

void DGameOver::SharedDtor() {
}

void DGameOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DGameOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DGameOver_descriptor_;
}

const DGameOver& DGameOver::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DGameOver> DGameOver_default_instance_;

DGameOver* DGameOver::New(::google::protobuf::Arena* arena) const {
  DGameOver* n = new DGameOver;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DGameOver::Clear() {
// @@protoc_insertion_point(message_clear_start:DGameOver)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DGameOver, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DGameOver*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(bankerid_, data_);

#undef ZR_HELPER_
#undef ZR_

}

bool DGameOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DGameOver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 bankerId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bankerid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_curTimes;
        break;
      }

      // optional sint32 curTimes = 2;
      case 2: {
        if (tag == 16) {
         parse_curTimes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &curtimes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data;
        break;
      }

      // optional sint32 data = 3;
      case 3: {
        if (tag == 24) {
         parse_data:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DGameOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DGameOver)
  return false;
#undef DO_
}

void DGameOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DGameOver)
  // optional sint32 bankerId = 1;
  if (this->bankerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->bankerid(), output);
  }

  // optional sint32 curTimes = 2;
  if (this->curtimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->curtimes(), output);
  }

  // optional sint32 data = 3;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:DGameOver)
}

::google::protobuf::uint8* DGameOver::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DGameOver)
  // optional sint32 bankerId = 1;
  if (this->bankerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->bankerid(), target);
  }

  // optional sint32 curTimes = 2;
  if (this->curtimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->curtimes(), target);
  }

  // optional sint32 data = 3;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DGameOver)
  return target;
}

size_t DGameOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DGameOver)
  size_t total_size = 0;

  // optional sint32 bankerId = 1;
  if (this->bankerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->bankerid());
  }

  // optional sint32 curTimes = 2;
  if (this->curtimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->curtimes());
  }

  // optional sint32 data = 3;
  if (this->data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DGameOver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DGameOver)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DGameOver* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DGameOver>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DGameOver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DGameOver)
    UnsafeMergeFrom(*source);
  }
}

void DGameOver::MergeFrom(const DGameOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DGameOver)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DGameOver::UnsafeMergeFrom(const DGameOver& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.bankerid() != 0) {
    set_bankerid(from.bankerid());
  }
  if (from.curtimes() != 0) {
    set_curtimes(from.curtimes());
  }
  if (from.data() != 0) {
    set_data(from.data());
  }
}

void DGameOver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DGameOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DGameOver::CopyFrom(const DGameOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DGameOver)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DGameOver::IsInitialized() const {

  return true;
}

void DGameOver::Swap(DGameOver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DGameOver::InternalSwap(DGameOver* other) {
  std::swap(bankerid_, other->bankerid_);
  std::swap(curtimes_, other->curtimes_);
  std::swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DGameOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DGameOver_descriptor_;
  metadata.reflection = DGameOver_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DGameOver

// optional sint32 bankerId = 1;
void DGameOver::clear_bankerid() {
  bankerid_ = 0;
}
::google::protobuf::int32 DGameOver::bankerid() const {
  // @@protoc_insertion_point(field_get:DGameOver.bankerId)
  return bankerid_;
}
void DGameOver::set_bankerid(::google::protobuf::int32 value) {
  
  bankerid_ = value;
  // @@protoc_insertion_point(field_set:DGameOver.bankerId)
}

// optional sint32 curTimes = 2;
void DGameOver::clear_curtimes() {
  curtimes_ = 0;
}
::google::protobuf::int32 DGameOver::curtimes() const {
  // @@protoc_insertion_point(field_get:DGameOver.curTimes)
  return curtimes_;
}
void DGameOver::set_curtimes(::google::protobuf::int32 value) {
  
  curtimes_ = value;
  // @@protoc_insertion_point(field_set:DGameOver.curTimes)
}

// optional sint32 data = 3;
void DGameOver::clear_data() {
  data_ = 0;
}
::google::protobuf::int32 DGameOver::data() const {
  // @@protoc_insertion_point(field_get:DGameOver.data)
  return data_;
}
void DGameOver::set_data(::google::protobuf::int32 value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:DGameOver.data)
}

inline const DGameOver* DGameOver::internal_default_instance() {
  return &DGameOver_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UGameBet::kDiamoudFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UGameBet::UGameBet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:UGameBet)
}

void UGameBet::InitAsDefaultInstance() {
}

UGameBet::UGameBet(const UGameBet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UGameBet)
}

void UGameBet::SharedCtor() {
  diamoud_ = 0;
  _cached_size_ = 0;
}

UGameBet::~UGameBet() {
  // @@protoc_insertion_point(destructor:UGameBet)
  SharedDtor();
}

void UGameBet::SharedDtor() {
}

void UGameBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UGameBet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UGameBet_descriptor_;
}

const UGameBet& UGameBet::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UGameBet> UGameBet_default_instance_;

UGameBet* UGameBet::New(::google::protobuf::Arena* arena) const {
  UGameBet* n = new UGameBet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UGameBet::Clear() {
// @@protoc_insertion_point(message_clear_start:UGameBet)
  diamoud_ = 0;
}

bool UGameBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UGameBet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Diamoud = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &diamoud_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UGameBet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UGameBet)
  return false;
#undef DO_
}

void UGameBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UGameBet)
  // optional sint32 Diamoud = 1;
  if (this->diamoud() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->diamoud(), output);
  }

  // @@protoc_insertion_point(serialize_end:UGameBet)
}

::google::protobuf::uint8* UGameBet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UGameBet)
  // optional sint32 Diamoud = 1;
  if (this->diamoud() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->diamoud(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:UGameBet)
  return target;
}

size_t UGameBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UGameBet)
  size_t total_size = 0;

  // optional sint32 Diamoud = 1;
  if (this->diamoud() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->diamoud());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UGameBet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UGameBet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UGameBet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UGameBet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UGameBet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UGameBet)
    UnsafeMergeFrom(*source);
  }
}

void UGameBet::MergeFrom(const UGameBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UGameBet)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UGameBet::UnsafeMergeFrom(const UGameBet& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.diamoud() != 0) {
    set_diamoud(from.diamoud());
  }
}

void UGameBet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UGameBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UGameBet::CopyFrom(const UGameBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UGameBet)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UGameBet::IsInitialized() const {

  return true;
}

void UGameBet::Swap(UGameBet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UGameBet::InternalSwap(UGameBet* other) {
  std::swap(diamoud_, other->diamoud_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UGameBet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UGameBet_descriptor_;
  metadata.reflection = UGameBet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UGameBet

// optional sint32 Diamoud = 1;
void UGameBet::clear_diamoud() {
  diamoud_ = 0;
}
::google::protobuf::int32 UGameBet::diamoud() const {
  // @@protoc_insertion_point(field_get:UGameBet.Diamoud)
  return diamoud_;
}
void UGameBet::set_diamoud(::google::protobuf::int32 value) {
  
  diamoud_ = value;
  // @@protoc_insertion_point(field_set:UGameBet.Diamoud)
}

inline const UGameBet* UGameBet::internal_default_instance() {
  return &UGameBet_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DAllGameBet::kPlayerIdFieldNumber;
const int DAllGameBet::kDiamoudFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DAllGameBet::DAllGameBet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DAllGameBet)
}

void DAllGameBet::InitAsDefaultInstance() {
}

DAllGameBet::DAllGameBet(const DAllGameBet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DAllGameBet)
}

void DAllGameBet::SharedCtor() {
  ::memset(&playerid_, 0, reinterpret_cast<char*>(&diamoud_) -
    reinterpret_cast<char*>(&playerid_) + sizeof(diamoud_));
  _cached_size_ = 0;
}

DAllGameBet::~DAllGameBet() {
  // @@protoc_insertion_point(destructor:DAllGameBet)
  SharedDtor();
}

void DAllGameBet::SharedDtor() {
}

void DAllGameBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DAllGameBet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DAllGameBet_descriptor_;
}

const DAllGameBet& DAllGameBet::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DAllGameBet> DAllGameBet_default_instance_;

DAllGameBet* DAllGameBet::New(::google::protobuf::Arena* arena) const {
  DAllGameBet* n = new DAllGameBet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DAllGameBet::Clear() {
// @@protoc_insertion_point(message_clear_start:DAllGameBet)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DAllGameBet, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DAllGameBet*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(playerid_, diamoud_);

#undef ZR_HELPER_
#undef ZR_

}

bool DAllGameBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DAllGameBet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 playerId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Diamoud;
        break;
      }

      // optional sint32 Diamoud = 2;
      case 2: {
        if (tag == 16) {
         parse_Diamoud:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &diamoud_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DAllGameBet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DAllGameBet)
  return false;
#undef DO_
}

void DAllGameBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DAllGameBet)
  // optional sint32 playerId = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->playerid(), output);
  }

  // optional sint32 Diamoud = 2;
  if (this->diamoud() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->diamoud(), output);
  }

  // @@protoc_insertion_point(serialize_end:DAllGameBet)
}

::google::protobuf::uint8* DAllGameBet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DAllGameBet)
  // optional sint32 playerId = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->playerid(), target);
  }

  // optional sint32 Diamoud = 2;
  if (this->diamoud() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->diamoud(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DAllGameBet)
  return target;
}

size_t DAllGameBet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DAllGameBet)
  size_t total_size = 0;

  // optional sint32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->playerid());
  }

  // optional sint32 Diamoud = 2;
  if (this->diamoud() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->diamoud());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DAllGameBet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DAllGameBet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DAllGameBet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DAllGameBet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DAllGameBet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DAllGameBet)
    UnsafeMergeFrom(*source);
  }
}

void DAllGameBet::MergeFrom(const DAllGameBet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DAllGameBet)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DAllGameBet::UnsafeMergeFrom(const DAllGameBet& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.diamoud() != 0) {
    set_diamoud(from.diamoud());
  }
}

void DAllGameBet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DAllGameBet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DAllGameBet::CopyFrom(const DAllGameBet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DAllGameBet)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DAllGameBet::IsInitialized() const {

  return true;
}

void DAllGameBet::Swap(DAllGameBet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DAllGameBet::InternalSwap(DAllGameBet* other) {
  std::swap(playerid_, other->playerid_);
  std::swap(diamoud_, other->diamoud_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DAllGameBet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DAllGameBet_descriptor_;
  metadata.reflection = DAllGameBet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DAllGameBet

// optional sint32 playerId = 1;
void DAllGameBet::clear_playerid() {
  playerid_ = 0;
}
::google::protobuf::int32 DAllGameBet::playerid() const {
  // @@protoc_insertion_point(field_get:DAllGameBet.playerId)
  return playerid_;
}
void DAllGameBet::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:DAllGameBet.playerId)
}

// optional sint32 Diamoud = 2;
void DAllGameBet::clear_diamoud() {
  diamoud_ = 0;
}
::google::protobuf::int32 DAllGameBet::diamoud() const {
  // @@protoc_insertion_point(field_get:DAllGameBet.Diamoud)
  return diamoud_;
}
void DAllGameBet::set_diamoud(::google::protobuf::int32 value) {
  
  diamoud_ = value;
  // @@protoc_insertion_point(field_set:DAllGameBet.Diamoud)
}

inline const DAllGameBet* DAllGameBet::internal_default_instance() {
  return &DAllGameBet_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

URequestDissposeRoom::URequestDissposeRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:URequestDissposeRoom)
}

void URequestDissposeRoom::InitAsDefaultInstance() {
}

URequestDissposeRoom::URequestDissposeRoom(const URequestDissposeRoom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:URequestDissposeRoom)
}

void URequestDissposeRoom::SharedCtor() {
  _cached_size_ = 0;
}

URequestDissposeRoom::~URequestDissposeRoom() {
  // @@protoc_insertion_point(destructor:URequestDissposeRoom)
  SharedDtor();
}

void URequestDissposeRoom::SharedDtor() {
}

void URequestDissposeRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* URequestDissposeRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return URequestDissposeRoom_descriptor_;
}

const URequestDissposeRoom& URequestDissposeRoom::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<URequestDissposeRoom> URequestDissposeRoom_default_instance_;

URequestDissposeRoom* URequestDissposeRoom::New(::google::protobuf::Arena* arena) const {
  URequestDissposeRoom* n = new URequestDissposeRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void URequestDissposeRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:URequestDissposeRoom)
}

bool URequestDissposeRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:URequestDissposeRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:URequestDissposeRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:URequestDissposeRoom)
  return false;
#undef DO_
}

void URequestDissposeRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:URequestDissposeRoom)
  // @@protoc_insertion_point(serialize_end:URequestDissposeRoom)
}

::google::protobuf::uint8* URequestDissposeRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:URequestDissposeRoom)
  // @@protoc_insertion_point(serialize_to_array_end:URequestDissposeRoom)
  return target;
}

size_t URequestDissposeRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:URequestDissposeRoom)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void URequestDissposeRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:URequestDissposeRoom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const URequestDissposeRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const URequestDissposeRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:URequestDissposeRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:URequestDissposeRoom)
    UnsafeMergeFrom(*source);
  }
}

void URequestDissposeRoom::MergeFrom(const URequestDissposeRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:URequestDissposeRoom)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void URequestDissposeRoom::UnsafeMergeFrom(const URequestDissposeRoom& from) {
  GOOGLE_DCHECK(&from != this);
}

void URequestDissposeRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:URequestDissposeRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void URequestDissposeRoom::CopyFrom(const URequestDissposeRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:URequestDissposeRoom)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool URequestDissposeRoom::IsInitialized() const {

  return true;
}

void URequestDissposeRoom::Swap(URequestDissposeRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void URequestDissposeRoom::InternalSwap(URequestDissposeRoom* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata URequestDissposeRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = URequestDissposeRoom_descriptor_;
  metadata.reflection = URequestDissposeRoom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// URequestDissposeRoom

inline const URequestDissposeRoom* URequestDissposeRoom::internal_default_instance() {
  return &URequestDissposeRoom_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DDissposeAsk::DDissposeAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDissposeAsk)
}

void DDissposeAsk::InitAsDefaultInstance() {
}

DDissposeAsk::DDissposeAsk(const DDissposeAsk& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DDissposeAsk)
}

void DDissposeAsk::SharedCtor() {
  _cached_size_ = 0;
}

DDissposeAsk::~DDissposeAsk() {
  // @@protoc_insertion_point(destructor:DDissposeAsk)
  SharedDtor();
}

void DDissposeAsk::SharedDtor() {
}

void DDissposeAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DDissposeAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DDissposeAsk_descriptor_;
}

const DDissposeAsk& DDissposeAsk::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DDissposeAsk> DDissposeAsk_default_instance_;

DDissposeAsk* DDissposeAsk::New(::google::protobuf::Arena* arena) const {
  DDissposeAsk* n = new DDissposeAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DDissposeAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:DDissposeAsk)
}

bool DDissposeAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDissposeAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:DDissposeAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDissposeAsk)
  return false;
#undef DO_
}

void DDissposeAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDissposeAsk)
  // @@protoc_insertion_point(serialize_end:DDissposeAsk)
}

::google::protobuf::uint8* DDissposeAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDissposeAsk)
  // @@protoc_insertion_point(serialize_to_array_end:DDissposeAsk)
  return target;
}

size_t DDissposeAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDissposeAsk)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DDissposeAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDissposeAsk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DDissposeAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DDissposeAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDissposeAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDissposeAsk)
    UnsafeMergeFrom(*source);
  }
}

void DDissposeAsk::MergeFrom(const DDissposeAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDissposeAsk)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DDissposeAsk::UnsafeMergeFrom(const DDissposeAsk& from) {
  GOOGLE_DCHECK(&from != this);
}

void DDissposeAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDissposeAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DDissposeAsk::CopyFrom(const DDissposeAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDissposeAsk)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DDissposeAsk::IsInitialized() const {

  return true;
}

void DDissposeAsk::Swap(DDissposeAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DDissposeAsk::InternalSwap(DDissposeAsk* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DDissposeAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DDissposeAsk_descriptor_;
  metadata.reflection = DDissposeAsk_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DDissposeAsk

inline const DDissposeAsk* DDissposeAsk::internal_default_instance() {
  return &DDissposeAsk_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UDissposeConfirm::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UDissposeConfirm::UDissposeConfirm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:UDissposeConfirm)
}

void UDissposeConfirm::InitAsDefaultInstance() {
}

UDissposeConfirm::UDissposeConfirm(const UDissposeConfirm& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UDissposeConfirm)
}

void UDissposeConfirm::SharedCtor() {
  result_ = 0;
  _cached_size_ = 0;
}

UDissposeConfirm::~UDissposeConfirm() {
  // @@protoc_insertion_point(destructor:UDissposeConfirm)
  SharedDtor();
}

void UDissposeConfirm::SharedDtor() {
}

void UDissposeConfirm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UDissposeConfirm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UDissposeConfirm_descriptor_;
}

const UDissposeConfirm& UDissposeConfirm::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UDissposeConfirm> UDissposeConfirm_default_instance_;

UDissposeConfirm* UDissposeConfirm::New(::google::protobuf::Arena* arena) const {
  UDissposeConfirm* n = new UDissposeConfirm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UDissposeConfirm::Clear() {
// @@protoc_insertion_point(message_clear_start:UDissposeConfirm)
  result_ = 0;
}

bool UDissposeConfirm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UDissposeConfirm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 result = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UDissposeConfirm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UDissposeConfirm)
  return false;
#undef DO_
}

void UDissposeConfirm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UDissposeConfirm)
  // optional sint32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:UDissposeConfirm)
}

::google::protobuf::uint8* UDissposeConfirm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UDissposeConfirm)
  // optional sint32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:UDissposeConfirm)
  return target;
}

size_t UDissposeConfirm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UDissposeConfirm)
  size_t total_size = 0;

  // optional sint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UDissposeConfirm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UDissposeConfirm)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UDissposeConfirm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UDissposeConfirm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UDissposeConfirm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UDissposeConfirm)
    UnsafeMergeFrom(*source);
  }
}

void UDissposeConfirm::MergeFrom(const UDissposeConfirm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UDissposeConfirm)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UDissposeConfirm::UnsafeMergeFrom(const UDissposeConfirm& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void UDissposeConfirm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UDissposeConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UDissposeConfirm::CopyFrom(const UDissposeConfirm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UDissposeConfirm)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UDissposeConfirm::IsInitialized() const {

  return true;
}

void UDissposeConfirm::Swap(UDissposeConfirm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UDissposeConfirm::InternalSwap(UDissposeConfirm* other) {
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UDissposeConfirm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UDissposeConfirm_descriptor_;
  metadata.reflection = UDissposeConfirm_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UDissposeConfirm

// optional sint32 result = 1;
void UDissposeConfirm::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 UDissposeConfirm::result() const {
  // @@protoc_insertion_point(field_get:UDissposeConfirm.result)
  return result_;
}
void UDissposeConfirm::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:UDissposeConfirm.result)
}

inline const UDissposeConfirm* UDissposeConfirm::internal_default_instance() {
  return &UDissposeConfirm_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DDissposeRoom::DDissposeRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDissposeRoom)
}

void DDissposeRoom::InitAsDefaultInstance() {
}

DDissposeRoom::DDissposeRoom(const DDissposeRoom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DDissposeRoom)
}

void DDissposeRoom::SharedCtor() {
  _cached_size_ = 0;
}

DDissposeRoom::~DDissposeRoom() {
  // @@protoc_insertion_point(destructor:DDissposeRoom)
  SharedDtor();
}

void DDissposeRoom::SharedDtor() {
}

void DDissposeRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DDissposeRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DDissposeRoom_descriptor_;
}

const DDissposeRoom& DDissposeRoom::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DDissposeRoom> DDissposeRoom_default_instance_;

DDissposeRoom* DDissposeRoom::New(::google::protobuf::Arena* arena) const {
  DDissposeRoom* n = new DDissposeRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DDissposeRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:DDissposeRoom)
}

bool DDissposeRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDissposeRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:DDissposeRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDissposeRoom)
  return false;
#undef DO_
}

void DDissposeRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDissposeRoom)
  // @@protoc_insertion_point(serialize_end:DDissposeRoom)
}

::google::protobuf::uint8* DDissposeRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDissposeRoom)
  // @@protoc_insertion_point(serialize_to_array_end:DDissposeRoom)
  return target;
}

size_t DDissposeRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDissposeRoom)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DDissposeRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDissposeRoom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DDissposeRoom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DDissposeRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDissposeRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDissposeRoom)
    UnsafeMergeFrom(*source);
  }
}

void DDissposeRoom::MergeFrom(const DDissposeRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDissposeRoom)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DDissposeRoom::UnsafeMergeFrom(const DDissposeRoom& from) {
  GOOGLE_DCHECK(&from != this);
}

void DDissposeRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDissposeRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DDissposeRoom::CopyFrom(const DDissposeRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDissposeRoom)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DDissposeRoom::IsInitialized() const {

  return true;
}

void DDissposeRoom::Swap(DDissposeRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DDissposeRoom::InternalSwap(DDissposeRoom* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DDissposeRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DDissposeRoom_descriptor_;
  metadata.reflection = DDissposeRoom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DDissposeRoom

inline const DDissposeRoom* DDissposeRoom::internal_default_instance() {
  return &DDissposeRoom_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UYSZCheckPoker::UYSZCheckPoker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:UYSZCheckPoker)
}

void UYSZCheckPoker::InitAsDefaultInstance() {
}

UYSZCheckPoker::UYSZCheckPoker(const UYSZCheckPoker& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UYSZCheckPoker)
}

void UYSZCheckPoker::SharedCtor() {
  _cached_size_ = 0;
}

UYSZCheckPoker::~UYSZCheckPoker() {
  // @@protoc_insertion_point(destructor:UYSZCheckPoker)
  SharedDtor();
}

void UYSZCheckPoker::SharedDtor() {
}

void UYSZCheckPoker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UYSZCheckPoker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UYSZCheckPoker_descriptor_;
}

const UYSZCheckPoker& UYSZCheckPoker::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UYSZCheckPoker> UYSZCheckPoker_default_instance_;

UYSZCheckPoker* UYSZCheckPoker::New(::google::protobuf::Arena* arena) const {
  UYSZCheckPoker* n = new UYSZCheckPoker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UYSZCheckPoker::Clear() {
// @@protoc_insertion_point(message_clear_start:UYSZCheckPoker)
}

bool UYSZCheckPoker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UYSZCheckPoker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:UYSZCheckPoker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UYSZCheckPoker)
  return false;
#undef DO_
}

void UYSZCheckPoker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UYSZCheckPoker)
  // @@protoc_insertion_point(serialize_end:UYSZCheckPoker)
}

::google::protobuf::uint8* UYSZCheckPoker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UYSZCheckPoker)
  // @@protoc_insertion_point(serialize_to_array_end:UYSZCheckPoker)
  return target;
}

size_t UYSZCheckPoker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UYSZCheckPoker)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UYSZCheckPoker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UYSZCheckPoker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UYSZCheckPoker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UYSZCheckPoker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UYSZCheckPoker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UYSZCheckPoker)
    UnsafeMergeFrom(*source);
  }
}

void UYSZCheckPoker::MergeFrom(const UYSZCheckPoker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UYSZCheckPoker)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UYSZCheckPoker::UnsafeMergeFrom(const UYSZCheckPoker& from) {
  GOOGLE_DCHECK(&from != this);
}

void UYSZCheckPoker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UYSZCheckPoker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UYSZCheckPoker::CopyFrom(const UYSZCheckPoker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UYSZCheckPoker)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UYSZCheckPoker::IsInitialized() const {

  return true;
}

void UYSZCheckPoker::Swap(UYSZCheckPoker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UYSZCheckPoker::InternalSwap(UYSZCheckPoker* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UYSZCheckPoker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UYSZCheckPoker_descriptor_;
  metadata.reflection = UYSZCheckPoker_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UYSZCheckPoker

inline const UYSZCheckPoker* UYSZCheckPoker::internal_default_instance() {
  return &UYSZCheckPoker_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DYSZCheckPoker::kCard1FieldNumber;
const int DYSZCheckPoker::kCard2FieldNumber;
const int DYSZCheckPoker::kCard3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DYSZCheckPoker::DYSZCheckPoker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DYSZCheckPoker)
}

void DYSZCheckPoker::InitAsDefaultInstance() {
}

DYSZCheckPoker::DYSZCheckPoker(const DYSZCheckPoker& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DYSZCheckPoker)
}

void DYSZCheckPoker::SharedCtor() {
  ::memset(&card1_, 0, reinterpret_cast<char*>(&card3_) -
    reinterpret_cast<char*>(&card1_) + sizeof(card3_));
  _cached_size_ = 0;
}

DYSZCheckPoker::~DYSZCheckPoker() {
  // @@protoc_insertion_point(destructor:DYSZCheckPoker)
  SharedDtor();
}

void DYSZCheckPoker::SharedDtor() {
}

void DYSZCheckPoker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DYSZCheckPoker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DYSZCheckPoker_descriptor_;
}

const DYSZCheckPoker& DYSZCheckPoker::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DYSZCheckPoker> DYSZCheckPoker_default_instance_;

DYSZCheckPoker* DYSZCheckPoker::New(::google::protobuf::Arena* arena) const {
  DYSZCheckPoker* n = new DYSZCheckPoker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DYSZCheckPoker::Clear() {
// @@protoc_insertion_point(message_clear_start:DYSZCheckPoker)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DYSZCheckPoker, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DYSZCheckPoker*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(card1_, card3_);

#undef ZR_HELPER_
#undef ZR_

}

bool DYSZCheckPoker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DYSZCheckPoker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 card1 = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card1_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card2;
        break;
      }

      // optional uint32 card2 = 2;
      case 2: {
        if (tag == 16) {
         parse_card2:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card2_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_card3;
        break;
      }

      // optional uint32 card3 = 3;
      case 3: {
        if (tag == 24) {
         parse_card3:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card3_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DYSZCheckPoker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DYSZCheckPoker)
  return false;
#undef DO_
}

void DYSZCheckPoker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DYSZCheckPoker)
  // optional uint32 card1 = 1;
  if (this->card1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->card1(), output);
  }

  // optional uint32 card2 = 2;
  if (this->card2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card2(), output);
  }

  // optional uint32 card3 = 3;
  if (this->card3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->card3(), output);
  }

  // @@protoc_insertion_point(serialize_end:DYSZCheckPoker)
}

::google::protobuf::uint8* DYSZCheckPoker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DYSZCheckPoker)
  // optional uint32 card1 = 1;
  if (this->card1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->card1(), target);
  }

  // optional uint32 card2 = 2;
  if (this->card2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card2(), target);
  }

  // optional uint32 card3 = 3;
  if (this->card3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->card3(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DYSZCheckPoker)
  return target;
}

size_t DYSZCheckPoker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DYSZCheckPoker)
  size_t total_size = 0;

  // optional uint32 card1 = 1;
  if (this->card1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card1());
  }

  // optional uint32 card2 = 2;
  if (this->card2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card2());
  }

  // optional uint32 card3 = 3;
  if (this->card3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card3());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DYSZCheckPoker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DYSZCheckPoker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DYSZCheckPoker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DYSZCheckPoker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DYSZCheckPoker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DYSZCheckPoker)
    UnsafeMergeFrom(*source);
  }
}

void DYSZCheckPoker::MergeFrom(const DYSZCheckPoker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DYSZCheckPoker)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DYSZCheckPoker::UnsafeMergeFrom(const DYSZCheckPoker& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.card1() != 0) {
    set_card1(from.card1());
  }
  if (from.card2() != 0) {
    set_card2(from.card2());
  }
  if (from.card3() != 0) {
    set_card3(from.card3());
  }
}

void DYSZCheckPoker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DYSZCheckPoker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DYSZCheckPoker::CopyFrom(const DYSZCheckPoker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DYSZCheckPoker)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DYSZCheckPoker::IsInitialized() const {

  return true;
}

void DYSZCheckPoker::Swap(DYSZCheckPoker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DYSZCheckPoker::InternalSwap(DYSZCheckPoker* other) {
  std::swap(card1_, other->card1_);
  std::swap(card2_, other->card2_);
  std::swap(card3_, other->card3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DYSZCheckPoker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DYSZCheckPoker_descriptor_;
  metadata.reflection = DYSZCheckPoker_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DYSZCheckPoker

// optional uint32 card1 = 1;
void DYSZCheckPoker::clear_card1() {
  card1_ = 0u;
}
::google::protobuf::uint32 DYSZCheckPoker::card1() const {
  // @@protoc_insertion_point(field_get:DYSZCheckPoker.card1)
  return card1_;
}
void DYSZCheckPoker::set_card1(::google::protobuf::uint32 value) {
  
  card1_ = value;
  // @@protoc_insertion_point(field_set:DYSZCheckPoker.card1)
}

// optional uint32 card2 = 2;
void DYSZCheckPoker::clear_card2() {
  card2_ = 0u;
}
::google::protobuf::uint32 DYSZCheckPoker::card2() const {
  // @@protoc_insertion_point(field_get:DYSZCheckPoker.card2)
  return card2_;
}
void DYSZCheckPoker::set_card2(::google::protobuf::uint32 value) {
  
  card2_ = value;
  // @@protoc_insertion_point(field_set:DYSZCheckPoker.card2)
}

// optional uint32 card3 = 3;
void DYSZCheckPoker::clear_card3() {
  card3_ = 0u;
}
::google::protobuf::uint32 DYSZCheckPoker::card3() const {
  // @@protoc_insertion_point(field_get:DYSZCheckPoker.card3)
  return card3_;
}
void DYSZCheckPoker::set_card3(::google::protobuf::uint32 value) {
  
  card3_ = value;
  // @@protoc_insertion_point(field_set:DYSZCheckPoker.card3)
}

inline const DYSZCheckPoker* DYSZCheckPoker::internal_default_instance() {
  return &DYSZCheckPoker_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UYSZCompareCards::UYSZCompareCards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:UYSZCompareCards)
}

void UYSZCompareCards::InitAsDefaultInstance() {
}

UYSZCompareCards::UYSZCompareCards(const UYSZCompareCards& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UYSZCompareCards)
}

void UYSZCompareCards::SharedCtor() {
  _cached_size_ = 0;
}

UYSZCompareCards::~UYSZCompareCards() {
  // @@protoc_insertion_point(destructor:UYSZCompareCards)
  SharedDtor();
}

void UYSZCompareCards::SharedDtor() {
}

void UYSZCompareCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UYSZCompareCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UYSZCompareCards_descriptor_;
}

const UYSZCompareCards& UYSZCompareCards::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UYSZCompareCards> UYSZCompareCards_default_instance_;

UYSZCompareCards* UYSZCompareCards::New(::google::protobuf::Arena* arena) const {
  UYSZCompareCards* n = new UYSZCompareCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UYSZCompareCards::Clear() {
// @@protoc_insertion_point(message_clear_start:UYSZCompareCards)
}

bool UYSZCompareCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UYSZCompareCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:UYSZCompareCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UYSZCompareCards)
  return false;
#undef DO_
}

void UYSZCompareCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UYSZCompareCards)
  // @@protoc_insertion_point(serialize_end:UYSZCompareCards)
}

::google::protobuf::uint8* UYSZCompareCards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UYSZCompareCards)
  // @@protoc_insertion_point(serialize_to_array_end:UYSZCompareCards)
  return target;
}

size_t UYSZCompareCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UYSZCompareCards)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UYSZCompareCards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UYSZCompareCards)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UYSZCompareCards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UYSZCompareCards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UYSZCompareCards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UYSZCompareCards)
    UnsafeMergeFrom(*source);
  }
}

void UYSZCompareCards::MergeFrom(const UYSZCompareCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UYSZCompareCards)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UYSZCompareCards::UnsafeMergeFrom(const UYSZCompareCards& from) {
  GOOGLE_DCHECK(&from != this);
}

void UYSZCompareCards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UYSZCompareCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UYSZCompareCards::CopyFrom(const UYSZCompareCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UYSZCompareCards)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UYSZCompareCards::IsInitialized() const {

  return true;
}

void UYSZCompareCards::Swap(UYSZCompareCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UYSZCompareCards::InternalSwap(UYSZCompareCards* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UYSZCompareCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UYSZCompareCards_descriptor_;
  metadata.reflection = UYSZCompareCards_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UYSZCompareCards

inline const UYSZCompareCards* UYSZCompareCards::internal_default_instance() {
  return &UYSZCompareCards_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DYSZCompareCards::DYSZCompareCards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DYSZCompareCards)
}

void DYSZCompareCards::InitAsDefaultInstance() {
}

DYSZCompareCards::DYSZCompareCards(const DYSZCompareCards& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DYSZCompareCards)
}

void DYSZCompareCards::SharedCtor() {
  _cached_size_ = 0;
}

DYSZCompareCards::~DYSZCompareCards() {
  // @@protoc_insertion_point(destructor:DYSZCompareCards)
  SharedDtor();
}

void DYSZCompareCards::SharedDtor() {
}

void DYSZCompareCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DYSZCompareCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DYSZCompareCards_descriptor_;
}

const DYSZCompareCards& DYSZCompareCards::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DYSZCompareCards> DYSZCompareCards_default_instance_;

DYSZCompareCards* DYSZCompareCards::New(::google::protobuf::Arena* arena) const {
  DYSZCompareCards* n = new DYSZCompareCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DYSZCompareCards::Clear() {
// @@protoc_insertion_point(message_clear_start:DYSZCompareCards)
}

bool DYSZCompareCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DYSZCompareCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:DYSZCompareCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DYSZCompareCards)
  return false;
#undef DO_
}

void DYSZCompareCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DYSZCompareCards)
  // @@protoc_insertion_point(serialize_end:DYSZCompareCards)
}

::google::protobuf::uint8* DYSZCompareCards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DYSZCompareCards)
  // @@protoc_insertion_point(serialize_to_array_end:DYSZCompareCards)
  return target;
}

size_t DYSZCompareCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DYSZCompareCards)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DYSZCompareCards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DYSZCompareCards)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DYSZCompareCards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DYSZCompareCards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DYSZCompareCards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DYSZCompareCards)
    UnsafeMergeFrom(*source);
  }
}

void DYSZCompareCards::MergeFrom(const DYSZCompareCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DYSZCompareCards)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DYSZCompareCards::UnsafeMergeFrom(const DYSZCompareCards& from) {
  GOOGLE_DCHECK(&from != this);
}

void DYSZCompareCards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DYSZCompareCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DYSZCompareCards::CopyFrom(const DYSZCompareCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DYSZCompareCards)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DYSZCompareCards::IsInitialized() const {

  return true;
}

void DYSZCompareCards::Swap(DYSZCompareCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DYSZCompareCards::InternalSwap(DYSZCompareCards* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DYSZCompareCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DYSZCompareCards_descriptor_;
  metadata.reflection = DYSZCompareCards_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DYSZCompareCards

inline const DYSZCompareCards* DYSZCompareCards::internal_default_instance() {
  return &DYSZCompareCards_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UYSZPass::UYSZPass()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:UYSZPass)
}

void UYSZPass::InitAsDefaultInstance() {
}

UYSZPass::UYSZPass(const UYSZPass& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UYSZPass)
}

void UYSZPass::SharedCtor() {
  _cached_size_ = 0;
}

UYSZPass::~UYSZPass() {
  // @@protoc_insertion_point(destructor:UYSZPass)
  SharedDtor();
}

void UYSZPass::SharedDtor() {
}

void UYSZPass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UYSZPass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UYSZPass_descriptor_;
}

const UYSZPass& UYSZPass::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UYSZPass> UYSZPass_default_instance_;

UYSZPass* UYSZPass::New(::google::protobuf::Arena* arena) const {
  UYSZPass* n = new UYSZPass;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UYSZPass::Clear() {
// @@protoc_insertion_point(message_clear_start:UYSZPass)
}

bool UYSZPass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UYSZPass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:UYSZPass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UYSZPass)
  return false;
#undef DO_
}

void UYSZPass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UYSZPass)
  // @@protoc_insertion_point(serialize_end:UYSZPass)
}

::google::protobuf::uint8* UYSZPass::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UYSZPass)
  // @@protoc_insertion_point(serialize_to_array_end:UYSZPass)
  return target;
}

size_t UYSZPass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UYSZPass)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UYSZPass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UYSZPass)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UYSZPass* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UYSZPass>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UYSZPass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UYSZPass)
    UnsafeMergeFrom(*source);
  }
}

void UYSZPass::MergeFrom(const UYSZPass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UYSZPass)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UYSZPass::UnsafeMergeFrom(const UYSZPass& from) {
  GOOGLE_DCHECK(&from != this);
}

void UYSZPass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UYSZPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UYSZPass::CopyFrom(const UYSZPass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UYSZPass)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UYSZPass::IsInitialized() const {

  return true;
}

void UYSZPass::Swap(UYSZPass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UYSZPass::InternalSwap(UYSZPass* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UYSZPass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UYSZPass_descriptor_;
  metadata.reflection = UYSZPass_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UYSZPass

inline const UYSZPass* UYSZPass::internal_default_instance() {
  return &UYSZPass_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DYSZNoticePlayPassCard::DYSZNoticePlayPassCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_roommodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DYSZNoticePlayPassCard)
}

void DYSZNoticePlayPassCard::InitAsDefaultInstance() {
}

DYSZNoticePlayPassCard::DYSZNoticePlayPassCard(const DYSZNoticePlayPassCard& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DYSZNoticePlayPassCard)
}

void DYSZNoticePlayPassCard::SharedCtor() {
  _cached_size_ = 0;
}

DYSZNoticePlayPassCard::~DYSZNoticePlayPassCard() {
  // @@protoc_insertion_point(destructor:DYSZNoticePlayPassCard)
  SharedDtor();
}

void DYSZNoticePlayPassCard::SharedDtor() {
}

void DYSZNoticePlayPassCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DYSZNoticePlayPassCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DYSZNoticePlayPassCard_descriptor_;
}

const DYSZNoticePlayPassCard& DYSZNoticePlayPassCard::default_instance() {
  protobuf_InitDefaults_roommodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DYSZNoticePlayPassCard> DYSZNoticePlayPassCard_default_instance_;

DYSZNoticePlayPassCard* DYSZNoticePlayPassCard::New(::google::protobuf::Arena* arena) const {
  DYSZNoticePlayPassCard* n = new DYSZNoticePlayPassCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DYSZNoticePlayPassCard::Clear() {
// @@protoc_insertion_point(message_clear_start:DYSZNoticePlayPassCard)
}

bool DYSZNoticePlayPassCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DYSZNoticePlayPassCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:DYSZNoticePlayPassCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DYSZNoticePlayPassCard)
  return false;
#undef DO_
}

void DYSZNoticePlayPassCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DYSZNoticePlayPassCard)
  // @@protoc_insertion_point(serialize_end:DYSZNoticePlayPassCard)
}

::google::protobuf::uint8* DYSZNoticePlayPassCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DYSZNoticePlayPassCard)
  // @@protoc_insertion_point(serialize_to_array_end:DYSZNoticePlayPassCard)
  return target;
}

size_t DYSZNoticePlayPassCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DYSZNoticePlayPassCard)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DYSZNoticePlayPassCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DYSZNoticePlayPassCard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DYSZNoticePlayPassCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DYSZNoticePlayPassCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DYSZNoticePlayPassCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DYSZNoticePlayPassCard)
    UnsafeMergeFrom(*source);
  }
}

void DYSZNoticePlayPassCard::MergeFrom(const DYSZNoticePlayPassCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DYSZNoticePlayPassCard)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DYSZNoticePlayPassCard::UnsafeMergeFrom(const DYSZNoticePlayPassCard& from) {
  GOOGLE_DCHECK(&from != this);
}

void DYSZNoticePlayPassCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DYSZNoticePlayPassCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DYSZNoticePlayPassCard::CopyFrom(const DYSZNoticePlayPassCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DYSZNoticePlayPassCard)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DYSZNoticePlayPassCard::IsInitialized() const {

  return true;
}

void DYSZNoticePlayPassCard::Swap(DYSZNoticePlayPassCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DYSZNoticePlayPassCard::InternalSwap(DYSZNoticePlayPassCard* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DYSZNoticePlayPassCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DYSZNoticePlayPassCard_descriptor_;
  metadata.reflection = DYSZNoticePlayPassCard_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DYSZNoticePlayPassCard

inline const DYSZNoticePlayPassCard* DYSZNoticePlayPassCard::internal_default_instance() {
  return &DYSZNoticePlayPassCard_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
