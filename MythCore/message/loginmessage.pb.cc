// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loginmessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "loginmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMessageLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoginRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LOGIN_MSG_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_loginmessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_loginmessage_2eproto() {
  protobuf_AddDesc_loginmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "loginmessage.proto");
  GOOGLE_CHECK(file != NULL);
  CMessageLoginRequest_descriptor_ = file->message_type(0);
  static const int CMessageLoginRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginRequest, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginRequest, worldid_),
  };
  CMessageLoginRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMessageLoginRequest_descriptor_,
      CMessageLoginRequest::internal_default_instance(),
      CMessageLoginRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CMessageLoginRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginRequest, _internal_metadata_));
  LOGIN_MSG_ID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_loginmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMessageLoginRequest_descriptor_, CMessageLoginRequest::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_loginmessage_2eproto() {
  CMessageLoginRequest_default_instance_.Shutdown();
  delete CMessageLoginRequest_reflection_;
}

void protobuf_InitDefaults_loginmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  CMessageLoginRequest_default_instance_.DefaultConstruct();
  CMessageLoginRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_loginmessage_2eproto_once_);
void protobuf_InitDefaults_loginmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_loginmessage_2eproto_once_,
                 &protobuf_InitDefaults_loginmessage_2eproto_impl);
}
void protobuf_AddDesc_loginmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_loginmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022loginmessage.proto\"H\n\024CMessageLoginReq"
    "uest\022\014\n\004Name\030\001 \001(\t\022\021\n\tChannelID\030\002 \001(\r\022\017\n"
    "\007WorldID\030\003 \001(\r*6\n\014LOGIN_MSG_ID\022\014\n\010ID_ERR"
    "OR\020\000\022\030\n\024ID_C2S_REQUEST_LOGIN\020\001b\006proto3", 158);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "loginmessage.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_loginmessage_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_loginmessage_2eproto_once_);
void protobuf_AddDesc_loginmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_loginmessage_2eproto_once_,
                 &protobuf_AddDesc_loginmessage_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_loginmessage_2eproto {
  StaticDescriptorInitializer_loginmessage_2eproto() {
    protobuf_AddDesc_loginmessage_2eproto();
  }
} static_descriptor_initializer_loginmessage_2eproto_;
const ::google::protobuf::EnumDescriptor* LOGIN_MSG_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOGIN_MSG_ID_descriptor_;
}
bool LOGIN_MSG_ID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMessageLoginRequest::kNameFieldNumber;
const int CMessageLoginRequest::kChannelIDFieldNumber;
const int CMessageLoginRequest::kWorldIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMessageLoginRequest::CMessageLoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_loginmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageLoginRequest)
}

void CMessageLoginRequest::InitAsDefaultInstance() {
}

CMessageLoginRequest::CMessageLoginRequest(const CMessageLoginRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMessageLoginRequest)
}

void CMessageLoginRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channelid_, 0, reinterpret_cast<char*>(&worldid_) -
    reinterpret_cast<char*>(&channelid_) + sizeof(worldid_));
  _cached_size_ = 0;
}

CMessageLoginRequest::~CMessageLoginRequest() {
  // @@protoc_insertion_point(destructor:CMessageLoginRequest)
  SharedDtor();
}

void CMessageLoginRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMessageLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginRequest_descriptor_;
}

const CMessageLoginRequest& CMessageLoginRequest::default_instance() {
  protobuf_InitDefaults_loginmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CMessageLoginRequest> CMessageLoginRequest_default_instance_;

CMessageLoginRequest* CMessageLoginRequest::New(::google::protobuf::Arena* arena) const {
  CMessageLoginRequest* n = new CMessageLoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMessageLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMessageLoginRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CMessageLoginRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMessageLoginRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(channelid_, worldid_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CMessageLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageLoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CMessageLoginRequest.Name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChannelID;
        break;
      }

      // optional uint32 ChannelID = 2;
      case 2: {
        if (tag == 16) {
         parse_ChannelID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_WorldID;
        break;
      }

      // optional uint32 WorldID = 3;
      case 3: {
        if (tag == 24) {
         parse_WorldID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageLoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageLoginRequest)
  return false;
#undef DO_
}

void CMessageLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageLoginRequest)
  // optional string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CMessageLoginRequest.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 ChannelID = 2;
  if (this->channelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channelid(), output);
  }

  // optional uint32 WorldID = 3;
  if (this->worldid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->worldid(), output);
  }

  // @@protoc_insertion_point(serialize_end:CMessageLoginRequest)
}

::google::protobuf::uint8* CMessageLoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMessageLoginRequest)
  // optional string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CMessageLoginRequest.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 ChannelID = 2;
  if (this->channelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channelid(), target);
  }

  // optional uint32 WorldID = 3;
  if (this->worldid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->worldid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CMessageLoginRequest)
  return target;
}

size_t CMessageLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMessageLoginRequest)
  size_t total_size = 0;

  // optional string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 ChannelID = 2;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channelid());
  }

  // optional uint32 WorldID = 3;
  if (this->worldid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worldid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMessageLoginRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMessageLoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMessageLoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMessageLoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMessageLoginRequest)
    UnsafeMergeFrom(*source);
  }
}

void CMessageLoginRequest::MergeFrom(const CMessageLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMessageLoginRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CMessageLoginRequest::UnsafeMergeFrom(const CMessageLoginRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.channelid() != 0) {
    set_channelid(from.channelid());
  }
  if (from.worldid() != 0) {
    set_worldid(from.worldid());
  }
}

void CMessageLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMessageLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginRequest::CopyFrom(const CMessageLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMessageLoginRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CMessageLoginRequest::IsInitialized() const {

  return true;
}

void CMessageLoginRequest::Swap(CMessageLoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMessageLoginRequest::InternalSwap(CMessageLoginRequest* other) {
  name_.Swap(&other->name_);
  std::swap(channelid_, other->channelid_);
  std::swap(worldid_, other->worldid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMessageLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageLoginRequest_descriptor_;
  metadata.reflection = CMessageLoginRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMessageLoginRequest

// optional string Name = 1;
void CMessageLoginRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CMessageLoginRequest::name() const {
  // @@protoc_insertion_point(field_get:CMessageLoginRequest.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMessageLoginRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMessageLoginRequest.Name)
}
void CMessageLoginRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMessageLoginRequest.Name)
}
void CMessageLoginRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMessageLoginRequest.Name)
}
::std::string* CMessageLoginRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CMessageLoginRequest.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMessageLoginRequest::release_name() {
  // @@protoc_insertion_point(field_release:CMessageLoginRequest.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMessageLoginRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CMessageLoginRequest.Name)
}

// optional uint32 ChannelID = 2;
void CMessageLoginRequest::clear_channelid() {
  channelid_ = 0u;
}
::google::protobuf::uint32 CMessageLoginRequest::channelid() const {
  // @@protoc_insertion_point(field_get:CMessageLoginRequest.ChannelID)
  return channelid_;
}
void CMessageLoginRequest::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:CMessageLoginRequest.ChannelID)
}

// optional uint32 WorldID = 3;
void CMessageLoginRequest::clear_worldid() {
  worldid_ = 0u;
}
::google::protobuf::uint32 CMessageLoginRequest::worldid() const {
  // @@protoc_insertion_point(field_get:CMessageLoginRequest.WorldID)
  return worldid_;
}
void CMessageLoginRequest::set_worldid(::google::protobuf::uint32 value) {
  
  worldid_ = value;
  // @@protoc_insertion_point(field_set:CMessageLoginRequest.WorldID)
}

inline const CMessageLoginRequest* CMessageLoginRequest::internal_default_instance() {
  return &CMessageLoginRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
