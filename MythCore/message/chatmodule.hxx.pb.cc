// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatmodule.hxx

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chatmodule.hxx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CChatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CChatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CChatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CChatResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CChatNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CChatNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBNewsRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBNewsRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBNewsParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBNewsParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWorldNewsNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWorldNewsNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CHAT_MODULE_MSG_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_chatmodule_2ehxx() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_chatmodule_2ehxx() {
  protobuf_AddDesc_chatmodule_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chatmodule.hxx");
  GOOGLE_CHECK(file != NULL);
  CChatRequest_descriptor_ = file->message_type(0);
  static const int CChatRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CChatRequest, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CChatRequest, content_),
  };
  CChatRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CChatRequest_descriptor_,
      CChatRequest::internal_default_instance(),
      CChatRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CChatRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CChatRequest, _internal_metadata_));
  CChatResponse_descriptor_ = file->message_type(1);
  static const int CChatResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CChatResponse, result_),
  };
  CChatResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CChatResponse_descriptor_,
      CChatResponse::internal_default_instance(),
      CChatResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CChatResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CChatResponse, _internal_metadata_));
  CChatNotify_descriptor_ = file->message_type(2);
  static const int CChatNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CChatNotify, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CChatNotify, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CChatNotify, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CChatNotify, content_),
  };
  CChatNotify_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CChatNotify_descriptor_,
      CChatNotify::internal_default_instance(),
      CChatNotify_offsets_,
      -1,
      -1,
      -1,
      sizeof(CChatNotify),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CChatNotify, _internal_metadata_));
  PBNewsRole_descriptor_ = file->message_type(3);
  static const int PBNewsRole_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNewsRole, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNewsRole, playername_),
  };
  PBNewsRole_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBNewsRole_descriptor_,
      PBNewsRole::internal_default_instance(),
      PBNewsRole_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBNewsRole),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNewsRole, _internal_metadata_));
  PBNewsParam_descriptor_ = file->message_type(4);
  static const int PBNewsParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNewsParam, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNewsParam, strparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNewsParam, role_),
  };
  PBNewsParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBNewsParam_descriptor_,
      PBNewsParam::internal_default_instance(),
      PBNewsParam_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBNewsParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBNewsParam, _internal_metadata_));
  CWorldNewsNotify_descriptor_ = file->message_type(5);
  static const int CWorldNewsNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorldNewsNotify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorldNewsNotify, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorldNewsNotify, newsparam_),
  };
  CWorldNewsNotify_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CWorldNewsNotify_descriptor_,
      CWorldNewsNotify::internal_default_instance(),
      CWorldNewsNotify_offsets_,
      -1,
      -1,
      -1,
      sizeof(CWorldNewsNotify),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWorldNewsNotify, _internal_metadata_));
  CHAT_MODULE_MSG_ID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chatmodule_2ehxx);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CChatRequest_descriptor_, CChatRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CChatResponse_descriptor_, CChatResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CChatNotify_descriptor_, CChatNotify::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBNewsRole_descriptor_, PBNewsRole::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBNewsParam_descriptor_, PBNewsParam::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CWorldNewsNotify_descriptor_, CWorldNewsNotify::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chatmodule_2ehxx() {
  CChatRequest_default_instance_.Shutdown();
  delete CChatRequest_reflection_;
  CChatResponse_default_instance_.Shutdown();
  delete CChatResponse_reflection_;
  CChatNotify_default_instance_.Shutdown();
  delete CChatNotify_reflection_;
  PBNewsRole_default_instance_.Shutdown();
  delete PBNewsRole_reflection_;
  PBNewsParam_default_instance_.Shutdown();
  delete PBNewsParam_reflection_;
  CWorldNewsNotify_default_instance_.Shutdown();
  delete CWorldNewsNotify_reflection_;
}

void protobuf_InitDefaults_chatmodule_2ehxx_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  CChatRequest_default_instance_.DefaultConstruct();
  CChatResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CChatNotify_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PBNewsRole_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PBNewsParam_default_instance_.DefaultConstruct();
  CWorldNewsNotify_default_instance_.DefaultConstruct();
  CChatRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CChatResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CChatNotify_default_instance_.get_mutable()->InitAsDefaultInstance();
  PBNewsRole_default_instance_.get_mutable()->InitAsDefaultInstance();
  PBNewsParam_default_instance_.get_mutable()->InitAsDefaultInstance();
  CWorldNewsNotify_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_chatmodule_2ehxx_once_);
void protobuf_InitDefaults_chatmodule_2ehxx() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_chatmodule_2ehxx_once_,
                 &protobuf_InitDefaults_chatmodule_2ehxx_impl);
}
void protobuf_AddDesc_chatmodule_2ehxx_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_chatmodule_2ehxx();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016chatmodule.hxx\"0\n\014CChatRequest\022\017\n\007Chan"
    "nel\030\001 \001(\r\022\017\n\007Content\030\002 \001(\t\"\037\n\rCChatRespo"
    "nse\022\016\n\006Result\030\001 \001(\r\"U\n\013CChatNotify\022\020\n\010Pl"
    "ayerID\030\001 \001(\r\022\022\n\nPlayerName\030\002 \001(\t\022\017\n\007Chan"
    "nel\030\003 \001(\r\022\017\n\007Content\030\004 \001(\t\"2\n\nPBNewsRole"
    "\022\020\n\010PlayerID\030\001 \001(\r\022\022\n\nPlayerName\030\002 \001(\t\"I"
    "\n\013PBNewsParam\022\r\n\005Param\030\001 \003(\r\022\020\n\010StrParam"
    "\030\002 \003(\t\022\031\n\004Role\030\003 \003(\0132\013.PBNewsRole\"\\\n\020CWo"
    "rldNewsNotify\022\014\n\004Type\030\001 \001(\r\022\031\n\004Role\030\002 \001("
    "\0132\013.PBNewsRole\022\037\n\tNewsParam\030\003 \001(\0132\014.PBNe"
    "wsParam*\233\001\n\022CHAT_MODULE_MSG_ID\022\030\n\024ID_CHA"
    "T_MODULE_ERROR\020\000\022\030\n\023ID_C2S_REQUEST_CHAT\020"
    "\2000\022\031\n\024ID_S2C_RESPONSE_CHAT\020\2010\022\027\n\022ID_S2C_"
    "NOTIFY_CHAT\020\2020\022\035\n\030ID_S2C_NOTIFY_WORLD_NE"
    "WS\020\2030b\006proto3", 573);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chatmodule.hxx", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chatmodule_2ehxx);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_chatmodule_2ehxx_once_);
void protobuf_AddDesc_chatmodule_2ehxx() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_chatmodule_2ehxx_once_,
                 &protobuf_AddDesc_chatmodule_2ehxx_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chatmodule_2ehxx {
  StaticDescriptorInitializer_chatmodule_2ehxx() {
    protobuf_AddDesc_chatmodule_2ehxx();
  }
} static_descriptor_initializer_chatmodule_2ehxx_;
const ::google::protobuf::EnumDescriptor* CHAT_MODULE_MSG_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHAT_MODULE_MSG_ID_descriptor_;
}
bool CHAT_MODULE_MSG_ID_IsValid(int value) {
  switch (value) {
    case 0:
    case 6144:
    case 6145:
    case 6146:
    case 6147:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatRequest::kChannelFieldNumber;
const int CChatRequest::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatRequest::CChatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chatmodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatRequest)
}

void CChatRequest::InitAsDefaultInstance() {
}

CChatRequest::CChatRequest(const CChatRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CChatRequest)
}

void CChatRequest::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_ = 0u;
  _cached_size_ = 0;
}

CChatRequest::~CChatRequest() {
  // @@protoc_insertion_point(destructor:CChatRequest)
  SharedDtor();
}

void CChatRequest::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CChatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CChatRequest_descriptor_;
}

const CChatRequest& CChatRequest::default_instance() {
  protobuf_InitDefaults_chatmodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CChatRequest> CChatRequest_default_instance_;

CChatRequest* CChatRequest::New(::google::protobuf::Arena* arena) const {
  CChatRequest* n = new CChatRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CChatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatRequest)
  channel_ = 0u;
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CChatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Channel = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Content;
        break;
      }

      // optional string Content = 2;
      case 2: {
        if (tag == 18) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CChatRequest.Content"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatRequest)
  return false;
#undef DO_
}

void CChatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatRequest)
  // optional uint32 Channel = 1;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional string Content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CChatRequest.Content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // @@protoc_insertion_point(serialize_end:CChatRequest)
}

::google::protobuf::uint8* CChatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatRequest)
  // optional uint32 Channel = 1;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional string Content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CChatRequest.Content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CChatRequest)
  return target;
}

size_t CChatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatRequest)
  size_t total_size = 0;

  // optional uint32 Channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  // optional string Content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CChatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CChatRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatRequest)
    UnsafeMergeFrom(*source);
  }
}

void CChatRequest::MergeFrom(const CChatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CChatRequest::UnsafeMergeFrom(const CChatRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void CChatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatRequest::CopyFrom(const CChatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CChatRequest::IsInitialized() const {

  return true;
}

void CChatRequest::Swap(CChatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatRequest::InternalSwap(CChatRequest* other) {
  std::swap(channel_, other->channel_);
  content_.Swap(&other->content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CChatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CChatRequest_descriptor_;
  metadata.reflection = CChatRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CChatRequest

// optional uint32 Channel = 1;
void CChatRequest::clear_channel() {
  channel_ = 0u;
}
::google::protobuf::uint32 CChatRequest::channel() const {
  // @@protoc_insertion_point(field_get:CChatRequest.Channel)
  return channel_;
}
void CChatRequest::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:CChatRequest.Channel)
}

// optional string Content = 2;
void CChatRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CChatRequest::content() const {
  // @@protoc_insertion_point(field_get:CChatRequest.Content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CChatRequest::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CChatRequest.Content)
}
void CChatRequest::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CChatRequest.Content)
}
void CChatRequest::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CChatRequest.Content)
}
::std::string* CChatRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:CChatRequest.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CChatRequest::release_content() {
  // @@protoc_insertion_point(field_release:CChatRequest.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CChatRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:CChatRequest.Content)
}

inline const CChatRequest* CChatRequest::internal_default_instance() {
  return &CChatRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatResponse::CChatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chatmodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatResponse)
}

void CChatResponse::InitAsDefaultInstance() {
}

CChatResponse::CChatResponse(const CChatResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CChatResponse)
}

void CChatResponse::SharedCtor() {
  result_ = 0u;
  _cached_size_ = 0;
}

CChatResponse::~CChatResponse() {
  // @@protoc_insertion_point(destructor:CChatResponse)
  SharedDtor();
}

void CChatResponse::SharedDtor() {
}

void CChatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CChatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CChatResponse_descriptor_;
}

const CChatResponse& CChatResponse::default_instance() {
  protobuf_InitDefaults_chatmodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CChatResponse> CChatResponse_default_instance_;

CChatResponse* CChatResponse::New(::google::protobuf::Arena* arena) const {
  CChatResponse* n = new CChatResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatResponse)
  result_ = 0u;
}

bool CChatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatResponse)
  return false;
#undef DO_
}

void CChatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatResponse)
  // optional uint32 Result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:CChatResponse)
}

::google::protobuf::uint8* CChatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatResponse)
  // optional uint32 Result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CChatResponse)
  return target;
}

size_t CChatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatResponse)
  size_t total_size = 0;

  // optional uint32 Result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CChatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CChatResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatResponse)
    UnsafeMergeFrom(*source);
  }
}

void CChatResponse::MergeFrom(const CChatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CChatResponse::UnsafeMergeFrom(const CChatResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void CChatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatResponse::CopyFrom(const CChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CChatResponse::IsInitialized() const {

  return true;
}

void CChatResponse::Swap(CChatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatResponse::InternalSwap(CChatResponse* other) {
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CChatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CChatResponse_descriptor_;
  metadata.reflection = CChatResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CChatResponse

// optional uint32 Result = 1;
void CChatResponse::clear_result() {
  result_ = 0u;
}
::google::protobuf::uint32 CChatResponse::result() const {
  // @@protoc_insertion_point(field_get:CChatResponse.Result)
  return result_;
}
void CChatResponse::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:CChatResponse.Result)
}

inline const CChatResponse* CChatResponse::internal_default_instance() {
  return &CChatResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CChatNotify::kPlayerIDFieldNumber;
const int CChatNotify::kPlayerNameFieldNumber;
const int CChatNotify::kChannelFieldNumber;
const int CChatNotify::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CChatNotify::CChatNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chatmodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CChatNotify)
}

void CChatNotify::InitAsDefaultInstance() {
}

CChatNotify::CChatNotify(const CChatNotify& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CChatNotify)
}

void CChatNotify::SharedCtor() {
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerid_, 0, reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&playerid_) + sizeof(channel_));
  _cached_size_ = 0;
}

CChatNotify::~CChatNotify() {
  // @@protoc_insertion_point(destructor:CChatNotify)
  SharedDtor();
}

void CChatNotify::SharedDtor() {
  playername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CChatNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CChatNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CChatNotify_descriptor_;
}

const CChatNotify& CChatNotify::default_instance() {
  protobuf_InitDefaults_chatmodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CChatNotify> CChatNotify_default_instance_;

CChatNotify* CChatNotify::New(::google::protobuf::Arena* arena) const {
  CChatNotify* n = new CChatNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CChatNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:CChatNotify)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CChatNotify, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CChatNotify*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(playerid_, channel_);
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CChatNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CChatNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PlayerID = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PlayerName;
        break;
      }

      // optional string PlayerName = 2;
      case 2: {
        if (tag == 18) {
         parse_PlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CChatNotify.PlayerName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Channel;
        break;
      }

      // optional uint32 Channel = 3;
      case 3: {
        if (tag == 24) {
         parse_Channel:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Content;
        break;
      }

      // optional string Content = 4;
      case 4: {
        if (tag == 34) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CChatNotify.Content"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CChatNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CChatNotify)
  return false;
#undef DO_
}

void CChatNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CChatNotify)
  // optional uint32 PlayerID = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // optional string PlayerName = 2;
  if (this->playername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CChatNotify.PlayerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playername(), output);
  }

  // optional uint32 Channel = 3;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel(), output);
  }

  // optional string Content = 4;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CChatNotify.Content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  // @@protoc_insertion_point(serialize_end:CChatNotify)
}

::google::protobuf::uint8* CChatNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CChatNotify)
  // optional uint32 PlayerID = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // optional string PlayerName = 2;
  if (this->playername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CChatNotify.PlayerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // optional uint32 Channel = 3;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel(), target);
  }

  // optional string Content = 4;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CChatNotify.Content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CChatNotify)
  return target;
}

size_t CChatNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChatNotify)
  size_t total_size = 0;

  // optional uint32 PlayerID = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  // optional string PlayerName = 2;
  if (this->playername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playername());
  }

  // optional uint32 Channel = 3;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  // optional string Content = 4;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CChatNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CChatNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CChatNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CChatNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CChatNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CChatNotify)
    UnsafeMergeFrom(*source);
  }
}

void CChatNotify::MergeFrom(const CChatNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChatNotify)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CChatNotify::UnsafeMergeFrom(const CChatNotify& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.playername().size() > 0) {

    playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void CChatNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CChatNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CChatNotify::CopyFrom(const CChatNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChatNotify)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CChatNotify::IsInitialized() const {

  return true;
}

void CChatNotify::Swap(CChatNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CChatNotify::InternalSwap(CChatNotify* other) {
  std::swap(playerid_, other->playerid_);
  playername_.Swap(&other->playername_);
  std::swap(channel_, other->channel_);
  content_.Swap(&other->content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CChatNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CChatNotify_descriptor_;
  metadata.reflection = CChatNotify_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CChatNotify

// optional uint32 PlayerID = 1;
void CChatNotify::clear_playerid() {
  playerid_ = 0u;
}
::google::protobuf::uint32 CChatNotify::playerid() const {
  // @@protoc_insertion_point(field_get:CChatNotify.PlayerID)
  return playerid_;
}
void CChatNotify::set_playerid(::google::protobuf::uint32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CChatNotify.PlayerID)
}

// optional string PlayerName = 2;
void CChatNotify::clear_playername() {
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CChatNotify::playername() const {
  // @@protoc_insertion_point(field_get:CChatNotify.PlayerName)
  return playername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CChatNotify::set_playername(const ::std::string& value) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CChatNotify.PlayerName)
}
void CChatNotify::set_playername(const char* value) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CChatNotify.PlayerName)
}
void CChatNotify::set_playername(const char* value, size_t size) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CChatNotify.PlayerName)
}
::std::string* CChatNotify::mutable_playername() {
  
  // @@protoc_insertion_point(field_mutable:CChatNotify.PlayerName)
  return playername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CChatNotify::release_playername() {
  // @@protoc_insertion_point(field_release:CChatNotify.PlayerName)
  
  return playername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CChatNotify::set_allocated_playername(::std::string* playername) {
  if (playername != NULL) {
    
  } else {
    
  }
  playername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playername);
  // @@protoc_insertion_point(field_set_allocated:CChatNotify.PlayerName)
}

// optional uint32 Channel = 3;
void CChatNotify::clear_channel() {
  channel_ = 0u;
}
::google::protobuf::uint32 CChatNotify::channel() const {
  // @@protoc_insertion_point(field_get:CChatNotify.Channel)
  return channel_;
}
void CChatNotify::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:CChatNotify.Channel)
}

// optional string Content = 4;
void CChatNotify::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CChatNotify::content() const {
  // @@protoc_insertion_point(field_get:CChatNotify.Content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CChatNotify::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CChatNotify.Content)
}
void CChatNotify::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CChatNotify.Content)
}
void CChatNotify::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CChatNotify.Content)
}
::std::string* CChatNotify::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:CChatNotify.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CChatNotify::release_content() {
  // @@protoc_insertion_point(field_release:CChatNotify.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CChatNotify::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:CChatNotify.Content)
}

inline const CChatNotify* CChatNotify::internal_default_instance() {
  return &CChatNotify_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBNewsRole::kPlayerIDFieldNumber;
const int PBNewsRole::kPlayerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBNewsRole::PBNewsRole()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chatmodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBNewsRole)
}

void PBNewsRole::InitAsDefaultInstance() {
}

PBNewsRole::PBNewsRole(const PBNewsRole& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBNewsRole)
}

void PBNewsRole::SharedCtor() {
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_ = 0u;
  _cached_size_ = 0;
}

PBNewsRole::~PBNewsRole() {
  // @@protoc_insertion_point(destructor:PBNewsRole)
  SharedDtor();
}

void PBNewsRole::SharedDtor() {
  playername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PBNewsRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBNewsRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBNewsRole_descriptor_;
}

const PBNewsRole& PBNewsRole::default_instance() {
  protobuf_InitDefaults_chatmodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PBNewsRole> PBNewsRole_default_instance_;

PBNewsRole* PBNewsRole::New(::google::protobuf::Arena* arena) const {
  PBNewsRole* n = new PBNewsRole;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBNewsRole::Clear() {
// @@protoc_insertion_point(message_clear_start:PBNewsRole)
  playerid_ = 0u;
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PBNewsRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBNewsRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PlayerID = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PlayerName;
        break;
      }

      // optional string PlayerName = 2;
      case 2: {
        if (tag == 18) {
         parse_PlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBNewsRole.PlayerName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBNewsRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBNewsRole)
  return false;
#undef DO_
}

void PBNewsRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBNewsRole)
  // optional uint32 PlayerID = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // optional string PlayerName = 2;
  if (this->playername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBNewsRole.PlayerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playername(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBNewsRole)
}

::google::protobuf::uint8* PBNewsRole::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PBNewsRole)
  // optional uint32 PlayerID = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // optional string PlayerName = 2;
  if (this->playername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBNewsRole.PlayerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBNewsRole)
  return target;
}

size_t PBNewsRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBNewsRole)
  size_t total_size = 0;

  // optional uint32 PlayerID = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  // optional string PlayerName = 2;
  if (this->playername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playername());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBNewsRole::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBNewsRole)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBNewsRole* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBNewsRole>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBNewsRole)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBNewsRole)
    UnsafeMergeFrom(*source);
  }
}

void PBNewsRole::MergeFrom(const PBNewsRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBNewsRole)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PBNewsRole::UnsafeMergeFrom(const PBNewsRole& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.playername().size() > 0) {

    playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
}

void PBNewsRole::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBNewsRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBNewsRole::CopyFrom(const PBNewsRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBNewsRole)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PBNewsRole::IsInitialized() const {

  return true;
}

void PBNewsRole::Swap(PBNewsRole* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBNewsRole::InternalSwap(PBNewsRole* other) {
  std::swap(playerid_, other->playerid_);
  playername_.Swap(&other->playername_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBNewsRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBNewsRole_descriptor_;
  metadata.reflection = PBNewsRole_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBNewsRole

// optional uint32 PlayerID = 1;
void PBNewsRole::clear_playerid() {
  playerid_ = 0u;
}
::google::protobuf::uint32 PBNewsRole::playerid() const {
  // @@protoc_insertion_point(field_get:PBNewsRole.PlayerID)
  return playerid_;
}
void PBNewsRole::set_playerid(::google::protobuf::uint32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:PBNewsRole.PlayerID)
}

// optional string PlayerName = 2;
void PBNewsRole::clear_playername() {
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PBNewsRole::playername() const {
  // @@protoc_insertion_point(field_get:PBNewsRole.PlayerName)
  return playername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PBNewsRole::set_playername(const ::std::string& value) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBNewsRole.PlayerName)
}
void PBNewsRole::set_playername(const char* value) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBNewsRole.PlayerName)
}
void PBNewsRole::set_playername(const char* value, size_t size) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBNewsRole.PlayerName)
}
::std::string* PBNewsRole::mutable_playername() {
  
  // @@protoc_insertion_point(field_mutable:PBNewsRole.PlayerName)
  return playername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PBNewsRole::release_playername() {
  // @@protoc_insertion_point(field_release:PBNewsRole.PlayerName)
  
  return playername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PBNewsRole::set_allocated_playername(::std::string* playername) {
  if (playername != NULL) {
    
  } else {
    
  }
  playername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playername);
  // @@protoc_insertion_point(field_set_allocated:PBNewsRole.PlayerName)
}

inline const PBNewsRole* PBNewsRole::internal_default_instance() {
  return &PBNewsRole_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBNewsParam::kParamFieldNumber;
const int PBNewsParam::kStrParamFieldNumber;
const int PBNewsParam::kRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBNewsParam::PBNewsParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chatmodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBNewsParam)
}

void PBNewsParam::InitAsDefaultInstance() {
}

PBNewsParam::PBNewsParam(const PBNewsParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBNewsParam)
}

void PBNewsParam::SharedCtor() {
  _cached_size_ = 0;
}

PBNewsParam::~PBNewsParam() {
  // @@protoc_insertion_point(destructor:PBNewsParam)
  SharedDtor();
}

void PBNewsParam::SharedDtor() {
}

void PBNewsParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBNewsParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBNewsParam_descriptor_;
}

const PBNewsParam& PBNewsParam::default_instance() {
  protobuf_InitDefaults_chatmodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PBNewsParam> PBNewsParam_default_instance_;

PBNewsParam* PBNewsParam::New(::google::protobuf::Arena* arena) const {
  PBNewsParam* n = new PBNewsParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBNewsParam::Clear() {
// @@protoc_insertion_point(message_clear_start:PBNewsParam)
  param_.Clear();
  strparam_.Clear();
  role_.Clear();
}

bool PBNewsParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBNewsParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 Param = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_param())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_param())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StrParam;
        break;
      }

      // repeated string StrParam = 2;
      case 2: {
        if (tag == 18) {
         parse_StrParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strparam()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strparam(this->strparam_size() - 1).data(),
            this->strparam(this->strparam_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBNewsParam.StrParam"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StrParam;
        if (input->ExpectTag(26)) goto parse_Role;
        break;
      }

      // repeated .PBNewsRole Role = 3;
      case 3: {
        if (tag == 26) {
         parse_Role:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_role()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_Role;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBNewsParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBNewsParam)
  return false;
#undef DO_
}

void PBNewsParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBNewsParam)
  // repeated uint32 Param = 1;
  if (this->param_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_param_cached_byte_size_);
  }
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->param(i), output);
  }

  // repeated string StrParam = 2;
  for (int i = 0; i < this->strparam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strparam(i).data(), this->strparam(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBNewsParam.StrParam");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strparam(i), output);
  }

  // repeated .PBNewsRole Role = 3;
  for (unsigned int i = 0, n = this->role_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->role(i), output);
  }

  // @@protoc_insertion_point(serialize_end:PBNewsParam)
}

::google::protobuf::uint8* PBNewsParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PBNewsParam)
  // repeated uint32 Param = 1;
  if (this->param_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _param_cached_byte_size_, target);
  }
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->param(i), target);
  }

  // repeated string StrParam = 2;
  for (int i = 0; i < this->strparam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strparam(i).data(), this->strparam(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBNewsParam.StrParam");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->strparam(i), target);
  }

  // repeated .PBNewsRole Role = 3;
  for (unsigned int i = 0, n = this->role_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->role(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBNewsParam)
  return target;
}

size_t PBNewsParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBNewsParam)
  size_t total_size = 0;

  // repeated uint32 Param = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->param_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->param(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _param_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string StrParam = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->strparam_size());
  for (int i = 0; i < this->strparam_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strparam(i));
  }

  // repeated .PBNewsRole Role = 3;
  {
    unsigned int count = this->role_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBNewsParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBNewsParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBNewsParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBNewsParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBNewsParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBNewsParam)
    UnsafeMergeFrom(*source);
  }
}

void PBNewsParam::MergeFrom(const PBNewsParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBNewsParam)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PBNewsParam::UnsafeMergeFrom(const PBNewsParam& from) {
  GOOGLE_DCHECK(&from != this);
  param_.UnsafeMergeFrom(from.param_);
  strparam_.UnsafeMergeFrom(from.strparam_);
  role_.MergeFrom(from.role_);
}

void PBNewsParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBNewsParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBNewsParam::CopyFrom(const PBNewsParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBNewsParam)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PBNewsParam::IsInitialized() const {

  return true;
}

void PBNewsParam::Swap(PBNewsParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBNewsParam::InternalSwap(PBNewsParam* other) {
  param_.UnsafeArenaSwap(&other->param_);
  strparam_.UnsafeArenaSwap(&other->strparam_);
  role_.UnsafeArenaSwap(&other->role_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBNewsParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBNewsParam_descriptor_;
  metadata.reflection = PBNewsParam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBNewsParam

// repeated uint32 Param = 1;
int PBNewsParam::param_size() const {
  return param_.size();
}
void PBNewsParam::clear_param() {
  param_.Clear();
}
::google::protobuf::uint32 PBNewsParam::param(int index) const {
  // @@protoc_insertion_point(field_get:PBNewsParam.Param)
  return param_.Get(index);
}
void PBNewsParam::set_param(int index, ::google::protobuf::uint32 value) {
  param_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBNewsParam.Param)
}
void PBNewsParam::add_param(::google::protobuf::uint32 value) {
  param_.Add(value);
  // @@protoc_insertion_point(field_add:PBNewsParam.Param)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PBNewsParam::param() const {
  // @@protoc_insertion_point(field_list:PBNewsParam.Param)
  return param_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PBNewsParam::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:PBNewsParam.Param)
  return &param_;
}

// repeated string StrParam = 2;
int PBNewsParam::strparam_size() const {
  return strparam_.size();
}
void PBNewsParam::clear_strparam() {
  strparam_.Clear();
}
const ::std::string& PBNewsParam::strparam(int index) const {
  // @@protoc_insertion_point(field_get:PBNewsParam.StrParam)
  return strparam_.Get(index);
}
::std::string* PBNewsParam::mutable_strparam(int index) {
  // @@protoc_insertion_point(field_mutable:PBNewsParam.StrParam)
  return strparam_.Mutable(index);
}
void PBNewsParam::set_strparam(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PBNewsParam.StrParam)
  strparam_.Mutable(index)->assign(value);
}
void PBNewsParam::set_strparam(int index, const char* value) {
  strparam_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PBNewsParam.StrParam)
}
void PBNewsParam::set_strparam(int index, const char* value, size_t size) {
  strparam_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBNewsParam.StrParam)
}
::std::string* PBNewsParam::add_strparam() {
  // @@protoc_insertion_point(field_add_mutable:PBNewsParam.StrParam)
  return strparam_.Add();
}
void PBNewsParam::add_strparam(const ::std::string& value) {
  strparam_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PBNewsParam.StrParam)
}
void PBNewsParam::add_strparam(const char* value) {
  strparam_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PBNewsParam.StrParam)
}
void PBNewsParam::add_strparam(const char* value, size_t size) {
  strparam_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PBNewsParam.StrParam)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PBNewsParam::strparam() const {
  // @@protoc_insertion_point(field_list:PBNewsParam.StrParam)
  return strparam_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PBNewsParam::mutable_strparam() {
  // @@protoc_insertion_point(field_mutable_list:PBNewsParam.StrParam)
  return &strparam_;
}

// repeated .PBNewsRole Role = 3;
int PBNewsParam::role_size() const {
  return role_.size();
}
void PBNewsParam::clear_role() {
  role_.Clear();
}
const ::PBNewsRole& PBNewsParam::role(int index) const {
  // @@protoc_insertion_point(field_get:PBNewsParam.Role)
  return role_.Get(index);
}
::PBNewsRole* PBNewsParam::mutable_role(int index) {
  // @@protoc_insertion_point(field_mutable:PBNewsParam.Role)
  return role_.Mutable(index);
}
::PBNewsRole* PBNewsParam::add_role() {
  // @@protoc_insertion_point(field_add:PBNewsParam.Role)
  return role_.Add();
}
::google::protobuf::RepeatedPtrField< ::PBNewsRole >*
PBNewsParam::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:PBNewsParam.Role)
  return &role_;
}
const ::google::protobuf::RepeatedPtrField< ::PBNewsRole >&
PBNewsParam::role() const {
  // @@protoc_insertion_point(field_list:PBNewsParam.Role)
  return role_;
}

inline const PBNewsParam* PBNewsParam::internal_default_instance() {
  return &PBNewsParam_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CWorldNewsNotify::kTypeFieldNumber;
const int CWorldNewsNotify::kRoleFieldNumber;
const int CWorldNewsNotify::kNewsParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CWorldNewsNotify::CWorldNewsNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chatmodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CWorldNewsNotify)
}

void CWorldNewsNotify::InitAsDefaultInstance() {
  role_ = const_cast< ::PBNewsRole*>(
      ::PBNewsRole::internal_default_instance());
  newsparam_ = const_cast< ::PBNewsParam*>(
      ::PBNewsParam::internal_default_instance());
}

CWorldNewsNotify::CWorldNewsNotify(const CWorldNewsNotify& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CWorldNewsNotify)
}

void CWorldNewsNotify::SharedCtor() {
  role_ = NULL;
  newsparam_ = NULL;
  type_ = 0u;
  _cached_size_ = 0;
}

CWorldNewsNotify::~CWorldNewsNotify() {
  // @@protoc_insertion_point(destructor:CWorldNewsNotify)
  SharedDtor();
}

void CWorldNewsNotify::SharedDtor() {
  if (this != &CWorldNewsNotify_default_instance_.get()) {
    delete role_;
    delete newsparam_;
  }
}

void CWorldNewsNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWorldNewsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWorldNewsNotify_descriptor_;
}

const CWorldNewsNotify& CWorldNewsNotify::default_instance() {
  protobuf_InitDefaults_chatmodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CWorldNewsNotify> CWorldNewsNotify_default_instance_;

CWorldNewsNotify* CWorldNewsNotify::New(::google::protobuf::Arena* arena) const {
  CWorldNewsNotify* n = new CWorldNewsNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CWorldNewsNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorldNewsNotify)
  type_ = 0u;
  if (GetArenaNoVirtual() == NULL && role_ != NULL) delete role_;
  role_ = NULL;
  if (GetArenaNoVirtual() == NULL && newsparam_ != NULL) delete newsparam_;
  newsparam_ = NULL;
}

bool CWorldNewsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CWorldNewsNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Role;
        break;
      }

      // optional .PBNewsRole Role = 2;
      case 2: {
        if (tag == 18) {
         parse_Role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_NewsParam;
        break;
      }

      // optional .PBNewsParam NewsParam = 3;
      case 3: {
        if (tag == 26) {
         parse_NewsParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newsparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CWorldNewsNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CWorldNewsNotify)
  return false;
#undef DO_
}

void CWorldNewsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CWorldNewsNotify)
  // optional uint32 Type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional .PBNewsRole Role = 2;
  if (this->has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->role_, output);
  }

  // optional .PBNewsParam NewsParam = 3;
  if (this->has_newsparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->newsparam_, output);
  }

  // @@protoc_insertion_point(serialize_end:CWorldNewsNotify)
}

::google::protobuf::uint8* CWorldNewsNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CWorldNewsNotify)
  // optional uint32 Type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional .PBNewsRole Role = 2;
  if (this->has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->role_, false, target);
  }

  // optional .PBNewsParam NewsParam = 3;
  if (this->has_newsparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->newsparam_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CWorldNewsNotify)
  return target;
}

size_t CWorldNewsNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorldNewsNotify)
  size_t total_size = 0;

  // optional uint32 Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional .PBNewsRole Role = 2;
  if (this->has_role()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->role_);
  }

  // optional .PBNewsParam NewsParam = 3;
  if (this->has_newsparam()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->newsparam_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWorldNewsNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CWorldNewsNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CWorldNewsNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CWorldNewsNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CWorldNewsNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CWorldNewsNotify)
    UnsafeMergeFrom(*source);
  }
}

void CWorldNewsNotify::MergeFrom(const CWorldNewsNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorldNewsNotify)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CWorldNewsNotify::UnsafeMergeFrom(const CWorldNewsNotify& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_role()) {
    mutable_role()->::PBNewsRole::MergeFrom(from.role());
  }
  if (from.has_newsparam()) {
    mutable_newsparam()->::PBNewsParam::MergeFrom(from.newsparam());
  }
}

void CWorldNewsNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CWorldNewsNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorldNewsNotify::CopyFrom(const CWorldNewsNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorldNewsNotify)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CWorldNewsNotify::IsInitialized() const {

  return true;
}

void CWorldNewsNotify::Swap(CWorldNewsNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CWorldNewsNotify::InternalSwap(CWorldNewsNotify* other) {
  std::swap(type_, other->type_);
  std::swap(role_, other->role_);
  std::swap(newsparam_, other->newsparam_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CWorldNewsNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWorldNewsNotify_descriptor_;
  metadata.reflection = CWorldNewsNotify_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CWorldNewsNotify

// optional uint32 Type = 1;
void CWorldNewsNotify::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 CWorldNewsNotify::type() const {
  // @@protoc_insertion_point(field_get:CWorldNewsNotify.Type)
  return type_;
}
void CWorldNewsNotify::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:CWorldNewsNotify.Type)
}

// optional .PBNewsRole Role = 2;
bool CWorldNewsNotify::has_role() const {
  return this != internal_default_instance() && role_ != NULL;
}
void CWorldNewsNotify::clear_role() {
  if (GetArenaNoVirtual() == NULL && role_ != NULL) delete role_;
  role_ = NULL;
}
const ::PBNewsRole& CWorldNewsNotify::role() const {
  // @@protoc_insertion_point(field_get:CWorldNewsNotify.Role)
  return role_ != NULL ? *role_
                         : *::PBNewsRole::internal_default_instance();
}
::PBNewsRole* CWorldNewsNotify::mutable_role() {
  
  if (role_ == NULL) {
    role_ = new ::PBNewsRole;
  }
  // @@protoc_insertion_point(field_mutable:CWorldNewsNotify.Role)
  return role_;
}
::PBNewsRole* CWorldNewsNotify::release_role() {
  // @@protoc_insertion_point(field_release:CWorldNewsNotify.Role)
  
  ::PBNewsRole* temp = role_;
  role_ = NULL;
  return temp;
}
void CWorldNewsNotify::set_allocated_role(::PBNewsRole* role) {
  delete role_;
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CWorldNewsNotify.Role)
}

// optional .PBNewsParam NewsParam = 3;
bool CWorldNewsNotify::has_newsparam() const {
  return this != internal_default_instance() && newsparam_ != NULL;
}
void CWorldNewsNotify::clear_newsparam() {
  if (GetArenaNoVirtual() == NULL && newsparam_ != NULL) delete newsparam_;
  newsparam_ = NULL;
}
const ::PBNewsParam& CWorldNewsNotify::newsparam() const {
  // @@protoc_insertion_point(field_get:CWorldNewsNotify.NewsParam)
  return newsparam_ != NULL ? *newsparam_
                         : *::PBNewsParam::internal_default_instance();
}
::PBNewsParam* CWorldNewsNotify::mutable_newsparam() {
  
  if (newsparam_ == NULL) {
    newsparam_ = new ::PBNewsParam;
  }
  // @@protoc_insertion_point(field_mutable:CWorldNewsNotify.NewsParam)
  return newsparam_;
}
::PBNewsParam* CWorldNewsNotify::release_newsparam() {
  // @@protoc_insertion_point(field_release:CWorldNewsNotify.NewsParam)
  
  ::PBNewsParam* temp = newsparam_;
  newsparam_ = NULL;
  return temp;
}
void CWorldNewsNotify::set_allocated_newsparam(::PBNewsParam* newsparam) {
  delete newsparam_;
  newsparam_ = newsparam;
  if (newsparam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CWorldNewsNotify.NewsParam)
}

inline const CWorldNewsNotify* CWorldNewsNotify::internal_default_instance() {
  return &CWorldNewsNotify_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
