// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loginmessage.hxx

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "loginmessage.hxx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCreateRoleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCreateRoleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCreateRoleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCreateRoleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CEnterSceneRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CEnterSceneRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CEnterSceneResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CEnterSceneResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LOGIN_MODULE_MSG_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_loginmessage_2ehxx() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_loginmessage_2ehxx() {
  protobuf_AddDesc_loginmessage_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "loginmessage.hxx");
  GOOGLE_CHECK(file != NULL);
  CLoginRequest_descriptor_ = file->message_type(0);
  static const int CLoginRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLoginRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLoginRequest, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLoginRequest, serverid_),
  };
  CLoginRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CLoginRequest_descriptor_,
      CLoginRequest::internal_default_instance(),
      CLoginRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CLoginRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLoginRequest, _internal_metadata_));
  CLoginResponse_descriptor_ = file->message_type(1);
  static const int CLoginResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLoginResponse, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLoginResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLoginResponse, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLoginResponse, serverid_),
  };
  CLoginResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CLoginResponse_descriptor_,
      CLoginResponse::internal_default_instance(),
      CLoginResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CLoginResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLoginResponse, _internal_metadata_));
  CCreateRoleRequest_descriptor_ = file->message_type(2);
  static const int CCreateRoleRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCreateRoleRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCreateRoleRequest, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCreateRoleRequest, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCreateRoleRequest, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCreateRoleRequest, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCreateRoleRequest, metier_),
  };
  CCreateRoleRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CCreateRoleRequest_descriptor_,
      CCreateRoleRequest::internal_default_instance(),
      CCreateRoleRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CCreateRoleRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCreateRoleRequest, _internal_metadata_));
  CCreateRoleResponse_descriptor_ = file->message_type(3);
  static const int CCreateRoleResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCreateRoleResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCreateRoleResponse, roleid_),
  };
  CCreateRoleResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CCreateRoleResponse_descriptor_,
      CCreateRoleResponse::internal_default_instance(),
      CCreateRoleResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CCreateRoleResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCreateRoleResponse, _internal_metadata_));
  CEnterSceneRequest_descriptor_ = file->message_type(4);
  static const int CEnterSceneRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEnterSceneRequest, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEnterSceneRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEnterSceneRequest, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEnterSceneRequest, serverid_),
  };
  CEnterSceneRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CEnterSceneRequest_descriptor_,
      CEnterSceneRequest::internal_default_instance(),
      CEnterSceneRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CEnterSceneRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEnterSceneRequest, _internal_metadata_));
  CEnterSceneResponse_descriptor_ = file->message_type(5);
  static const int CEnterSceneResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEnterSceneResponse, result_),
  };
  CEnterSceneResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CEnterSceneResponse_descriptor_,
      CEnterSceneResponse::internal_default_instance(),
      CEnterSceneResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CEnterSceneResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CEnterSceneResponse, _internal_metadata_));
  LOGIN_MODULE_MSG_ID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_loginmessage_2ehxx);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CLoginRequest_descriptor_, CLoginRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CLoginResponse_descriptor_, CLoginResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CCreateRoleRequest_descriptor_, CCreateRoleRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CCreateRoleResponse_descriptor_, CCreateRoleResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CEnterSceneRequest_descriptor_, CEnterSceneRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CEnterSceneResponse_descriptor_, CEnterSceneResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_loginmessage_2ehxx() {
  CLoginRequest_default_instance_.Shutdown();
  delete CLoginRequest_reflection_;
  CLoginResponse_default_instance_.Shutdown();
  delete CLoginResponse_reflection_;
  CCreateRoleRequest_default_instance_.Shutdown();
  delete CCreateRoleRequest_reflection_;
  CCreateRoleResponse_default_instance_.Shutdown();
  delete CCreateRoleResponse_reflection_;
  CEnterSceneRequest_default_instance_.Shutdown();
  delete CEnterSceneRequest_reflection_;
  CEnterSceneResponse_default_instance_.Shutdown();
  delete CEnterSceneResponse_reflection_;
}

void protobuf_InitDefaults_loginmessage_2ehxx_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  CLoginRequest_default_instance_.DefaultConstruct();
  CLoginResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CCreateRoleRequest_default_instance_.DefaultConstruct();
  CCreateRoleResponse_default_instance_.DefaultConstruct();
  CEnterSceneRequest_default_instance_.DefaultConstruct();
  CEnterSceneResponse_default_instance_.DefaultConstruct();
  CLoginRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CLoginResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CCreateRoleRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CCreateRoleResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CEnterSceneRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CEnterSceneResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_loginmessage_2ehxx_once_);
void protobuf_InitDefaults_loginmessage_2ehxx() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_loginmessage_2ehxx_once_,
                 &protobuf_InitDefaults_loginmessage_2ehxx_impl);
}
void protobuf_AddDesc_loginmessage_2ehxx_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_loginmessage_2ehxx();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020loginmessage.hxx\"B\n\rCLoginRequest\022\014\n\004N"
    "ame\030\001 \001(\t\022\021\n\tChannelID\030\002 \001(\r\022\020\n\010ServerID"
    "\030\003 \001(\r\"X\n\016CLoginResponse\022\021\n\tAccountID\030\001 "
    "\001(\r\022\016\n\006RoleID\030\002 \001(\r\022\021\n\tChannelID\030\003 \001(\r\022\020"
    "\n\010ServerID\030\004 \001(\r\"{\n\022CCreateRoleRequest\022\021"
    "\n\tAccountID\030\001 \001(\r\022\021\n\tChannelID\030\002 \001(\r\022\020\n\010"
    "ServerID\030\003 \001(\r\022\020\n\010RoleName\030\004 \001(\t\022\013\n\003Sex\030"
    "\005 \001(\r\022\016\n\006Metier\030\006 \001(\r\"5\n\023CCreateRoleResp"
    "onse\022\016\n\006Result\030\001 \001(\r\022\016\n\006RoleID\030\002 \001(\r\"\\\n\022"
    "CEnterSceneRequest\022\016\n\006RoleID\030\001 \001(\r\022\021\n\tAc"
    "countID\030\002 \001(\r\022\021\n\tChannelID\030\003 \001(\r\022\020\n\010Serv"
    "erID\030\004 \001(\r\"%\n\023CEnterSceneResponse\022\016\n\006Res"
    "ult\030\001 \001(\r*\347\001\n\023LOGIN_MODULE_MSG_ID\022\031\n\025ID_"
    "LOGIN_MODULE_ERROR\020\000\022\030\n\024ID_C2S_REQUEST_L"
    "OGIN\020\001\022\031\n\025ID_S2C_RESPONSE_LOGIN\020\002\022\036\n\032ID_"
    "C2S_REQUEST_CREATE_ROLE\020\003\022\037\n\033ID_S2C_RESP"
    "ONSE_CREATE_ROLE\020\004\022\036\n\032ID_C2S_REQUEST_ENT"
    "ER_SCENE\020\005\022\037\n\033ID_S2C_RESPONSE_ENTER_SCEN"
    "E\020\006b\006proto3", 731);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "loginmessage.hxx", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_loginmessage_2ehxx);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_loginmessage_2ehxx_once_);
void protobuf_AddDesc_loginmessage_2ehxx() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_loginmessage_2ehxx_once_,
                 &protobuf_AddDesc_loginmessage_2ehxx_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_loginmessage_2ehxx {
  StaticDescriptorInitializer_loginmessage_2ehxx() {
    protobuf_AddDesc_loginmessage_2ehxx();
  }
} static_descriptor_initializer_loginmessage_2ehxx_;
const ::google::protobuf::EnumDescriptor* LOGIN_MODULE_MSG_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOGIN_MODULE_MSG_ID_descriptor_;
}
bool LOGIN_MODULE_MSG_ID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CLoginRequest::kNameFieldNumber;
const int CLoginRequest::kChannelIDFieldNumber;
const int CLoginRequest::kServerIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CLoginRequest::CLoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_loginmessage_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLoginRequest)
}

void CLoginRequest::InitAsDefaultInstance() {
}

CLoginRequest::CLoginRequest(const CLoginRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CLoginRequest)
}

void CLoginRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channelid_, 0, reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&channelid_) + sizeof(serverid_));
  _cached_size_ = 0;
}

CLoginRequest::~CLoginRequest() {
  // @@protoc_insertion_point(destructor:CLoginRequest)
  SharedDtor();
}

void CLoginRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLoginRequest_descriptor_;
}

const CLoginRequest& CLoginRequest::default_instance() {
  protobuf_InitDefaults_loginmessage_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CLoginRequest> CLoginRequest_default_instance_;

CLoginRequest* CLoginRequest::New(::google::protobuf::Arena* arena) const {
  CLoginRequest* n = new CLoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CLoginRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CLoginRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CLoginRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(channelid_, serverid_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CLoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CLoginRequest.Name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChannelID;
        break;
      }

      // optional uint32 ChannelID = 2;
      case 2: {
        if (tag == 16) {
         parse_ChannelID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ServerID;
        break;
      }

      // optional uint32 ServerID = 3;
      case 3: {
        if (tag == 24) {
         parse_ServerID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CLoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CLoginRequest)
  return false;
#undef DO_
}

void CLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CLoginRequest)
  // optional string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CLoginRequest.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 ChannelID = 2;
  if (this->channelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channelid(), output);
  }

  // optional uint32 ServerID = 3;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  // @@protoc_insertion_point(serialize_end:CLoginRequest)
}

::google::protobuf::uint8* CLoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CLoginRequest)
  // optional string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CLoginRequest.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 ChannelID = 2;
  if (this->channelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channelid(), target);
  }

  // optional uint32 ServerID = 3;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CLoginRequest)
  return target;
}

size_t CLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLoginRequest)
  size_t total_size = 0;

  // optional string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 ChannelID = 2;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channelid());
  }

  // optional uint32 ServerID = 3;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CLoginRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CLoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CLoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CLoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CLoginRequest)
    UnsafeMergeFrom(*source);
  }
}

void CLoginRequest::MergeFrom(const CLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLoginRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CLoginRequest::UnsafeMergeFrom(const CLoginRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.channelid() != 0) {
    set_channelid(from.channelid());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
}

void CLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLoginRequest::CopyFrom(const CLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLoginRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CLoginRequest::IsInitialized() const {

  return true;
}

void CLoginRequest::Swap(CLoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLoginRequest::InternalSwap(CLoginRequest* other) {
  name_.Swap(&other->name_);
  std::swap(channelid_, other->channelid_);
  std::swap(serverid_, other->serverid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLoginRequest_descriptor_;
  metadata.reflection = CLoginRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CLoginRequest

// optional string Name = 1;
void CLoginRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CLoginRequest::name() const {
  // @@protoc_insertion_point(field_get:CLoginRequest.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CLoginRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CLoginRequest.Name)
}
void CLoginRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CLoginRequest.Name)
}
void CLoginRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CLoginRequest.Name)
}
::std::string* CLoginRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CLoginRequest.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CLoginRequest::release_name() {
  // @@protoc_insertion_point(field_release:CLoginRequest.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CLoginRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CLoginRequest.Name)
}

// optional uint32 ChannelID = 2;
void CLoginRequest::clear_channelid() {
  channelid_ = 0u;
}
::google::protobuf::uint32 CLoginRequest::channelid() const {
  // @@protoc_insertion_point(field_get:CLoginRequest.ChannelID)
  return channelid_;
}
void CLoginRequest::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:CLoginRequest.ChannelID)
}

// optional uint32 ServerID = 3;
void CLoginRequest::clear_serverid() {
  serverid_ = 0u;
}
::google::protobuf::uint32 CLoginRequest::serverid() const {
  // @@protoc_insertion_point(field_get:CLoginRequest.ServerID)
  return serverid_;
}
void CLoginRequest::set_serverid(::google::protobuf::uint32 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:CLoginRequest.ServerID)
}

inline const CLoginRequest* CLoginRequest::internal_default_instance() {
  return &CLoginRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CLoginResponse::kAccountIDFieldNumber;
const int CLoginResponse::kRoleIDFieldNumber;
const int CLoginResponse::kChannelIDFieldNumber;
const int CLoginResponse::kServerIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CLoginResponse::CLoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_loginmessage_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLoginResponse)
}

void CLoginResponse::InitAsDefaultInstance() {
}

CLoginResponse::CLoginResponse(const CLoginResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CLoginResponse)
}

void CLoginResponse::SharedCtor() {
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(serverid_));
  _cached_size_ = 0;
}

CLoginResponse::~CLoginResponse() {
  // @@protoc_insertion_point(destructor:CLoginResponse)
  SharedDtor();
}

void CLoginResponse::SharedDtor() {
}

void CLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLoginResponse_descriptor_;
}

const CLoginResponse& CLoginResponse::default_instance() {
  protobuf_InitDefaults_loginmessage_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CLoginResponse> CLoginResponse_default_instance_;

CLoginResponse* CLoginResponse::New(::google::protobuf::Arena* arena) const {
  CLoginResponse* n = new CLoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CLoginResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CLoginResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CLoginResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(accountid_, serverid_);

#undef ZR_HELPER_
#undef ZR_

}

bool CLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CLoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }

      // optional uint32 RoleID = 2;
      case 2: {
        if (tag == 16) {
         parse_RoleID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ChannelID;
        break;
      }

      // optional uint32 ChannelID = 3;
      case 3: {
        if (tag == 24) {
         parse_ChannelID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ServerID;
        break;
      }

      // optional uint32 ServerID = 4;
      case 4: {
        if (tag == 32) {
         parse_ServerID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CLoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CLoginResponse)
  return false;
#undef DO_
}

void CLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CLoginResponse)
  // optional uint32 AccountID = 1;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 RoleID = 2;
  if (this->roleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roleid(), output);
  }

  // optional uint32 ChannelID = 3;
  if (this->channelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channelid(), output);
  }

  // optional uint32 ServerID = 4;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serverid(), output);
  }

  // @@protoc_insertion_point(serialize_end:CLoginResponse)
}

::google::protobuf::uint8* CLoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CLoginResponse)
  // optional uint32 AccountID = 1;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 RoleID = 2;
  if (this->roleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roleid(), target);
  }

  // optional uint32 ChannelID = 3;
  if (this->channelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channelid(), target);
  }

  // optional uint32 ServerID = 4;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serverid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CLoginResponse)
  return target;
}

size_t CLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLoginResponse)
  size_t total_size = 0;

  // optional uint32 AccountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  // optional uint32 RoleID = 2;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roleid());
  }

  // optional uint32 ChannelID = 3;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channelid());
  }

  // optional uint32 ServerID = 4;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CLoginResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CLoginResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CLoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CLoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CLoginResponse)
    UnsafeMergeFrom(*source);
  }
}

void CLoginResponse::MergeFrom(const CLoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLoginResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CLoginResponse::UnsafeMergeFrom(const CLoginResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.roleid() != 0) {
    set_roleid(from.roleid());
  }
  if (from.channelid() != 0) {
    set_channelid(from.channelid());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
}

void CLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLoginResponse::CopyFrom(const CLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLoginResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CLoginResponse::IsInitialized() const {

  return true;
}

void CLoginResponse::Swap(CLoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLoginResponse::InternalSwap(CLoginResponse* other) {
  std::swap(accountid_, other->accountid_);
  std::swap(roleid_, other->roleid_);
  std::swap(channelid_, other->channelid_);
  std::swap(serverid_, other->serverid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CLoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLoginResponse_descriptor_;
  metadata.reflection = CLoginResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CLoginResponse

// optional uint32 AccountID = 1;
void CLoginResponse::clear_accountid() {
  accountid_ = 0u;
}
::google::protobuf::uint32 CLoginResponse::accountid() const {
  // @@protoc_insertion_point(field_get:CLoginResponse.AccountID)
  return accountid_;
}
void CLoginResponse::set_accountid(::google::protobuf::uint32 value) {
  
  accountid_ = value;
  // @@protoc_insertion_point(field_set:CLoginResponse.AccountID)
}

// optional uint32 RoleID = 2;
void CLoginResponse::clear_roleid() {
  roleid_ = 0u;
}
::google::protobuf::uint32 CLoginResponse::roleid() const {
  // @@protoc_insertion_point(field_get:CLoginResponse.RoleID)
  return roleid_;
}
void CLoginResponse::set_roleid(::google::protobuf::uint32 value) {
  
  roleid_ = value;
  // @@protoc_insertion_point(field_set:CLoginResponse.RoleID)
}

// optional uint32 ChannelID = 3;
void CLoginResponse::clear_channelid() {
  channelid_ = 0u;
}
::google::protobuf::uint32 CLoginResponse::channelid() const {
  // @@protoc_insertion_point(field_get:CLoginResponse.ChannelID)
  return channelid_;
}
void CLoginResponse::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:CLoginResponse.ChannelID)
}

// optional uint32 ServerID = 4;
void CLoginResponse::clear_serverid() {
  serverid_ = 0u;
}
::google::protobuf::uint32 CLoginResponse::serverid() const {
  // @@protoc_insertion_point(field_get:CLoginResponse.ServerID)
  return serverid_;
}
void CLoginResponse::set_serverid(::google::protobuf::uint32 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:CLoginResponse.ServerID)
}

inline const CLoginResponse* CLoginResponse::internal_default_instance() {
  return &CLoginResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCreateRoleRequest::kAccountIDFieldNumber;
const int CCreateRoleRequest::kChannelIDFieldNumber;
const int CCreateRoleRequest::kServerIDFieldNumber;
const int CCreateRoleRequest::kRoleNameFieldNumber;
const int CCreateRoleRequest::kSexFieldNumber;
const int CCreateRoleRequest::kMetierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCreateRoleRequest::CCreateRoleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_loginmessage_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCreateRoleRequest)
}

void CCreateRoleRequest::InitAsDefaultInstance() {
}

CCreateRoleRequest::CCreateRoleRequest(const CCreateRoleRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCreateRoleRequest)
}

void CCreateRoleRequest::SharedCtor() {
  rolename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&metier_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(metier_));
  _cached_size_ = 0;
}

CCreateRoleRequest::~CCreateRoleRequest() {
  // @@protoc_insertion_point(destructor:CCreateRoleRequest)
  SharedDtor();
}

void CCreateRoleRequest::SharedDtor() {
  rolename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCreateRoleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCreateRoleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCreateRoleRequest_descriptor_;
}

const CCreateRoleRequest& CCreateRoleRequest::default_instance() {
  protobuf_InitDefaults_loginmessage_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CCreateRoleRequest> CCreateRoleRequest_default_instance_;

CCreateRoleRequest* CCreateRoleRequest::New(::google::protobuf::Arena* arena) const {
  CCreateRoleRequest* n = new CCreateRoleRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCreateRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CCreateRoleRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CCreateRoleRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CCreateRoleRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(accountid_, metier_);
  rolename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CCreateRoleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCreateRoleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChannelID;
        break;
      }

      // optional uint32 ChannelID = 2;
      case 2: {
        if (tag == 16) {
         parse_ChannelID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ServerID;
        break;
      }

      // optional uint32 ServerID = 3;
      case 3: {
        if (tag == 24) {
         parse_ServerID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RoleName;
        break;
      }

      // optional string RoleName = 4;
      case 4: {
        if (tag == 34) {
         parse_RoleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CCreateRoleRequest.RoleName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Sex;
        break;
      }

      // optional uint32 Sex = 5;
      case 5: {
        if (tag == 40) {
         parse_Sex:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Metier;
        break;
      }

      // optional uint32 Metier = 6;
      case 6: {
        if (tag == 48) {
         parse_Metier:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &metier_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCreateRoleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCreateRoleRequest)
  return false;
#undef DO_
}

void CCreateRoleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCreateRoleRequest)
  // optional uint32 AccountID = 1;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 ChannelID = 2;
  if (this->channelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channelid(), output);
  }

  // optional uint32 ServerID = 3;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  // optional string RoleName = 4;
  if (this->rolename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CCreateRoleRequest.RoleName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rolename(), output);
  }

  // optional uint32 Sex = 5;
  if (this->sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 Metier = 6;
  if (this->metier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->metier(), output);
  }

  // @@protoc_insertion_point(serialize_end:CCreateRoleRequest)
}

::google::protobuf::uint8* CCreateRoleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCreateRoleRequest)
  // optional uint32 AccountID = 1;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 ChannelID = 2;
  if (this->channelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channelid(), target);
  }

  // optional uint32 ServerID = 3;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  // optional string RoleName = 4;
  if (this->rolename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CCreateRoleRequest.RoleName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rolename(), target);
  }

  // optional uint32 Sex = 5;
  if (this->sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 Metier = 6;
  if (this->metier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->metier(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CCreateRoleRequest)
  return target;
}

size_t CCreateRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCreateRoleRequest)
  size_t total_size = 0;

  // optional uint32 AccountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  // optional uint32 ChannelID = 2;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channelid());
  }

  // optional uint32 ServerID = 3;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serverid());
  }

  // optional string RoleName = 4;
  if (this->rolename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rolename());
  }

  // optional uint32 Sex = 5;
  if (this->sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sex());
  }

  // optional uint32 Metier = 6;
  if (this->metier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->metier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCreateRoleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCreateRoleRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CCreateRoleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCreateRoleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCreateRoleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCreateRoleRequest)
    UnsafeMergeFrom(*source);
  }
}

void CCreateRoleRequest::MergeFrom(const CCreateRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCreateRoleRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CCreateRoleRequest::UnsafeMergeFrom(const CCreateRoleRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.channelid() != 0) {
    set_channelid(from.channelid());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
  if (from.rolename().size() > 0) {

    rolename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rolename_);
  }
  if (from.sex() != 0) {
    set_sex(from.sex());
  }
  if (from.metier() != 0) {
    set_metier(from.metier());
  }
}

void CCreateRoleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCreateRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCreateRoleRequest::CopyFrom(const CCreateRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCreateRoleRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CCreateRoleRequest::IsInitialized() const {

  return true;
}

void CCreateRoleRequest::Swap(CCreateRoleRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCreateRoleRequest::InternalSwap(CCreateRoleRequest* other) {
  std::swap(accountid_, other->accountid_);
  std::swap(channelid_, other->channelid_);
  std::swap(serverid_, other->serverid_);
  rolename_.Swap(&other->rolename_);
  std::swap(sex_, other->sex_);
  std::swap(metier_, other->metier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCreateRoleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCreateRoleRequest_descriptor_;
  metadata.reflection = CCreateRoleRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCreateRoleRequest

// optional uint32 AccountID = 1;
void CCreateRoleRequest::clear_accountid() {
  accountid_ = 0u;
}
::google::protobuf::uint32 CCreateRoleRequest::accountid() const {
  // @@protoc_insertion_point(field_get:CCreateRoleRequest.AccountID)
  return accountid_;
}
void CCreateRoleRequest::set_accountid(::google::protobuf::uint32 value) {
  
  accountid_ = value;
  // @@protoc_insertion_point(field_set:CCreateRoleRequest.AccountID)
}

// optional uint32 ChannelID = 2;
void CCreateRoleRequest::clear_channelid() {
  channelid_ = 0u;
}
::google::protobuf::uint32 CCreateRoleRequest::channelid() const {
  // @@protoc_insertion_point(field_get:CCreateRoleRequest.ChannelID)
  return channelid_;
}
void CCreateRoleRequest::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:CCreateRoleRequest.ChannelID)
}

// optional uint32 ServerID = 3;
void CCreateRoleRequest::clear_serverid() {
  serverid_ = 0u;
}
::google::protobuf::uint32 CCreateRoleRequest::serverid() const {
  // @@protoc_insertion_point(field_get:CCreateRoleRequest.ServerID)
  return serverid_;
}
void CCreateRoleRequest::set_serverid(::google::protobuf::uint32 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:CCreateRoleRequest.ServerID)
}

// optional string RoleName = 4;
void CCreateRoleRequest::clear_rolename() {
  rolename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CCreateRoleRequest::rolename() const {
  // @@protoc_insertion_point(field_get:CCreateRoleRequest.RoleName)
  return rolename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCreateRoleRequest::set_rolename(const ::std::string& value) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CCreateRoleRequest.RoleName)
}
void CCreateRoleRequest::set_rolename(const char* value) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CCreateRoleRequest.RoleName)
}
void CCreateRoleRequest::set_rolename(const char* value, size_t size) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CCreateRoleRequest.RoleName)
}
::std::string* CCreateRoleRequest::mutable_rolename() {
  
  // @@protoc_insertion_point(field_mutable:CCreateRoleRequest.RoleName)
  return rolename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCreateRoleRequest::release_rolename() {
  // @@protoc_insertion_point(field_release:CCreateRoleRequest.RoleName)
  
  return rolename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCreateRoleRequest::set_allocated_rolename(::std::string* rolename) {
  if (rolename != NULL) {
    
  } else {
    
  }
  rolename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rolename);
  // @@protoc_insertion_point(field_set_allocated:CCreateRoleRequest.RoleName)
}

// optional uint32 Sex = 5;
void CCreateRoleRequest::clear_sex() {
  sex_ = 0u;
}
::google::protobuf::uint32 CCreateRoleRequest::sex() const {
  // @@protoc_insertion_point(field_get:CCreateRoleRequest.Sex)
  return sex_;
}
void CCreateRoleRequest::set_sex(::google::protobuf::uint32 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:CCreateRoleRequest.Sex)
}

// optional uint32 Metier = 6;
void CCreateRoleRequest::clear_metier() {
  metier_ = 0u;
}
::google::protobuf::uint32 CCreateRoleRequest::metier() const {
  // @@protoc_insertion_point(field_get:CCreateRoleRequest.Metier)
  return metier_;
}
void CCreateRoleRequest::set_metier(::google::protobuf::uint32 value) {
  
  metier_ = value;
  // @@protoc_insertion_point(field_set:CCreateRoleRequest.Metier)
}

inline const CCreateRoleRequest* CCreateRoleRequest::internal_default_instance() {
  return &CCreateRoleRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCreateRoleResponse::kResultFieldNumber;
const int CCreateRoleResponse::kRoleIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCreateRoleResponse::CCreateRoleResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_loginmessage_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCreateRoleResponse)
}

void CCreateRoleResponse::InitAsDefaultInstance() {
}

CCreateRoleResponse::CCreateRoleResponse(const CCreateRoleResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CCreateRoleResponse)
}

void CCreateRoleResponse::SharedCtor() {
  ::memset(&result_, 0, reinterpret_cast<char*>(&roleid_) -
    reinterpret_cast<char*>(&result_) + sizeof(roleid_));
  _cached_size_ = 0;
}

CCreateRoleResponse::~CCreateRoleResponse() {
  // @@protoc_insertion_point(destructor:CCreateRoleResponse)
  SharedDtor();
}

void CCreateRoleResponse::SharedDtor() {
}

void CCreateRoleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCreateRoleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCreateRoleResponse_descriptor_;
}

const CCreateRoleResponse& CCreateRoleResponse::default_instance() {
  protobuf_InitDefaults_loginmessage_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CCreateRoleResponse> CCreateRoleResponse_default_instance_;

CCreateRoleResponse* CCreateRoleResponse::New(::google::protobuf::Arena* arena) const {
  CCreateRoleResponse* n = new CCreateRoleResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCreateRoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CCreateRoleResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CCreateRoleResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CCreateRoleResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_, roleid_);

#undef ZR_HELPER_
#undef ZR_

}

bool CCreateRoleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCreateRoleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }

      // optional uint32 RoleID = 2;
      case 2: {
        if (tag == 16) {
         parse_RoleID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCreateRoleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCreateRoleResponse)
  return false;
#undef DO_
}

void CCreateRoleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCreateRoleResponse)
  // optional uint32 Result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 RoleID = 2;
  if (this->roleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roleid(), output);
  }

  // @@protoc_insertion_point(serialize_end:CCreateRoleResponse)
}

::google::protobuf::uint8* CCreateRoleResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCreateRoleResponse)
  // optional uint32 Result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 RoleID = 2;
  if (this->roleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roleid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CCreateRoleResponse)
  return target;
}

size_t CCreateRoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCreateRoleResponse)
  size_t total_size = 0;

  // optional uint32 Result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  // optional uint32 RoleID = 2;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roleid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCreateRoleResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCreateRoleResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CCreateRoleResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCreateRoleResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCreateRoleResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCreateRoleResponse)
    UnsafeMergeFrom(*source);
  }
}

void CCreateRoleResponse::MergeFrom(const CCreateRoleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCreateRoleResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CCreateRoleResponse::UnsafeMergeFrom(const CCreateRoleResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.roleid() != 0) {
    set_roleid(from.roleid());
  }
}

void CCreateRoleResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCreateRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCreateRoleResponse::CopyFrom(const CCreateRoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCreateRoleResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CCreateRoleResponse::IsInitialized() const {

  return true;
}

void CCreateRoleResponse::Swap(CCreateRoleResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCreateRoleResponse::InternalSwap(CCreateRoleResponse* other) {
  std::swap(result_, other->result_);
  std::swap(roleid_, other->roleid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCreateRoleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCreateRoleResponse_descriptor_;
  metadata.reflection = CCreateRoleResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCreateRoleResponse

// optional uint32 Result = 1;
void CCreateRoleResponse::clear_result() {
  result_ = 0u;
}
::google::protobuf::uint32 CCreateRoleResponse::result() const {
  // @@protoc_insertion_point(field_get:CCreateRoleResponse.Result)
  return result_;
}
void CCreateRoleResponse::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:CCreateRoleResponse.Result)
}

// optional uint32 RoleID = 2;
void CCreateRoleResponse::clear_roleid() {
  roleid_ = 0u;
}
::google::protobuf::uint32 CCreateRoleResponse::roleid() const {
  // @@protoc_insertion_point(field_get:CCreateRoleResponse.RoleID)
  return roleid_;
}
void CCreateRoleResponse::set_roleid(::google::protobuf::uint32 value) {
  
  roleid_ = value;
  // @@protoc_insertion_point(field_set:CCreateRoleResponse.RoleID)
}

inline const CCreateRoleResponse* CCreateRoleResponse::internal_default_instance() {
  return &CCreateRoleResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEnterSceneRequest::kRoleIDFieldNumber;
const int CEnterSceneRequest::kAccountIDFieldNumber;
const int CEnterSceneRequest::kChannelIDFieldNumber;
const int CEnterSceneRequest::kServerIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEnterSceneRequest::CEnterSceneRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_loginmessage_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CEnterSceneRequest)
}

void CEnterSceneRequest::InitAsDefaultInstance() {
}

CEnterSceneRequest::CEnterSceneRequest(const CEnterSceneRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CEnterSceneRequest)
}

void CEnterSceneRequest::SharedCtor() {
  ::memset(&roleid_, 0, reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&roleid_) + sizeof(serverid_));
  _cached_size_ = 0;
}

CEnterSceneRequest::~CEnterSceneRequest() {
  // @@protoc_insertion_point(destructor:CEnterSceneRequest)
  SharedDtor();
}

void CEnterSceneRequest::SharedDtor() {
}

void CEnterSceneRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEnterSceneRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CEnterSceneRequest_descriptor_;
}

const CEnterSceneRequest& CEnterSceneRequest::default_instance() {
  protobuf_InitDefaults_loginmessage_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CEnterSceneRequest> CEnterSceneRequest_default_instance_;

CEnterSceneRequest* CEnterSceneRequest::New(::google::protobuf::Arena* arena) const {
  CEnterSceneRequest* n = new CEnterSceneRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CEnterSceneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CEnterSceneRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CEnterSceneRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CEnterSceneRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(roleid_, serverid_);

#undef ZR_HELPER_
#undef ZR_

}

bool CEnterSceneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CEnterSceneRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AccountID;
        break;
      }

      // optional uint32 AccountID = 2;
      case 2: {
        if (tag == 16) {
         parse_AccountID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ChannelID;
        break;
      }

      // optional uint32 ChannelID = 3;
      case 3: {
        if (tag == 24) {
         parse_ChannelID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ServerID;
        break;
      }

      // optional uint32 ServerID = 4;
      case 4: {
        if (tag == 32) {
         parse_ServerID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CEnterSceneRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CEnterSceneRequest)
  return false;
#undef DO_
}

void CEnterSceneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CEnterSceneRequest)
  // optional uint32 RoleID = 1;
  if (this->roleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }

  // optional uint32 AccountID = 2;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // optional uint32 ChannelID = 3;
  if (this->channelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channelid(), output);
  }

  // optional uint32 ServerID = 4;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serverid(), output);
  }

  // @@protoc_insertion_point(serialize_end:CEnterSceneRequest)
}

::google::protobuf::uint8* CEnterSceneRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CEnterSceneRequest)
  // optional uint32 RoleID = 1;
  if (this->roleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }

  // optional uint32 AccountID = 2;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // optional uint32 ChannelID = 3;
  if (this->channelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channelid(), target);
  }

  // optional uint32 ServerID = 4;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serverid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CEnterSceneRequest)
  return target;
}

size_t CEnterSceneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEnterSceneRequest)
  size_t total_size = 0;

  // optional uint32 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roleid());
  }

  // optional uint32 AccountID = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  // optional uint32 ChannelID = 3;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channelid());
  }

  // optional uint32 ServerID = 4;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEnterSceneRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEnterSceneRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CEnterSceneRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CEnterSceneRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEnterSceneRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEnterSceneRequest)
    UnsafeMergeFrom(*source);
  }
}

void CEnterSceneRequest::MergeFrom(const CEnterSceneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEnterSceneRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CEnterSceneRequest::UnsafeMergeFrom(const CEnterSceneRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.roleid() != 0) {
    set_roleid(from.roleid());
  }
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.channelid() != 0) {
    set_channelid(from.channelid());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
}

void CEnterSceneRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEnterSceneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEnterSceneRequest::CopyFrom(const CEnterSceneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEnterSceneRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CEnterSceneRequest::IsInitialized() const {

  return true;
}

void CEnterSceneRequest::Swap(CEnterSceneRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEnterSceneRequest::InternalSwap(CEnterSceneRequest* other) {
  std::swap(roleid_, other->roleid_);
  std::swap(accountid_, other->accountid_);
  std::swap(channelid_, other->channelid_);
  std::swap(serverid_, other->serverid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CEnterSceneRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CEnterSceneRequest_descriptor_;
  metadata.reflection = CEnterSceneRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CEnterSceneRequest

// optional uint32 RoleID = 1;
void CEnterSceneRequest::clear_roleid() {
  roleid_ = 0u;
}
::google::protobuf::uint32 CEnterSceneRequest::roleid() const {
  // @@protoc_insertion_point(field_get:CEnterSceneRequest.RoleID)
  return roleid_;
}
void CEnterSceneRequest::set_roleid(::google::protobuf::uint32 value) {
  
  roleid_ = value;
  // @@protoc_insertion_point(field_set:CEnterSceneRequest.RoleID)
}

// optional uint32 AccountID = 2;
void CEnterSceneRequest::clear_accountid() {
  accountid_ = 0u;
}
::google::protobuf::uint32 CEnterSceneRequest::accountid() const {
  // @@protoc_insertion_point(field_get:CEnterSceneRequest.AccountID)
  return accountid_;
}
void CEnterSceneRequest::set_accountid(::google::protobuf::uint32 value) {
  
  accountid_ = value;
  // @@protoc_insertion_point(field_set:CEnterSceneRequest.AccountID)
}

// optional uint32 ChannelID = 3;
void CEnterSceneRequest::clear_channelid() {
  channelid_ = 0u;
}
::google::protobuf::uint32 CEnterSceneRequest::channelid() const {
  // @@protoc_insertion_point(field_get:CEnterSceneRequest.ChannelID)
  return channelid_;
}
void CEnterSceneRequest::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:CEnterSceneRequest.ChannelID)
}

// optional uint32 ServerID = 4;
void CEnterSceneRequest::clear_serverid() {
  serverid_ = 0u;
}
::google::protobuf::uint32 CEnterSceneRequest::serverid() const {
  // @@protoc_insertion_point(field_get:CEnterSceneRequest.ServerID)
  return serverid_;
}
void CEnterSceneRequest::set_serverid(::google::protobuf::uint32 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:CEnterSceneRequest.ServerID)
}

inline const CEnterSceneRequest* CEnterSceneRequest::internal_default_instance() {
  return &CEnterSceneRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEnterSceneResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEnterSceneResponse::CEnterSceneResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_loginmessage_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CEnterSceneResponse)
}

void CEnterSceneResponse::InitAsDefaultInstance() {
}

CEnterSceneResponse::CEnterSceneResponse(const CEnterSceneResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CEnterSceneResponse)
}

void CEnterSceneResponse::SharedCtor() {
  result_ = 0u;
  _cached_size_ = 0;
}

CEnterSceneResponse::~CEnterSceneResponse() {
  // @@protoc_insertion_point(destructor:CEnterSceneResponse)
  SharedDtor();
}

void CEnterSceneResponse::SharedDtor() {
}

void CEnterSceneResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CEnterSceneResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CEnterSceneResponse_descriptor_;
}

const CEnterSceneResponse& CEnterSceneResponse::default_instance() {
  protobuf_InitDefaults_loginmessage_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CEnterSceneResponse> CEnterSceneResponse_default_instance_;

CEnterSceneResponse* CEnterSceneResponse::New(::google::protobuf::Arena* arena) const {
  CEnterSceneResponse* n = new CEnterSceneResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CEnterSceneResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CEnterSceneResponse)
  result_ = 0u;
}

bool CEnterSceneResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CEnterSceneResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CEnterSceneResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CEnterSceneResponse)
  return false;
#undef DO_
}

void CEnterSceneResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CEnterSceneResponse)
  // optional uint32 Result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:CEnterSceneResponse)
}

::google::protobuf::uint8* CEnterSceneResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CEnterSceneResponse)
  // optional uint32 Result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CEnterSceneResponse)
  return target;
}

size_t CEnterSceneResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEnterSceneResponse)
  size_t total_size = 0;

  // optional uint32 Result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CEnterSceneResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CEnterSceneResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CEnterSceneResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CEnterSceneResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CEnterSceneResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CEnterSceneResponse)
    UnsafeMergeFrom(*source);
  }
}

void CEnterSceneResponse::MergeFrom(const CEnterSceneResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEnterSceneResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CEnterSceneResponse::UnsafeMergeFrom(const CEnterSceneResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void CEnterSceneResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CEnterSceneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEnterSceneResponse::CopyFrom(const CEnterSceneResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEnterSceneResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CEnterSceneResponse::IsInitialized() const {

  return true;
}

void CEnterSceneResponse::Swap(CEnterSceneResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEnterSceneResponse::InternalSwap(CEnterSceneResponse* other) {
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CEnterSceneResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CEnterSceneResponse_descriptor_;
  metadata.reflection = CEnterSceneResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CEnterSceneResponse

// optional uint32 Result = 1;
void CEnterSceneResponse::clear_result() {
  result_ = 0u;
}
::google::protobuf::uint32 CEnterSceneResponse::result() const {
  // @@protoc_insertion_point(field_get:CEnterSceneResponse.Result)
  return result_;
}
void CEnterSceneResponse::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:CEnterSceneResponse.Result)
}

inline const CEnterSceneResponse* CEnterSceneResponse::internal_default_instance() {
  return &CEnterSceneResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
