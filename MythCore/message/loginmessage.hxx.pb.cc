// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loginmessage.hxx

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "loginmessage.hxx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMessageLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageLoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageLoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateRoleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateRoleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageCreateRoleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageCreateRoleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageEnterSceneRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageEnterSceneRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMessageEnterSceneResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMessageEnterSceneResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LOGIN_MSG_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_loginmessage_2ehxx() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_loginmessage_2ehxx() {
  protobuf_AddDesc_loginmessage_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "loginmessage.hxx");
  GOOGLE_CHECK(file != NULL);
  CMessageLoginRequest_descriptor_ = file->message_type(0);
  static const int CMessageLoginRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginRequest, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginRequest, worldid_),
  };
  CMessageLoginRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMessageLoginRequest_descriptor_,
      CMessageLoginRequest::internal_default_instance(),
      CMessageLoginRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CMessageLoginRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginRequest, _internal_metadata_));
  CMessageLoginResponse_descriptor_ = file->message_type(1);
  static const int CMessageLoginResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginResponse, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginResponse, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginResponse, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginResponse, worldid_),
  };
  CMessageLoginResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMessageLoginResponse_descriptor_,
      CMessageLoginResponse::internal_default_instance(),
      CMessageLoginResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CMessageLoginResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageLoginResponse, _internal_metadata_));
  CMessageCreateRoleRequest_descriptor_ = file->message_type(2);
  static const int CMessageCreateRoleRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRoleRequest, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRoleRequest, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRoleRequest, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRoleRequest, rolename_),
  };
  CMessageCreateRoleRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMessageCreateRoleRequest_descriptor_,
      CMessageCreateRoleRequest::internal_default_instance(),
      CMessageCreateRoleRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CMessageCreateRoleRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRoleRequest, _internal_metadata_));
  CMessageCreateRoleResponse_descriptor_ = file->message_type(3);
  static const int CMessageCreateRoleResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRoleResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRoleResponse, roleid_),
  };
  CMessageCreateRoleResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMessageCreateRoleResponse_descriptor_,
      CMessageCreateRoleResponse::internal_default_instance(),
      CMessageCreateRoleResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CMessageCreateRoleResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageCreateRoleResponse, _internal_metadata_));
  CMessageEnterSceneRequest_descriptor_ = file->message_type(4);
  static const int CMessageEnterSceneRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterSceneRequest, roleid_),
  };
  CMessageEnterSceneRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMessageEnterSceneRequest_descriptor_,
      CMessageEnterSceneRequest::internal_default_instance(),
      CMessageEnterSceneRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CMessageEnterSceneRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterSceneRequest, _internal_metadata_));
  CMessageEnterSceneResponse_descriptor_ = file->message_type(5);
  static const int CMessageEnterSceneResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterSceneResponse, result_),
  };
  CMessageEnterSceneResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CMessageEnterSceneResponse_descriptor_,
      CMessageEnterSceneResponse::internal_default_instance(),
      CMessageEnterSceneResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CMessageEnterSceneResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMessageEnterSceneResponse, _internal_metadata_));
  LOGIN_MSG_ID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_loginmessage_2ehxx);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMessageLoginRequest_descriptor_, CMessageLoginRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMessageLoginResponse_descriptor_, CMessageLoginResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMessageCreateRoleRequest_descriptor_, CMessageCreateRoleRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMessageCreateRoleResponse_descriptor_, CMessageCreateRoleResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMessageEnterSceneRequest_descriptor_, CMessageEnterSceneRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CMessageEnterSceneResponse_descriptor_, CMessageEnterSceneResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_loginmessage_2ehxx() {
  CMessageLoginRequest_default_instance_.Shutdown();
  delete CMessageLoginRequest_reflection_;
  CMessageLoginResponse_default_instance_.Shutdown();
  delete CMessageLoginResponse_reflection_;
  CMessageCreateRoleRequest_default_instance_.Shutdown();
  delete CMessageCreateRoleRequest_reflection_;
  CMessageCreateRoleResponse_default_instance_.Shutdown();
  delete CMessageCreateRoleResponse_reflection_;
  CMessageEnterSceneRequest_default_instance_.Shutdown();
  delete CMessageEnterSceneRequest_reflection_;
  CMessageEnterSceneResponse_default_instance_.Shutdown();
  delete CMessageEnterSceneResponse_reflection_;
}

void protobuf_InitDefaults_loginmessage_2ehxx_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  CMessageLoginRequest_default_instance_.DefaultConstruct();
  CMessageLoginResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CMessageCreateRoleRequest_default_instance_.DefaultConstruct();
  CMessageCreateRoleResponse_default_instance_.DefaultConstruct();
  CMessageEnterSceneRequest_default_instance_.DefaultConstruct();
  CMessageEnterSceneResponse_default_instance_.DefaultConstruct();
  CMessageLoginRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CMessageLoginResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CMessageCreateRoleRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CMessageCreateRoleResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CMessageEnterSceneRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CMessageEnterSceneResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_loginmessage_2ehxx_once_);
void protobuf_InitDefaults_loginmessage_2ehxx() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_loginmessage_2ehxx_once_,
                 &protobuf_InitDefaults_loginmessage_2ehxx_impl);
}
void protobuf_AddDesc_loginmessage_2ehxx_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_loginmessage_2ehxx();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020loginmessage.hxx\"H\n\024CMessageLoginReque"
    "st\022\014\n\004Name\030\001 \001(\t\022\021\n\tChannelID\030\002 \001(\r\022\017\n\007W"
    "orldID\030\003 \001(\r\"^\n\025CMessageLoginResponse\022\021\n"
    "\tAccountID\030\001 \001(\r\022\016\n\006RoleID\030\002 \001(\r\022\021\n\tChan"
    "nelID\030\003 \001(\r\022\017\n\007WorldID\030\004 \001(\r\"d\n\031CMessage"
    "CreateRoleRequest\022\021\n\tAccountID\030\001 \001(\r\022\021\n\t"
    "ChannelID\030\002 \001(\r\022\017\n\007WorldID\030\003 \001(\r\022\020\n\010Role"
    "Name\030\004 \001(\t\"<\n\032CMessageCreateRoleResponse"
    "\022\016\n\006Result\030\001 \001(\r\022\016\n\006RoleID\030\002 \001(\r\"+\n\031CMes"
    "sageEnterSceneRequest\022\016\n\006RoleID\030\001 \001(\r\",\n"
    "\032CMessageEnterSceneResponse\022\016\n\006Result\030\002 "
    "\001(\r*\323\001\n\014LOGIN_MSG_ID\022\014\n\010ID_ERROR\020\000\022\030\n\024ID"
    "_C2S_REQUEST_LOGIN\020\001\022\031\n\025ID_S2C_RESPONSE_"
    "LOGIN\020\002\022\036\n\032ID_C2S_REQUEST_CREATE_ROLE\020\003\022"
    "\037\n\033ID_S2C_RESPONSE_CREATE_ROLE\020\004\022\036\n\032ID_C"
    "2S_REQUEST_ENTER_SCENE\020\005\022\037\n\033ID_S2C_RESPO"
    "NSE_ENTER_SCENE\020\006b\006proto3", 665);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "loginmessage.hxx", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_loginmessage_2ehxx);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_loginmessage_2ehxx_once_);
void protobuf_AddDesc_loginmessage_2ehxx() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_loginmessage_2ehxx_once_,
                 &protobuf_AddDesc_loginmessage_2ehxx_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_loginmessage_2ehxx {
  StaticDescriptorInitializer_loginmessage_2ehxx() {
    protobuf_AddDesc_loginmessage_2ehxx();
  }
} static_descriptor_initializer_loginmessage_2ehxx_;
const ::google::protobuf::EnumDescriptor* LOGIN_MSG_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOGIN_MSG_ID_descriptor_;
}
bool LOGIN_MSG_ID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMessageLoginRequest::kNameFieldNumber;
const int CMessageLoginRequest::kChannelIDFieldNumber;
const int CMessageLoginRequest::kWorldIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMessageLoginRequest::CMessageLoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_loginmessage_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageLoginRequest)
}

void CMessageLoginRequest::InitAsDefaultInstance() {
}

CMessageLoginRequest::CMessageLoginRequest(const CMessageLoginRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMessageLoginRequest)
}

void CMessageLoginRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channelid_, 0, reinterpret_cast<char*>(&worldid_) -
    reinterpret_cast<char*>(&channelid_) + sizeof(worldid_));
  _cached_size_ = 0;
}

CMessageLoginRequest::~CMessageLoginRequest() {
  // @@protoc_insertion_point(destructor:CMessageLoginRequest)
  SharedDtor();
}

void CMessageLoginRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMessageLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginRequest_descriptor_;
}

const CMessageLoginRequest& CMessageLoginRequest::default_instance() {
  protobuf_InitDefaults_loginmessage_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CMessageLoginRequest> CMessageLoginRequest_default_instance_;

CMessageLoginRequest* CMessageLoginRequest::New(::google::protobuf::Arena* arena) const {
  CMessageLoginRequest* n = new CMessageLoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMessageLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMessageLoginRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CMessageLoginRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMessageLoginRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(channelid_, worldid_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CMessageLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageLoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CMessageLoginRequest.Name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChannelID;
        break;
      }

      // optional uint32 ChannelID = 2;
      case 2: {
        if (tag == 16) {
         parse_ChannelID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_WorldID;
        break;
      }

      // optional uint32 WorldID = 3;
      case 3: {
        if (tag == 24) {
         parse_WorldID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageLoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageLoginRequest)
  return false;
#undef DO_
}

void CMessageLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageLoginRequest)
  // optional string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CMessageLoginRequest.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 ChannelID = 2;
  if (this->channelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channelid(), output);
  }

  // optional uint32 WorldID = 3;
  if (this->worldid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->worldid(), output);
  }

  // @@protoc_insertion_point(serialize_end:CMessageLoginRequest)
}

::google::protobuf::uint8* CMessageLoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMessageLoginRequest)
  // optional string Name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CMessageLoginRequest.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 ChannelID = 2;
  if (this->channelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channelid(), target);
  }

  // optional uint32 WorldID = 3;
  if (this->worldid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->worldid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CMessageLoginRequest)
  return target;
}

size_t CMessageLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMessageLoginRequest)
  size_t total_size = 0;

  // optional string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 ChannelID = 2;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channelid());
  }

  // optional uint32 WorldID = 3;
  if (this->worldid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worldid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMessageLoginRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMessageLoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMessageLoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMessageLoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMessageLoginRequest)
    UnsafeMergeFrom(*source);
  }
}

void CMessageLoginRequest::MergeFrom(const CMessageLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMessageLoginRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CMessageLoginRequest::UnsafeMergeFrom(const CMessageLoginRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.channelid() != 0) {
    set_channelid(from.channelid());
  }
  if (from.worldid() != 0) {
    set_worldid(from.worldid());
  }
}

void CMessageLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMessageLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginRequest::CopyFrom(const CMessageLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMessageLoginRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CMessageLoginRequest::IsInitialized() const {

  return true;
}

void CMessageLoginRequest::Swap(CMessageLoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMessageLoginRequest::InternalSwap(CMessageLoginRequest* other) {
  name_.Swap(&other->name_);
  std::swap(channelid_, other->channelid_);
  std::swap(worldid_, other->worldid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMessageLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageLoginRequest_descriptor_;
  metadata.reflection = CMessageLoginRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMessageLoginRequest

// optional string Name = 1;
void CMessageLoginRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CMessageLoginRequest::name() const {
  // @@protoc_insertion_point(field_get:CMessageLoginRequest.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMessageLoginRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMessageLoginRequest.Name)
}
void CMessageLoginRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMessageLoginRequest.Name)
}
void CMessageLoginRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMessageLoginRequest.Name)
}
::std::string* CMessageLoginRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CMessageLoginRequest.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMessageLoginRequest::release_name() {
  // @@protoc_insertion_point(field_release:CMessageLoginRequest.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMessageLoginRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CMessageLoginRequest.Name)
}

// optional uint32 ChannelID = 2;
void CMessageLoginRequest::clear_channelid() {
  channelid_ = 0u;
}
::google::protobuf::uint32 CMessageLoginRequest::channelid() const {
  // @@protoc_insertion_point(field_get:CMessageLoginRequest.ChannelID)
  return channelid_;
}
void CMessageLoginRequest::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:CMessageLoginRequest.ChannelID)
}

// optional uint32 WorldID = 3;
void CMessageLoginRequest::clear_worldid() {
  worldid_ = 0u;
}
::google::protobuf::uint32 CMessageLoginRequest::worldid() const {
  // @@protoc_insertion_point(field_get:CMessageLoginRequest.WorldID)
  return worldid_;
}
void CMessageLoginRequest::set_worldid(::google::protobuf::uint32 value) {
  
  worldid_ = value;
  // @@protoc_insertion_point(field_set:CMessageLoginRequest.WorldID)
}

inline const CMessageLoginRequest* CMessageLoginRequest::internal_default_instance() {
  return &CMessageLoginRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMessageLoginResponse::kAccountIDFieldNumber;
const int CMessageLoginResponse::kRoleIDFieldNumber;
const int CMessageLoginResponse::kChannelIDFieldNumber;
const int CMessageLoginResponse::kWorldIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMessageLoginResponse::CMessageLoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_loginmessage_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageLoginResponse)
}

void CMessageLoginResponse::InitAsDefaultInstance() {
}

CMessageLoginResponse::CMessageLoginResponse(const CMessageLoginResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMessageLoginResponse)
}

void CMessageLoginResponse::SharedCtor() {
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&worldid_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(worldid_));
  _cached_size_ = 0;
}

CMessageLoginResponse::~CMessageLoginResponse() {
  // @@protoc_insertion_point(destructor:CMessageLoginResponse)
  SharedDtor();
}

void CMessageLoginResponse::SharedDtor() {
}

void CMessageLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageLoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageLoginResponse_descriptor_;
}

const CMessageLoginResponse& CMessageLoginResponse::default_instance() {
  protobuf_InitDefaults_loginmessage_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CMessageLoginResponse> CMessageLoginResponse_default_instance_;

CMessageLoginResponse* CMessageLoginResponse::New(::google::protobuf::Arena* arena) const {
  CMessageLoginResponse* n = new CMessageLoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMessageLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMessageLoginResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CMessageLoginResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMessageLoginResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(accountid_, worldid_);

#undef ZR_HELPER_
#undef ZR_

}

bool CMessageLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageLoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }

      // optional uint32 RoleID = 2;
      case 2: {
        if (tag == 16) {
         parse_RoleID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ChannelID;
        break;
      }

      // optional uint32 ChannelID = 3;
      case 3: {
        if (tag == 24) {
         parse_ChannelID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_WorldID;
        break;
      }

      // optional uint32 WorldID = 4;
      case 4: {
        if (tag == 32) {
         parse_WorldID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageLoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageLoginResponse)
  return false;
#undef DO_
}

void CMessageLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageLoginResponse)
  // optional uint32 AccountID = 1;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 RoleID = 2;
  if (this->roleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roleid(), output);
  }

  // optional uint32 ChannelID = 3;
  if (this->channelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channelid(), output);
  }

  // optional uint32 WorldID = 4;
  if (this->worldid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->worldid(), output);
  }

  // @@protoc_insertion_point(serialize_end:CMessageLoginResponse)
}

::google::protobuf::uint8* CMessageLoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMessageLoginResponse)
  // optional uint32 AccountID = 1;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 RoleID = 2;
  if (this->roleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roleid(), target);
  }

  // optional uint32 ChannelID = 3;
  if (this->channelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channelid(), target);
  }

  // optional uint32 WorldID = 4;
  if (this->worldid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->worldid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CMessageLoginResponse)
  return target;
}

size_t CMessageLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMessageLoginResponse)
  size_t total_size = 0;

  // optional uint32 AccountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  // optional uint32 RoleID = 2;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roleid());
  }

  // optional uint32 ChannelID = 3;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channelid());
  }

  // optional uint32 WorldID = 4;
  if (this->worldid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worldid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMessageLoginResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMessageLoginResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMessageLoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMessageLoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMessageLoginResponse)
    UnsafeMergeFrom(*source);
  }
}

void CMessageLoginResponse::MergeFrom(const CMessageLoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMessageLoginResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CMessageLoginResponse::UnsafeMergeFrom(const CMessageLoginResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.roleid() != 0) {
    set_roleid(from.roleid());
  }
  if (from.channelid() != 0) {
    set_channelid(from.channelid());
  }
  if (from.worldid() != 0) {
    set_worldid(from.worldid());
  }
}

void CMessageLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMessageLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageLoginResponse::CopyFrom(const CMessageLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMessageLoginResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CMessageLoginResponse::IsInitialized() const {

  return true;
}

void CMessageLoginResponse::Swap(CMessageLoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMessageLoginResponse::InternalSwap(CMessageLoginResponse* other) {
  std::swap(accountid_, other->accountid_);
  std::swap(roleid_, other->roleid_);
  std::swap(channelid_, other->channelid_);
  std::swap(worldid_, other->worldid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMessageLoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageLoginResponse_descriptor_;
  metadata.reflection = CMessageLoginResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMessageLoginResponse

// optional uint32 AccountID = 1;
void CMessageLoginResponse::clear_accountid() {
  accountid_ = 0u;
}
::google::protobuf::uint32 CMessageLoginResponse::accountid() const {
  // @@protoc_insertion_point(field_get:CMessageLoginResponse.AccountID)
  return accountid_;
}
void CMessageLoginResponse::set_accountid(::google::protobuf::uint32 value) {
  
  accountid_ = value;
  // @@protoc_insertion_point(field_set:CMessageLoginResponse.AccountID)
}

// optional uint32 RoleID = 2;
void CMessageLoginResponse::clear_roleid() {
  roleid_ = 0u;
}
::google::protobuf::uint32 CMessageLoginResponse::roleid() const {
  // @@protoc_insertion_point(field_get:CMessageLoginResponse.RoleID)
  return roleid_;
}
void CMessageLoginResponse::set_roleid(::google::protobuf::uint32 value) {
  
  roleid_ = value;
  // @@protoc_insertion_point(field_set:CMessageLoginResponse.RoleID)
}

// optional uint32 ChannelID = 3;
void CMessageLoginResponse::clear_channelid() {
  channelid_ = 0u;
}
::google::protobuf::uint32 CMessageLoginResponse::channelid() const {
  // @@protoc_insertion_point(field_get:CMessageLoginResponse.ChannelID)
  return channelid_;
}
void CMessageLoginResponse::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:CMessageLoginResponse.ChannelID)
}

// optional uint32 WorldID = 4;
void CMessageLoginResponse::clear_worldid() {
  worldid_ = 0u;
}
::google::protobuf::uint32 CMessageLoginResponse::worldid() const {
  // @@protoc_insertion_point(field_get:CMessageLoginResponse.WorldID)
  return worldid_;
}
void CMessageLoginResponse::set_worldid(::google::protobuf::uint32 value) {
  
  worldid_ = value;
  // @@protoc_insertion_point(field_set:CMessageLoginResponse.WorldID)
}

inline const CMessageLoginResponse* CMessageLoginResponse::internal_default_instance() {
  return &CMessageLoginResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMessageCreateRoleRequest::kAccountIDFieldNumber;
const int CMessageCreateRoleRequest::kChannelIDFieldNumber;
const int CMessageCreateRoleRequest::kWorldIDFieldNumber;
const int CMessageCreateRoleRequest::kRoleNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMessageCreateRoleRequest::CMessageCreateRoleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_loginmessage_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageCreateRoleRequest)
}

void CMessageCreateRoleRequest::InitAsDefaultInstance() {
}

CMessageCreateRoleRequest::CMessageCreateRoleRequest(const CMessageCreateRoleRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMessageCreateRoleRequest)
}

void CMessageCreateRoleRequest::SharedCtor() {
  rolename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&worldid_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(worldid_));
  _cached_size_ = 0;
}

CMessageCreateRoleRequest::~CMessageCreateRoleRequest() {
  // @@protoc_insertion_point(destructor:CMessageCreateRoleRequest)
  SharedDtor();
}

void CMessageCreateRoleRequest::SharedDtor() {
  rolename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMessageCreateRoleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageCreateRoleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateRoleRequest_descriptor_;
}

const CMessageCreateRoleRequest& CMessageCreateRoleRequest::default_instance() {
  protobuf_InitDefaults_loginmessage_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CMessageCreateRoleRequest> CMessageCreateRoleRequest_default_instance_;

CMessageCreateRoleRequest* CMessageCreateRoleRequest::New(::google::protobuf::Arena* arena) const {
  CMessageCreateRoleRequest* n = new CMessageCreateRoleRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMessageCreateRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMessageCreateRoleRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CMessageCreateRoleRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMessageCreateRoleRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(accountid_, worldid_);
  rolename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CMessageCreateRoleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageCreateRoleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AccountID = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChannelID;
        break;
      }

      // optional uint32 ChannelID = 2;
      case 2: {
        if (tag == 16) {
         parse_ChannelID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_WorldID;
        break;
      }

      // optional uint32 WorldID = 3;
      case 3: {
        if (tag == 24) {
         parse_WorldID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RoleName;
        break;
      }

      // optional string RoleName = 4;
      case 4: {
        if (tag == 34) {
         parse_RoleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CMessageCreateRoleRequest.RoleName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageCreateRoleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageCreateRoleRequest)
  return false;
#undef DO_
}

void CMessageCreateRoleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageCreateRoleRequest)
  // optional uint32 AccountID = 1;
  if (this->accountid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 ChannelID = 2;
  if (this->channelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channelid(), output);
  }

  // optional uint32 WorldID = 3;
  if (this->worldid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->worldid(), output);
  }

  // optional string RoleName = 4;
  if (this->rolename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CMessageCreateRoleRequest.RoleName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rolename(), output);
  }

  // @@protoc_insertion_point(serialize_end:CMessageCreateRoleRequest)
}

::google::protobuf::uint8* CMessageCreateRoleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMessageCreateRoleRequest)
  // optional uint32 AccountID = 1;
  if (this->accountid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 ChannelID = 2;
  if (this->channelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channelid(), target);
  }

  // optional uint32 WorldID = 3;
  if (this->worldid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->worldid(), target);
  }

  // optional string RoleName = 4;
  if (this->rolename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CMessageCreateRoleRequest.RoleName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rolename(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CMessageCreateRoleRequest)
  return target;
}

size_t CMessageCreateRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMessageCreateRoleRequest)
  size_t total_size = 0;

  // optional uint32 AccountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accountid());
  }

  // optional uint32 ChannelID = 2;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channelid());
  }

  // optional uint32 WorldID = 3;
  if (this->worldid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worldid());
  }

  // optional string RoleName = 4;
  if (this->rolename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rolename());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageCreateRoleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMessageCreateRoleRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMessageCreateRoleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMessageCreateRoleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMessageCreateRoleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMessageCreateRoleRequest)
    UnsafeMergeFrom(*source);
  }
}

void CMessageCreateRoleRequest::MergeFrom(const CMessageCreateRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMessageCreateRoleRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CMessageCreateRoleRequest::UnsafeMergeFrom(const CMessageCreateRoleRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.accountid() != 0) {
    set_accountid(from.accountid());
  }
  if (from.channelid() != 0) {
    set_channelid(from.channelid());
  }
  if (from.worldid() != 0) {
    set_worldid(from.worldid());
  }
  if (from.rolename().size() > 0) {

    rolename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rolename_);
  }
}

void CMessageCreateRoleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMessageCreateRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateRoleRequest::CopyFrom(const CMessageCreateRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMessageCreateRoleRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CMessageCreateRoleRequest::IsInitialized() const {

  return true;
}

void CMessageCreateRoleRequest::Swap(CMessageCreateRoleRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMessageCreateRoleRequest::InternalSwap(CMessageCreateRoleRequest* other) {
  std::swap(accountid_, other->accountid_);
  std::swap(channelid_, other->channelid_);
  std::swap(worldid_, other->worldid_);
  rolename_.Swap(&other->rolename_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMessageCreateRoleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageCreateRoleRequest_descriptor_;
  metadata.reflection = CMessageCreateRoleRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMessageCreateRoleRequest

// optional uint32 AccountID = 1;
void CMessageCreateRoleRequest::clear_accountid() {
  accountid_ = 0u;
}
::google::protobuf::uint32 CMessageCreateRoleRequest::accountid() const {
  // @@protoc_insertion_point(field_get:CMessageCreateRoleRequest.AccountID)
  return accountid_;
}
void CMessageCreateRoleRequest::set_accountid(::google::protobuf::uint32 value) {
  
  accountid_ = value;
  // @@protoc_insertion_point(field_set:CMessageCreateRoleRequest.AccountID)
}

// optional uint32 ChannelID = 2;
void CMessageCreateRoleRequest::clear_channelid() {
  channelid_ = 0u;
}
::google::protobuf::uint32 CMessageCreateRoleRequest::channelid() const {
  // @@protoc_insertion_point(field_get:CMessageCreateRoleRequest.ChannelID)
  return channelid_;
}
void CMessageCreateRoleRequest::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:CMessageCreateRoleRequest.ChannelID)
}

// optional uint32 WorldID = 3;
void CMessageCreateRoleRequest::clear_worldid() {
  worldid_ = 0u;
}
::google::protobuf::uint32 CMessageCreateRoleRequest::worldid() const {
  // @@protoc_insertion_point(field_get:CMessageCreateRoleRequest.WorldID)
  return worldid_;
}
void CMessageCreateRoleRequest::set_worldid(::google::protobuf::uint32 value) {
  
  worldid_ = value;
  // @@protoc_insertion_point(field_set:CMessageCreateRoleRequest.WorldID)
}

// optional string RoleName = 4;
void CMessageCreateRoleRequest::clear_rolename() {
  rolename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CMessageCreateRoleRequest::rolename() const {
  // @@protoc_insertion_point(field_get:CMessageCreateRoleRequest.RoleName)
  return rolename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMessageCreateRoleRequest::set_rolename(const ::std::string& value) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMessageCreateRoleRequest.RoleName)
}
void CMessageCreateRoleRequest::set_rolename(const char* value) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMessageCreateRoleRequest.RoleName)
}
void CMessageCreateRoleRequest::set_rolename(const char* value, size_t size) {
  
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMessageCreateRoleRequest.RoleName)
}
::std::string* CMessageCreateRoleRequest::mutable_rolename() {
  
  // @@protoc_insertion_point(field_mutable:CMessageCreateRoleRequest.RoleName)
  return rolename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMessageCreateRoleRequest::release_rolename() {
  // @@protoc_insertion_point(field_release:CMessageCreateRoleRequest.RoleName)
  
  return rolename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMessageCreateRoleRequest::set_allocated_rolename(::std::string* rolename) {
  if (rolename != NULL) {
    
  } else {
    
  }
  rolename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rolename);
  // @@protoc_insertion_point(field_set_allocated:CMessageCreateRoleRequest.RoleName)
}

inline const CMessageCreateRoleRequest* CMessageCreateRoleRequest::internal_default_instance() {
  return &CMessageCreateRoleRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMessageCreateRoleResponse::kResultFieldNumber;
const int CMessageCreateRoleResponse::kRoleIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMessageCreateRoleResponse::CMessageCreateRoleResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_loginmessage_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageCreateRoleResponse)
}

void CMessageCreateRoleResponse::InitAsDefaultInstance() {
}

CMessageCreateRoleResponse::CMessageCreateRoleResponse(const CMessageCreateRoleResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMessageCreateRoleResponse)
}

void CMessageCreateRoleResponse::SharedCtor() {
  ::memset(&result_, 0, reinterpret_cast<char*>(&roleid_) -
    reinterpret_cast<char*>(&result_) + sizeof(roleid_));
  _cached_size_ = 0;
}

CMessageCreateRoleResponse::~CMessageCreateRoleResponse() {
  // @@protoc_insertion_point(destructor:CMessageCreateRoleResponse)
  SharedDtor();
}

void CMessageCreateRoleResponse::SharedDtor() {
}

void CMessageCreateRoleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageCreateRoleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageCreateRoleResponse_descriptor_;
}

const CMessageCreateRoleResponse& CMessageCreateRoleResponse::default_instance() {
  protobuf_InitDefaults_loginmessage_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CMessageCreateRoleResponse> CMessageCreateRoleResponse_default_instance_;

CMessageCreateRoleResponse* CMessageCreateRoleResponse::New(::google::protobuf::Arena* arena) const {
  CMessageCreateRoleResponse* n = new CMessageCreateRoleResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMessageCreateRoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMessageCreateRoleResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CMessageCreateRoleResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMessageCreateRoleResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_, roleid_);

#undef ZR_HELPER_
#undef ZR_

}

bool CMessageCreateRoleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageCreateRoleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }

      // optional uint32 RoleID = 2;
      case 2: {
        if (tag == 16) {
         parse_RoleID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageCreateRoleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageCreateRoleResponse)
  return false;
#undef DO_
}

void CMessageCreateRoleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageCreateRoleResponse)
  // optional uint32 Result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 RoleID = 2;
  if (this->roleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roleid(), output);
  }

  // @@protoc_insertion_point(serialize_end:CMessageCreateRoleResponse)
}

::google::protobuf::uint8* CMessageCreateRoleResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMessageCreateRoleResponse)
  // optional uint32 Result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 RoleID = 2;
  if (this->roleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roleid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CMessageCreateRoleResponse)
  return target;
}

size_t CMessageCreateRoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMessageCreateRoleResponse)
  size_t total_size = 0;

  // optional uint32 Result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  // optional uint32 RoleID = 2;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roleid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageCreateRoleResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMessageCreateRoleResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMessageCreateRoleResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMessageCreateRoleResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMessageCreateRoleResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMessageCreateRoleResponse)
    UnsafeMergeFrom(*source);
  }
}

void CMessageCreateRoleResponse::MergeFrom(const CMessageCreateRoleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMessageCreateRoleResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CMessageCreateRoleResponse::UnsafeMergeFrom(const CMessageCreateRoleResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.roleid() != 0) {
    set_roleid(from.roleid());
  }
}

void CMessageCreateRoleResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMessageCreateRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageCreateRoleResponse::CopyFrom(const CMessageCreateRoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMessageCreateRoleResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CMessageCreateRoleResponse::IsInitialized() const {

  return true;
}

void CMessageCreateRoleResponse::Swap(CMessageCreateRoleResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMessageCreateRoleResponse::InternalSwap(CMessageCreateRoleResponse* other) {
  std::swap(result_, other->result_);
  std::swap(roleid_, other->roleid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMessageCreateRoleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageCreateRoleResponse_descriptor_;
  metadata.reflection = CMessageCreateRoleResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMessageCreateRoleResponse

// optional uint32 Result = 1;
void CMessageCreateRoleResponse::clear_result() {
  result_ = 0u;
}
::google::protobuf::uint32 CMessageCreateRoleResponse::result() const {
  // @@protoc_insertion_point(field_get:CMessageCreateRoleResponse.Result)
  return result_;
}
void CMessageCreateRoleResponse::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:CMessageCreateRoleResponse.Result)
}

// optional uint32 RoleID = 2;
void CMessageCreateRoleResponse::clear_roleid() {
  roleid_ = 0u;
}
::google::protobuf::uint32 CMessageCreateRoleResponse::roleid() const {
  // @@protoc_insertion_point(field_get:CMessageCreateRoleResponse.RoleID)
  return roleid_;
}
void CMessageCreateRoleResponse::set_roleid(::google::protobuf::uint32 value) {
  
  roleid_ = value;
  // @@protoc_insertion_point(field_set:CMessageCreateRoleResponse.RoleID)
}

inline const CMessageCreateRoleResponse* CMessageCreateRoleResponse::internal_default_instance() {
  return &CMessageCreateRoleResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMessageEnterSceneRequest::kRoleIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMessageEnterSceneRequest::CMessageEnterSceneRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_loginmessage_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageEnterSceneRequest)
}

void CMessageEnterSceneRequest::InitAsDefaultInstance() {
}

CMessageEnterSceneRequest::CMessageEnterSceneRequest(const CMessageEnterSceneRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMessageEnterSceneRequest)
}

void CMessageEnterSceneRequest::SharedCtor() {
  roleid_ = 0u;
  _cached_size_ = 0;
}

CMessageEnterSceneRequest::~CMessageEnterSceneRequest() {
  // @@protoc_insertion_point(destructor:CMessageEnterSceneRequest)
  SharedDtor();
}

void CMessageEnterSceneRequest::SharedDtor() {
}

void CMessageEnterSceneRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageEnterSceneRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterSceneRequest_descriptor_;
}

const CMessageEnterSceneRequest& CMessageEnterSceneRequest::default_instance() {
  protobuf_InitDefaults_loginmessage_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CMessageEnterSceneRequest> CMessageEnterSceneRequest_default_instance_;

CMessageEnterSceneRequest* CMessageEnterSceneRequest::New(::google::protobuf::Arena* arena) const {
  CMessageEnterSceneRequest* n = new CMessageEnterSceneRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMessageEnterSceneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMessageEnterSceneRequest)
  roleid_ = 0u;
}

bool CMessageEnterSceneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageEnterSceneRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RoleID = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageEnterSceneRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageEnterSceneRequest)
  return false;
#undef DO_
}

void CMessageEnterSceneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageEnterSceneRequest)
  // optional uint32 RoleID = 1;
  if (this->roleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roleid(), output);
  }

  // @@protoc_insertion_point(serialize_end:CMessageEnterSceneRequest)
}

::google::protobuf::uint8* CMessageEnterSceneRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMessageEnterSceneRequest)
  // optional uint32 RoleID = 1;
  if (this->roleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roleid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CMessageEnterSceneRequest)
  return target;
}

size_t CMessageEnterSceneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMessageEnterSceneRequest)
  size_t total_size = 0;

  // optional uint32 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roleid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageEnterSceneRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMessageEnterSceneRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMessageEnterSceneRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMessageEnterSceneRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMessageEnterSceneRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMessageEnterSceneRequest)
    UnsafeMergeFrom(*source);
  }
}

void CMessageEnterSceneRequest::MergeFrom(const CMessageEnterSceneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMessageEnterSceneRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CMessageEnterSceneRequest::UnsafeMergeFrom(const CMessageEnterSceneRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.roleid() != 0) {
    set_roleid(from.roleid());
  }
}

void CMessageEnterSceneRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMessageEnterSceneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterSceneRequest::CopyFrom(const CMessageEnterSceneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMessageEnterSceneRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CMessageEnterSceneRequest::IsInitialized() const {

  return true;
}

void CMessageEnterSceneRequest::Swap(CMessageEnterSceneRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMessageEnterSceneRequest::InternalSwap(CMessageEnterSceneRequest* other) {
  std::swap(roleid_, other->roleid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMessageEnterSceneRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageEnterSceneRequest_descriptor_;
  metadata.reflection = CMessageEnterSceneRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMessageEnterSceneRequest

// optional uint32 RoleID = 1;
void CMessageEnterSceneRequest::clear_roleid() {
  roleid_ = 0u;
}
::google::protobuf::uint32 CMessageEnterSceneRequest::roleid() const {
  // @@protoc_insertion_point(field_get:CMessageEnterSceneRequest.RoleID)
  return roleid_;
}
void CMessageEnterSceneRequest::set_roleid(::google::protobuf::uint32 value) {
  
  roleid_ = value;
  // @@protoc_insertion_point(field_set:CMessageEnterSceneRequest.RoleID)
}

inline const CMessageEnterSceneRequest* CMessageEnterSceneRequest::internal_default_instance() {
  return &CMessageEnterSceneRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMessageEnterSceneResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMessageEnterSceneResponse::CMessageEnterSceneResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_loginmessage_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMessageEnterSceneResponse)
}

void CMessageEnterSceneResponse::InitAsDefaultInstance() {
}

CMessageEnterSceneResponse::CMessageEnterSceneResponse(const CMessageEnterSceneResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CMessageEnterSceneResponse)
}

void CMessageEnterSceneResponse::SharedCtor() {
  result_ = 0u;
  _cached_size_ = 0;
}

CMessageEnterSceneResponse::~CMessageEnterSceneResponse() {
  // @@protoc_insertion_point(destructor:CMessageEnterSceneResponse)
  SharedDtor();
}

void CMessageEnterSceneResponse::SharedDtor() {
}

void CMessageEnterSceneResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMessageEnterSceneResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMessageEnterSceneResponse_descriptor_;
}

const CMessageEnterSceneResponse& CMessageEnterSceneResponse::default_instance() {
  protobuf_InitDefaults_loginmessage_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CMessageEnterSceneResponse> CMessageEnterSceneResponse_default_instance_;

CMessageEnterSceneResponse* CMessageEnterSceneResponse::New(::google::protobuf::Arena* arena) const {
  CMessageEnterSceneResponse* n = new CMessageEnterSceneResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMessageEnterSceneResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMessageEnterSceneResponse)
  result_ = 0u;
}

bool CMessageEnterSceneResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMessageEnterSceneResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 2;
      case 2: {
        if (tag == 16) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMessageEnterSceneResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMessageEnterSceneResponse)
  return false;
#undef DO_
}

void CMessageEnterSceneResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMessageEnterSceneResponse)
  // optional uint32 Result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:CMessageEnterSceneResponse)
}

::google::protobuf::uint8* CMessageEnterSceneResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMessageEnterSceneResponse)
  // optional uint32 Result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CMessageEnterSceneResponse)
  return target;
}

size_t CMessageEnterSceneResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMessageEnterSceneResponse)
  size_t total_size = 0;

  // optional uint32 Result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMessageEnterSceneResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMessageEnterSceneResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CMessageEnterSceneResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMessageEnterSceneResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMessageEnterSceneResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMessageEnterSceneResponse)
    UnsafeMergeFrom(*source);
  }
}

void CMessageEnterSceneResponse::MergeFrom(const CMessageEnterSceneResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMessageEnterSceneResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CMessageEnterSceneResponse::UnsafeMergeFrom(const CMessageEnterSceneResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void CMessageEnterSceneResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMessageEnterSceneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMessageEnterSceneResponse::CopyFrom(const CMessageEnterSceneResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMessageEnterSceneResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CMessageEnterSceneResponse::IsInitialized() const {

  return true;
}

void CMessageEnterSceneResponse::Swap(CMessageEnterSceneResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMessageEnterSceneResponse::InternalSwap(CMessageEnterSceneResponse* other) {
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMessageEnterSceneResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMessageEnterSceneResponse_descriptor_;
  metadata.reflection = CMessageEnterSceneResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMessageEnterSceneResponse

// optional uint32 Result = 2;
void CMessageEnterSceneResponse::clear_result() {
  result_ = 0u;
}
::google::protobuf::uint32 CMessageEnterSceneResponse::result() const {
  // @@protoc_insertion_point(field_get:CMessageEnterSceneResponse.Result)
  return result_;
}
void CMessageEnterSceneResponse::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:CMessageEnterSceneResponse.Result)
}

inline const CMessageEnterSceneResponse* CMessageEnterSceneResponse::internal_default_instance() {
  return &CMessageEnterSceneResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
