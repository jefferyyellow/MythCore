// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: taskmodule.hxx

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "taskmodule.hxx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CAcceptTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAcceptTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAcceptTaskResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAcceptTaskResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSubmitTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSubmitTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSubmitTaskResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSubmitTaskResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAbortTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAbortTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAbortTaskResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAbortTaskResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUpdateTaskProcessNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUpdateTaskProcessNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TASK_MODULE_MSG_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_taskmodule_2ehxx() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_taskmodule_2ehxx() {
  protobuf_AddDesc_taskmodule_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "taskmodule.hxx");
  GOOGLE_CHECK(file != NULL);
  CAcceptTaskRequest_descriptor_ = file->message_type(0);
  static const int CAcceptTaskRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAcceptTaskRequest, taskid_),
  };
  CAcceptTaskRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CAcceptTaskRequest_descriptor_,
      CAcceptTaskRequest::internal_default_instance(),
      CAcceptTaskRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CAcceptTaskRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAcceptTaskRequest, _internal_metadata_));
  CAcceptTaskResponse_descriptor_ = file->message_type(1);
  static const int CAcceptTaskResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAcceptTaskResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAcceptTaskResponse, taskid_),
  };
  CAcceptTaskResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CAcceptTaskResponse_descriptor_,
      CAcceptTaskResponse::internal_default_instance(),
      CAcceptTaskResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CAcceptTaskResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAcceptTaskResponse, _internal_metadata_));
  CSubmitTaskRequest_descriptor_ = file->message_type(2);
  static const int CSubmitTaskRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSubmitTaskRequest, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSubmitTaskRequest, itemindex_),
  };
  CSubmitTaskRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSubmitTaskRequest_descriptor_,
      CSubmitTaskRequest::internal_default_instance(),
      CSubmitTaskRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CSubmitTaskRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSubmitTaskRequest, _internal_metadata_));
  CSubmitTaskResponse_descriptor_ = file->message_type(3);
  static const int CSubmitTaskResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSubmitTaskResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSubmitTaskResponse, taskid_),
  };
  CSubmitTaskResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSubmitTaskResponse_descriptor_,
      CSubmitTaskResponse::internal_default_instance(),
      CSubmitTaskResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CSubmitTaskResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSubmitTaskResponse, _internal_metadata_));
  CAbortTaskRequest_descriptor_ = file->message_type(4);
  static const int CAbortTaskRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAbortTaskRequest, taskid_),
  };
  CAbortTaskRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CAbortTaskRequest_descriptor_,
      CAbortTaskRequest::internal_default_instance(),
      CAbortTaskRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CAbortTaskRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAbortTaskRequest, _internal_metadata_));
  CAbortTaskResponse_descriptor_ = file->message_type(5);
  static const int CAbortTaskResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAbortTaskResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAbortTaskResponse, taskid_),
  };
  CAbortTaskResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CAbortTaskResponse_descriptor_,
      CAbortTaskResponse::internal_default_instance(),
      CAbortTaskResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CAbortTaskResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAbortTaskResponse, _internal_metadata_));
  CUpdateTaskProcessNotify_descriptor_ = file->message_type(6);
  static const int CUpdateTaskProcessNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUpdateTaskProcessNotify, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUpdateTaskProcessNotify, condindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUpdateTaskProcessNotify, param_),
  };
  CUpdateTaskProcessNotify_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CUpdateTaskProcessNotify_descriptor_,
      CUpdateTaskProcessNotify::internal_default_instance(),
      CUpdateTaskProcessNotify_offsets_,
      -1,
      -1,
      -1,
      sizeof(CUpdateTaskProcessNotify),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUpdateTaskProcessNotify, _internal_metadata_));
  TASK_MODULE_MSG_ID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_taskmodule_2ehxx);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CAcceptTaskRequest_descriptor_, CAcceptTaskRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CAcceptTaskResponse_descriptor_, CAcceptTaskResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSubmitTaskRequest_descriptor_, CSubmitTaskRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSubmitTaskResponse_descriptor_, CSubmitTaskResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CAbortTaskRequest_descriptor_, CAbortTaskRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CAbortTaskResponse_descriptor_, CAbortTaskResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CUpdateTaskProcessNotify_descriptor_, CUpdateTaskProcessNotify::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_taskmodule_2ehxx() {
  CAcceptTaskRequest_default_instance_.Shutdown();
  delete CAcceptTaskRequest_reflection_;
  CAcceptTaskResponse_default_instance_.Shutdown();
  delete CAcceptTaskResponse_reflection_;
  CSubmitTaskRequest_default_instance_.Shutdown();
  delete CSubmitTaskRequest_reflection_;
  CSubmitTaskResponse_default_instance_.Shutdown();
  delete CSubmitTaskResponse_reflection_;
  CAbortTaskRequest_default_instance_.Shutdown();
  delete CAbortTaskRequest_reflection_;
  CAbortTaskResponse_default_instance_.Shutdown();
  delete CAbortTaskResponse_reflection_;
  CUpdateTaskProcessNotify_default_instance_.Shutdown();
  delete CUpdateTaskProcessNotify_reflection_;
}

void protobuf_InitDefaults_taskmodule_2ehxx_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  CAcceptTaskRequest_default_instance_.DefaultConstruct();
  CAcceptTaskResponse_default_instance_.DefaultConstruct();
  CSubmitTaskRequest_default_instance_.DefaultConstruct();
  CSubmitTaskResponse_default_instance_.DefaultConstruct();
  CAbortTaskRequest_default_instance_.DefaultConstruct();
  CAbortTaskResponse_default_instance_.DefaultConstruct();
  CUpdateTaskProcessNotify_default_instance_.DefaultConstruct();
  CAcceptTaskRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CAcceptTaskResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CSubmitTaskRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CSubmitTaskResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CAbortTaskRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CAbortTaskResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CUpdateTaskProcessNotify_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_taskmodule_2ehxx_once_);
void protobuf_InitDefaults_taskmodule_2ehxx() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_taskmodule_2ehxx_once_,
                 &protobuf_InitDefaults_taskmodule_2ehxx_impl);
}
void protobuf_AddDesc_taskmodule_2ehxx_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_taskmodule_2ehxx();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016taskmodule.hxx\"$\n\022CAcceptTaskRequest\022\016"
    "\n\006TaskID\030\001 \001(\r\"5\n\023CAcceptTaskResponse\022\016\n"
    "\006Result\030\001 \001(\r\022\016\n\006TaskID\030\002 \001(\r\"7\n\022CSubmit"
    "TaskRequest\022\016\n\006TaskID\030\001 \001(\r\022\021\n\tItemIndex"
    "\030\002 \001(\r\"5\n\023CSubmitTaskResponse\022\016\n\006Result\030"
    "\001 \001(\r\022\016\n\006TaskID\030\002 \001(\r\"#\n\021CAbortTaskReque"
    "st\022\016\n\006TaskID\030\001 \001(\r\"4\n\022CAbortTaskResponse"
    "\022\016\n\006Result\030\001 \001(\r\022\016\n\006TaskID\030\002 \001(\r\"L\n\030CUpd"
    "ateTaskProcessNotify\022\016\n\006TaskID\030\001 \001(\r\022\021\n\t"
    "CondIndex\030\002 \001(\r\022\r\n\005Param\030\003 \001(\r*\235\002\n\022TASK_"
    "MODULE_MSG_ID\022\030\n\024ID_TASK_MODULE_ERROR\020\000\022"
    "\037\n\032ID_C2S_REQUEST_ACCEPT_TASK\020\200 \022 \n\033ID_S"
    "2C_RESPONSE_ACCEPT_TASK\020\201 \022\037\n\032ID_C2S_REQ"
    "UEST_SUBMIT_TASK\020\202 \022 \n\033ID_S2C_RESPONSE_S"
    "UBMIT_TASK\020\203 \022\036\n\031ID_C2S_REQUEST_ABORT_TA"
    "SK\020\204 \022\037\n\032ID_S2C_RESPONSE_ABORT_TASK\020\205 \022&"
    "\n!ID_S2C_NOTIFY_UPDATE_TASK_PROCESS\020\206 b\006"
    "proto3", 686);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "taskmodule.hxx", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_taskmodule_2ehxx);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_taskmodule_2ehxx_once_);
void protobuf_AddDesc_taskmodule_2ehxx() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_taskmodule_2ehxx_once_,
                 &protobuf_AddDesc_taskmodule_2ehxx_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_taskmodule_2ehxx {
  StaticDescriptorInitializer_taskmodule_2ehxx() {
    protobuf_AddDesc_taskmodule_2ehxx();
  }
} static_descriptor_initializer_taskmodule_2ehxx_;
const ::google::protobuf::EnumDescriptor* TASK_MODULE_MSG_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TASK_MODULE_MSG_ID_descriptor_;
}
bool TASK_MODULE_MSG_ID_IsValid(int value) {
  switch (value) {
    case 0:
    case 4096:
    case 4097:
    case 4098:
    case 4099:
    case 4100:
    case 4101:
    case 4102:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAcceptTaskRequest::kTaskIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAcceptTaskRequest::CAcceptTaskRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_taskmodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAcceptTaskRequest)
}

void CAcceptTaskRequest::InitAsDefaultInstance() {
}

CAcceptTaskRequest::CAcceptTaskRequest(const CAcceptTaskRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CAcceptTaskRequest)
}

void CAcceptTaskRequest::SharedCtor() {
  taskid_ = 0u;
  _cached_size_ = 0;
}

CAcceptTaskRequest::~CAcceptTaskRequest() {
  // @@protoc_insertion_point(destructor:CAcceptTaskRequest)
  SharedDtor();
}

void CAcceptTaskRequest::SharedDtor() {
}

void CAcceptTaskRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAcceptTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAcceptTaskRequest_descriptor_;
}

const CAcceptTaskRequest& CAcceptTaskRequest::default_instance() {
  protobuf_InitDefaults_taskmodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CAcceptTaskRequest> CAcceptTaskRequest_default_instance_;

CAcceptTaskRequest* CAcceptTaskRequest::New(::google::protobuf::Arena* arena) const {
  CAcceptTaskRequest* n = new CAcceptTaskRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CAcceptTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CAcceptTaskRequest)
  taskid_ = 0u;
}

bool CAcceptTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAcceptTaskRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAcceptTaskRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAcceptTaskRequest)
  return false;
#undef DO_
}

void CAcceptTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAcceptTaskRequest)
  // optional uint32 TaskID = 1;
  if (this->taskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // @@protoc_insertion_point(serialize_end:CAcceptTaskRequest)
}

::google::protobuf::uint8* CAcceptTaskRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAcceptTaskRequest)
  // optional uint32 TaskID = 1;
  if (this->taskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CAcceptTaskRequest)
  return target;
}

size_t CAcceptTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAcceptTaskRequest)
  size_t total_size = 0;

  // optional uint32 TaskID = 1;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->taskid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAcceptTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAcceptTaskRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CAcceptTaskRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAcceptTaskRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAcceptTaskRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAcceptTaskRequest)
    UnsafeMergeFrom(*source);
  }
}

void CAcceptTaskRequest::MergeFrom(const CAcceptTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAcceptTaskRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CAcceptTaskRequest::UnsafeMergeFrom(const CAcceptTaskRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.taskid() != 0) {
    set_taskid(from.taskid());
  }
}

void CAcceptTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAcceptTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAcceptTaskRequest::CopyFrom(const CAcceptTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAcceptTaskRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CAcceptTaskRequest::IsInitialized() const {

  return true;
}

void CAcceptTaskRequest::Swap(CAcceptTaskRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAcceptTaskRequest::InternalSwap(CAcceptTaskRequest* other) {
  std::swap(taskid_, other->taskid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CAcceptTaskRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAcceptTaskRequest_descriptor_;
  metadata.reflection = CAcceptTaskRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CAcceptTaskRequest

// optional uint32 TaskID = 1;
void CAcceptTaskRequest::clear_taskid() {
  taskid_ = 0u;
}
::google::protobuf::uint32 CAcceptTaskRequest::taskid() const {
  // @@protoc_insertion_point(field_get:CAcceptTaskRequest.TaskID)
  return taskid_;
}
void CAcceptTaskRequest::set_taskid(::google::protobuf::uint32 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:CAcceptTaskRequest.TaskID)
}

inline const CAcceptTaskRequest* CAcceptTaskRequest::internal_default_instance() {
  return &CAcceptTaskRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAcceptTaskResponse::kResultFieldNumber;
const int CAcceptTaskResponse::kTaskIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAcceptTaskResponse::CAcceptTaskResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_taskmodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAcceptTaskResponse)
}

void CAcceptTaskResponse::InitAsDefaultInstance() {
}

CAcceptTaskResponse::CAcceptTaskResponse(const CAcceptTaskResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CAcceptTaskResponse)
}

void CAcceptTaskResponse::SharedCtor() {
  ::memset(&result_, 0, reinterpret_cast<char*>(&taskid_) -
    reinterpret_cast<char*>(&result_) + sizeof(taskid_));
  _cached_size_ = 0;
}

CAcceptTaskResponse::~CAcceptTaskResponse() {
  // @@protoc_insertion_point(destructor:CAcceptTaskResponse)
  SharedDtor();
}

void CAcceptTaskResponse::SharedDtor() {
}

void CAcceptTaskResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAcceptTaskResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAcceptTaskResponse_descriptor_;
}

const CAcceptTaskResponse& CAcceptTaskResponse::default_instance() {
  protobuf_InitDefaults_taskmodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CAcceptTaskResponse> CAcceptTaskResponse_default_instance_;

CAcceptTaskResponse* CAcceptTaskResponse::New(::google::protobuf::Arena* arena) const {
  CAcceptTaskResponse* n = new CAcceptTaskResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CAcceptTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CAcceptTaskResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CAcceptTaskResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CAcceptTaskResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_, taskid_);

#undef ZR_HELPER_
#undef ZR_

}

bool CAcceptTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAcceptTaskResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TaskID;
        break;
      }

      // optional uint32 TaskID = 2;
      case 2: {
        if (tag == 16) {
         parse_TaskID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAcceptTaskResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAcceptTaskResponse)
  return false;
#undef DO_
}

void CAcceptTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAcceptTaskResponse)
  // optional uint32 Result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 TaskID = 2;
  if (this->taskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->taskid(), output);
  }

  // @@protoc_insertion_point(serialize_end:CAcceptTaskResponse)
}

::google::protobuf::uint8* CAcceptTaskResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAcceptTaskResponse)
  // optional uint32 Result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 TaskID = 2;
  if (this->taskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->taskid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CAcceptTaskResponse)
  return target;
}

size_t CAcceptTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAcceptTaskResponse)
  size_t total_size = 0;

  // optional uint32 Result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  // optional uint32 TaskID = 2;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->taskid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAcceptTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAcceptTaskResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CAcceptTaskResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAcceptTaskResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAcceptTaskResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAcceptTaskResponse)
    UnsafeMergeFrom(*source);
  }
}

void CAcceptTaskResponse::MergeFrom(const CAcceptTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAcceptTaskResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CAcceptTaskResponse::UnsafeMergeFrom(const CAcceptTaskResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.taskid() != 0) {
    set_taskid(from.taskid());
  }
}

void CAcceptTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAcceptTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAcceptTaskResponse::CopyFrom(const CAcceptTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAcceptTaskResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CAcceptTaskResponse::IsInitialized() const {

  return true;
}

void CAcceptTaskResponse::Swap(CAcceptTaskResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAcceptTaskResponse::InternalSwap(CAcceptTaskResponse* other) {
  std::swap(result_, other->result_);
  std::swap(taskid_, other->taskid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CAcceptTaskResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAcceptTaskResponse_descriptor_;
  metadata.reflection = CAcceptTaskResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CAcceptTaskResponse

// optional uint32 Result = 1;
void CAcceptTaskResponse::clear_result() {
  result_ = 0u;
}
::google::protobuf::uint32 CAcceptTaskResponse::result() const {
  // @@protoc_insertion_point(field_get:CAcceptTaskResponse.Result)
  return result_;
}
void CAcceptTaskResponse::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:CAcceptTaskResponse.Result)
}

// optional uint32 TaskID = 2;
void CAcceptTaskResponse::clear_taskid() {
  taskid_ = 0u;
}
::google::protobuf::uint32 CAcceptTaskResponse::taskid() const {
  // @@protoc_insertion_point(field_get:CAcceptTaskResponse.TaskID)
  return taskid_;
}
void CAcceptTaskResponse::set_taskid(::google::protobuf::uint32 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:CAcceptTaskResponse.TaskID)
}

inline const CAcceptTaskResponse* CAcceptTaskResponse::internal_default_instance() {
  return &CAcceptTaskResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSubmitTaskRequest::kTaskIDFieldNumber;
const int CSubmitTaskRequest::kItemIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSubmitTaskRequest::CSubmitTaskRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_taskmodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSubmitTaskRequest)
}

void CSubmitTaskRequest::InitAsDefaultInstance() {
}

CSubmitTaskRequest::CSubmitTaskRequest(const CSubmitTaskRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSubmitTaskRequest)
}

void CSubmitTaskRequest::SharedCtor() {
  ::memset(&taskid_, 0, reinterpret_cast<char*>(&itemindex_) -
    reinterpret_cast<char*>(&taskid_) + sizeof(itemindex_));
  _cached_size_ = 0;
}

CSubmitTaskRequest::~CSubmitTaskRequest() {
  // @@protoc_insertion_point(destructor:CSubmitTaskRequest)
  SharedDtor();
}

void CSubmitTaskRequest::SharedDtor() {
}

void CSubmitTaskRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSubmitTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSubmitTaskRequest_descriptor_;
}

const CSubmitTaskRequest& CSubmitTaskRequest::default_instance() {
  protobuf_InitDefaults_taskmodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CSubmitTaskRequest> CSubmitTaskRequest_default_instance_;

CSubmitTaskRequest* CSubmitTaskRequest::New(::google::protobuf::Arena* arena) const {
  CSubmitTaskRequest* n = new CSubmitTaskRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSubmitTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CSubmitTaskRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CSubmitTaskRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSubmitTaskRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(taskid_, itemindex_);

#undef ZR_HELPER_
#undef ZR_

}

bool CSubmitTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSubmitTaskRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ItemIndex;
        break;
      }

      // optional uint32 ItemIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_ItemIndex:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemindex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSubmitTaskRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSubmitTaskRequest)
  return false;
#undef DO_
}

void CSubmitTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSubmitTaskRequest)
  // optional uint32 TaskID = 1;
  if (this->taskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // optional uint32 ItemIndex = 2;
  if (this->itemindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemindex(), output);
  }

  // @@protoc_insertion_point(serialize_end:CSubmitTaskRequest)
}

::google::protobuf::uint8* CSubmitTaskRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSubmitTaskRequest)
  // optional uint32 TaskID = 1;
  if (this->taskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // optional uint32 ItemIndex = 2;
  if (this->itemindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemindex(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CSubmitTaskRequest)
  return target;
}

size_t CSubmitTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSubmitTaskRequest)
  size_t total_size = 0;

  // optional uint32 TaskID = 1;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->taskid());
  }

  // optional uint32 ItemIndex = 2;
  if (this->itemindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->itemindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSubmitTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSubmitTaskRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSubmitTaskRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSubmitTaskRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSubmitTaskRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSubmitTaskRequest)
    UnsafeMergeFrom(*source);
  }
}

void CSubmitTaskRequest::MergeFrom(const CSubmitTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSubmitTaskRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CSubmitTaskRequest::UnsafeMergeFrom(const CSubmitTaskRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.taskid() != 0) {
    set_taskid(from.taskid());
  }
  if (from.itemindex() != 0) {
    set_itemindex(from.itemindex());
  }
}

void CSubmitTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSubmitTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSubmitTaskRequest::CopyFrom(const CSubmitTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSubmitTaskRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CSubmitTaskRequest::IsInitialized() const {

  return true;
}

void CSubmitTaskRequest::Swap(CSubmitTaskRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSubmitTaskRequest::InternalSwap(CSubmitTaskRequest* other) {
  std::swap(taskid_, other->taskid_);
  std::swap(itemindex_, other->itemindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSubmitTaskRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSubmitTaskRequest_descriptor_;
  metadata.reflection = CSubmitTaskRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSubmitTaskRequest

// optional uint32 TaskID = 1;
void CSubmitTaskRequest::clear_taskid() {
  taskid_ = 0u;
}
::google::protobuf::uint32 CSubmitTaskRequest::taskid() const {
  // @@protoc_insertion_point(field_get:CSubmitTaskRequest.TaskID)
  return taskid_;
}
void CSubmitTaskRequest::set_taskid(::google::protobuf::uint32 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:CSubmitTaskRequest.TaskID)
}

// optional uint32 ItemIndex = 2;
void CSubmitTaskRequest::clear_itemindex() {
  itemindex_ = 0u;
}
::google::protobuf::uint32 CSubmitTaskRequest::itemindex() const {
  // @@protoc_insertion_point(field_get:CSubmitTaskRequest.ItemIndex)
  return itemindex_;
}
void CSubmitTaskRequest::set_itemindex(::google::protobuf::uint32 value) {
  
  itemindex_ = value;
  // @@protoc_insertion_point(field_set:CSubmitTaskRequest.ItemIndex)
}

inline const CSubmitTaskRequest* CSubmitTaskRequest::internal_default_instance() {
  return &CSubmitTaskRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSubmitTaskResponse::kResultFieldNumber;
const int CSubmitTaskResponse::kTaskIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSubmitTaskResponse::CSubmitTaskResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_taskmodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSubmitTaskResponse)
}

void CSubmitTaskResponse::InitAsDefaultInstance() {
}

CSubmitTaskResponse::CSubmitTaskResponse(const CSubmitTaskResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSubmitTaskResponse)
}

void CSubmitTaskResponse::SharedCtor() {
  ::memset(&result_, 0, reinterpret_cast<char*>(&taskid_) -
    reinterpret_cast<char*>(&result_) + sizeof(taskid_));
  _cached_size_ = 0;
}

CSubmitTaskResponse::~CSubmitTaskResponse() {
  // @@protoc_insertion_point(destructor:CSubmitTaskResponse)
  SharedDtor();
}

void CSubmitTaskResponse::SharedDtor() {
}

void CSubmitTaskResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSubmitTaskResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSubmitTaskResponse_descriptor_;
}

const CSubmitTaskResponse& CSubmitTaskResponse::default_instance() {
  protobuf_InitDefaults_taskmodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CSubmitTaskResponse> CSubmitTaskResponse_default_instance_;

CSubmitTaskResponse* CSubmitTaskResponse::New(::google::protobuf::Arena* arena) const {
  CSubmitTaskResponse* n = new CSubmitTaskResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSubmitTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CSubmitTaskResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CSubmitTaskResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSubmitTaskResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_, taskid_);

#undef ZR_HELPER_
#undef ZR_

}

bool CSubmitTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSubmitTaskResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TaskID;
        break;
      }

      // optional uint32 TaskID = 2;
      case 2: {
        if (tag == 16) {
         parse_TaskID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSubmitTaskResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSubmitTaskResponse)
  return false;
#undef DO_
}

void CSubmitTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSubmitTaskResponse)
  // optional uint32 Result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 TaskID = 2;
  if (this->taskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->taskid(), output);
  }

  // @@protoc_insertion_point(serialize_end:CSubmitTaskResponse)
}

::google::protobuf::uint8* CSubmitTaskResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSubmitTaskResponse)
  // optional uint32 Result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 TaskID = 2;
  if (this->taskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->taskid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CSubmitTaskResponse)
  return target;
}

size_t CSubmitTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSubmitTaskResponse)
  size_t total_size = 0;

  // optional uint32 Result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  // optional uint32 TaskID = 2;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->taskid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSubmitTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSubmitTaskResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSubmitTaskResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSubmitTaskResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSubmitTaskResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSubmitTaskResponse)
    UnsafeMergeFrom(*source);
  }
}

void CSubmitTaskResponse::MergeFrom(const CSubmitTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSubmitTaskResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CSubmitTaskResponse::UnsafeMergeFrom(const CSubmitTaskResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.taskid() != 0) {
    set_taskid(from.taskid());
  }
}

void CSubmitTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSubmitTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSubmitTaskResponse::CopyFrom(const CSubmitTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSubmitTaskResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CSubmitTaskResponse::IsInitialized() const {

  return true;
}

void CSubmitTaskResponse::Swap(CSubmitTaskResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSubmitTaskResponse::InternalSwap(CSubmitTaskResponse* other) {
  std::swap(result_, other->result_);
  std::swap(taskid_, other->taskid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSubmitTaskResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSubmitTaskResponse_descriptor_;
  metadata.reflection = CSubmitTaskResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSubmitTaskResponse

// optional uint32 Result = 1;
void CSubmitTaskResponse::clear_result() {
  result_ = 0u;
}
::google::protobuf::uint32 CSubmitTaskResponse::result() const {
  // @@protoc_insertion_point(field_get:CSubmitTaskResponse.Result)
  return result_;
}
void CSubmitTaskResponse::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:CSubmitTaskResponse.Result)
}

// optional uint32 TaskID = 2;
void CSubmitTaskResponse::clear_taskid() {
  taskid_ = 0u;
}
::google::protobuf::uint32 CSubmitTaskResponse::taskid() const {
  // @@protoc_insertion_point(field_get:CSubmitTaskResponse.TaskID)
  return taskid_;
}
void CSubmitTaskResponse::set_taskid(::google::protobuf::uint32 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:CSubmitTaskResponse.TaskID)
}

inline const CSubmitTaskResponse* CSubmitTaskResponse::internal_default_instance() {
  return &CSubmitTaskResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAbortTaskRequest::kTaskIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAbortTaskRequest::CAbortTaskRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_taskmodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAbortTaskRequest)
}

void CAbortTaskRequest::InitAsDefaultInstance() {
}

CAbortTaskRequest::CAbortTaskRequest(const CAbortTaskRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CAbortTaskRequest)
}

void CAbortTaskRequest::SharedCtor() {
  taskid_ = 0u;
  _cached_size_ = 0;
}

CAbortTaskRequest::~CAbortTaskRequest() {
  // @@protoc_insertion_point(destructor:CAbortTaskRequest)
  SharedDtor();
}

void CAbortTaskRequest::SharedDtor() {
}

void CAbortTaskRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAbortTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAbortTaskRequest_descriptor_;
}

const CAbortTaskRequest& CAbortTaskRequest::default_instance() {
  protobuf_InitDefaults_taskmodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CAbortTaskRequest> CAbortTaskRequest_default_instance_;

CAbortTaskRequest* CAbortTaskRequest::New(::google::protobuf::Arena* arena) const {
  CAbortTaskRequest* n = new CAbortTaskRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CAbortTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CAbortTaskRequest)
  taskid_ = 0u;
}

bool CAbortTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAbortTaskRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAbortTaskRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAbortTaskRequest)
  return false;
#undef DO_
}

void CAbortTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAbortTaskRequest)
  // optional uint32 TaskID = 1;
  if (this->taskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // @@protoc_insertion_point(serialize_end:CAbortTaskRequest)
}

::google::protobuf::uint8* CAbortTaskRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAbortTaskRequest)
  // optional uint32 TaskID = 1;
  if (this->taskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CAbortTaskRequest)
  return target;
}

size_t CAbortTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAbortTaskRequest)
  size_t total_size = 0;

  // optional uint32 TaskID = 1;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->taskid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAbortTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAbortTaskRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CAbortTaskRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAbortTaskRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAbortTaskRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAbortTaskRequest)
    UnsafeMergeFrom(*source);
  }
}

void CAbortTaskRequest::MergeFrom(const CAbortTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAbortTaskRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CAbortTaskRequest::UnsafeMergeFrom(const CAbortTaskRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.taskid() != 0) {
    set_taskid(from.taskid());
  }
}

void CAbortTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAbortTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAbortTaskRequest::CopyFrom(const CAbortTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAbortTaskRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CAbortTaskRequest::IsInitialized() const {

  return true;
}

void CAbortTaskRequest::Swap(CAbortTaskRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAbortTaskRequest::InternalSwap(CAbortTaskRequest* other) {
  std::swap(taskid_, other->taskid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CAbortTaskRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAbortTaskRequest_descriptor_;
  metadata.reflection = CAbortTaskRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CAbortTaskRequest

// optional uint32 TaskID = 1;
void CAbortTaskRequest::clear_taskid() {
  taskid_ = 0u;
}
::google::protobuf::uint32 CAbortTaskRequest::taskid() const {
  // @@protoc_insertion_point(field_get:CAbortTaskRequest.TaskID)
  return taskid_;
}
void CAbortTaskRequest::set_taskid(::google::protobuf::uint32 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:CAbortTaskRequest.TaskID)
}

inline const CAbortTaskRequest* CAbortTaskRequest::internal_default_instance() {
  return &CAbortTaskRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAbortTaskResponse::kResultFieldNumber;
const int CAbortTaskResponse::kTaskIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAbortTaskResponse::CAbortTaskResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_taskmodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAbortTaskResponse)
}

void CAbortTaskResponse::InitAsDefaultInstance() {
}

CAbortTaskResponse::CAbortTaskResponse(const CAbortTaskResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CAbortTaskResponse)
}

void CAbortTaskResponse::SharedCtor() {
  ::memset(&result_, 0, reinterpret_cast<char*>(&taskid_) -
    reinterpret_cast<char*>(&result_) + sizeof(taskid_));
  _cached_size_ = 0;
}

CAbortTaskResponse::~CAbortTaskResponse() {
  // @@protoc_insertion_point(destructor:CAbortTaskResponse)
  SharedDtor();
}

void CAbortTaskResponse::SharedDtor() {
}

void CAbortTaskResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAbortTaskResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAbortTaskResponse_descriptor_;
}

const CAbortTaskResponse& CAbortTaskResponse::default_instance() {
  protobuf_InitDefaults_taskmodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CAbortTaskResponse> CAbortTaskResponse_default_instance_;

CAbortTaskResponse* CAbortTaskResponse::New(::google::protobuf::Arena* arena) const {
  CAbortTaskResponse* n = new CAbortTaskResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CAbortTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CAbortTaskResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CAbortTaskResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CAbortTaskResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_, taskid_);

#undef ZR_HELPER_
#undef ZR_

}

bool CAbortTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAbortTaskResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TaskID;
        break;
      }

      // optional uint32 TaskID = 2;
      case 2: {
        if (tag == 16) {
         parse_TaskID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAbortTaskResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAbortTaskResponse)
  return false;
#undef DO_
}

void CAbortTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAbortTaskResponse)
  // optional uint32 Result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 TaskID = 2;
  if (this->taskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->taskid(), output);
  }

  // @@protoc_insertion_point(serialize_end:CAbortTaskResponse)
}

::google::protobuf::uint8* CAbortTaskResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CAbortTaskResponse)
  // optional uint32 Result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 TaskID = 2;
  if (this->taskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->taskid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CAbortTaskResponse)
  return target;
}

size_t CAbortTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAbortTaskResponse)
  size_t total_size = 0;

  // optional uint32 Result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  // optional uint32 TaskID = 2;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->taskid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAbortTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAbortTaskResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CAbortTaskResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAbortTaskResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAbortTaskResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAbortTaskResponse)
    UnsafeMergeFrom(*source);
  }
}

void CAbortTaskResponse::MergeFrom(const CAbortTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAbortTaskResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CAbortTaskResponse::UnsafeMergeFrom(const CAbortTaskResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.taskid() != 0) {
    set_taskid(from.taskid());
  }
}

void CAbortTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAbortTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAbortTaskResponse::CopyFrom(const CAbortTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAbortTaskResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CAbortTaskResponse::IsInitialized() const {

  return true;
}

void CAbortTaskResponse::Swap(CAbortTaskResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAbortTaskResponse::InternalSwap(CAbortTaskResponse* other) {
  std::swap(result_, other->result_);
  std::swap(taskid_, other->taskid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CAbortTaskResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAbortTaskResponse_descriptor_;
  metadata.reflection = CAbortTaskResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CAbortTaskResponse

// optional uint32 Result = 1;
void CAbortTaskResponse::clear_result() {
  result_ = 0u;
}
::google::protobuf::uint32 CAbortTaskResponse::result() const {
  // @@protoc_insertion_point(field_get:CAbortTaskResponse.Result)
  return result_;
}
void CAbortTaskResponse::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:CAbortTaskResponse.Result)
}

// optional uint32 TaskID = 2;
void CAbortTaskResponse::clear_taskid() {
  taskid_ = 0u;
}
::google::protobuf::uint32 CAbortTaskResponse::taskid() const {
  // @@protoc_insertion_point(field_get:CAbortTaskResponse.TaskID)
  return taskid_;
}
void CAbortTaskResponse::set_taskid(::google::protobuf::uint32 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:CAbortTaskResponse.TaskID)
}

inline const CAbortTaskResponse* CAbortTaskResponse::internal_default_instance() {
  return &CAbortTaskResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUpdateTaskProcessNotify::kTaskIDFieldNumber;
const int CUpdateTaskProcessNotify::kCondIndexFieldNumber;
const int CUpdateTaskProcessNotify::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUpdateTaskProcessNotify::CUpdateTaskProcessNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_taskmodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CUpdateTaskProcessNotify)
}

void CUpdateTaskProcessNotify::InitAsDefaultInstance() {
}

CUpdateTaskProcessNotify::CUpdateTaskProcessNotify(const CUpdateTaskProcessNotify& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CUpdateTaskProcessNotify)
}

void CUpdateTaskProcessNotify::SharedCtor() {
  ::memset(&taskid_, 0, reinterpret_cast<char*>(&param_) -
    reinterpret_cast<char*>(&taskid_) + sizeof(param_));
  _cached_size_ = 0;
}

CUpdateTaskProcessNotify::~CUpdateTaskProcessNotify() {
  // @@protoc_insertion_point(destructor:CUpdateTaskProcessNotify)
  SharedDtor();
}

void CUpdateTaskProcessNotify::SharedDtor() {
}

void CUpdateTaskProcessNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUpdateTaskProcessNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUpdateTaskProcessNotify_descriptor_;
}

const CUpdateTaskProcessNotify& CUpdateTaskProcessNotify::default_instance() {
  protobuf_InitDefaults_taskmodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CUpdateTaskProcessNotify> CUpdateTaskProcessNotify_default_instance_;

CUpdateTaskProcessNotify* CUpdateTaskProcessNotify::New(::google::protobuf::Arena* arena) const {
  CUpdateTaskProcessNotify* n = new CUpdateTaskProcessNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CUpdateTaskProcessNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:CUpdateTaskProcessNotify)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CUpdateTaskProcessNotify, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CUpdateTaskProcessNotify*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(taskid_, param_);

#undef ZR_HELPER_
#undef ZR_

}

bool CUpdateTaskProcessNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CUpdateTaskProcessNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskID = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CondIndex;
        break;
      }

      // optional uint32 CondIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_CondIndex:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &condindex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Param;
        break;
      }

      // optional uint32 Param = 3;
      case 3: {
        if (tag == 24) {
         parse_Param:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CUpdateTaskProcessNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CUpdateTaskProcessNotify)
  return false;
#undef DO_
}

void CUpdateTaskProcessNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CUpdateTaskProcessNotify)
  // optional uint32 TaskID = 1;
  if (this->taskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // optional uint32 CondIndex = 2;
  if (this->condindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->condindex(), output);
  }

  // optional uint32 Param = 3;
  if (this->param() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->param(), output);
  }

  // @@protoc_insertion_point(serialize_end:CUpdateTaskProcessNotify)
}

::google::protobuf::uint8* CUpdateTaskProcessNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CUpdateTaskProcessNotify)
  // optional uint32 TaskID = 1;
  if (this->taskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // optional uint32 CondIndex = 2;
  if (this->condindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->condindex(), target);
  }

  // optional uint32 Param = 3;
  if (this->param() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->param(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CUpdateTaskProcessNotify)
  return target;
}

size_t CUpdateTaskProcessNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUpdateTaskProcessNotify)
  size_t total_size = 0;

  // optional uint32 TaskID = 1;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->taskid());
  }

  // optional uint32 CondIndex = 2;
  if (this->condindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->condindex());
  }

  // optional uint32 Param = 3;
  if (this->param() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->param());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUpdateTaskProcessNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUpdateTaskProcessNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CUpdateTaskProcessNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CUpdateTaskProcessNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUpdateTaskProcessNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUpdateTaskProcessNotify)
    UnsafeMergeFrom(*source);
  }
}

void CUpdateTaskProcessNotify::MergeFrom(const CUpdateTaskProcessNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUpdateTaskProcessNotify)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CUpdateTaskProcessNotify::UnsafeMergeFrom(const CUpdateTaskProcessNotify& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.taskid() != 0) {
    set_taskid(from.taskid());
  }
  if (from.condindex() != 0) {
    set_condindex(from.condindex());
  }
  if (from.param() != 0) {
    set_param(from.param());
  }
}

void CUpdateTaskProcessNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUpdateTaskProcessNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUpdateTaskProcessNotify::CopyFrom(const CUpdateTaskProcessNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUpdateTaskProcessNotify)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CUpdateTaskProcessNotify::IsInitialized() const {

  return true;
}

void CUpdateTaskProcessNotify::Swap(CUpdateTaskProcessNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUpdateTaskProcessNotify::InternalSwap(CUpdateTaskProcessNotify* other) {
  std::swap(taskid_, other->taskid_);
  std::swap(condindex_, other->condindex_);
  std::swap(param_, other->param_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CUpdateTaskProcessNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUpdateTaskProcessNotify_descriptor_;
  metadata.reflection = CUpdateTaskProcessNotify_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CUpdateTaskProcessNotify

// optional uint32 TaskID = 1;
void CUpdateTaskProcessNotify::clear_taskid() {
  taskid_ = 0u;
}
::google::protobuf::uint32 CUpdateTaskProcessNotify::taskid() const {
  // @@protoc_insertion_point(field_get:CUpdateTaskProcessNotify.TaskID)
  return taskid_;
}
void CUpdateTaskProcessNotify::set_taskid(::google::protobuf::uint32 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:CUpdateTaskProcessNotify.TaskID)
}

// optional uint32 CondIndex = 2;
void CUpdateTaskProcessNotify::clear_condindex() {
  condindex_ = 0u;
}
::google::protobuf::uint32 CUpdateTaskProcessNotify::condindex() const {
  // @@protoc_insertion_point(field_get:CUpdateTaskProcessNotify.CondIndex)
  return condindex_;
}
void CUpdateTaskProcessNotify::set_condindex(::google::protobuf::uint32 value) {
  
  condindex_ = value;
  // @@protoc_insertion_point(field_set:CUpdateTaskProcessNotify.CondIndex)
}

// optional uint32 Param = 3;
void CUpdateTaskProcessNotify::clear_param() {
  param_ = 0u;
}
::google::protobuf::uint32 CUpdateTaskProcessNotify::param() const {
  // @@protoc_insertion_point(field_get:CUpdateTaskProcessNotify.Param)
  return param_;
}
void CUpdateTaskProcessNotify::set_param(::google::protobuf::uint32 value) {
  
  param_ = value;
  // @@protoc_insertion_point(field_set:CUpdateTaskProcessNotify.Param)
}

inline const CUpdateTaskProcessNotify* CUpdateTaskProcessNotify::internal_default_instance() {
  return &CUpdateTaskProcessNotify_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
