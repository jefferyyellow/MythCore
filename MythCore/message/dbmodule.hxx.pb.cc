// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbmodule.hxx

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dbmodule.hxx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBSavePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBSavePlayer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dbmodule_2ehxx() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_dbmodule_2ehxx() {
  protobuf_AddDesc_dbmodule_2ehxx();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dbmodule.hxx");
  GOOGLE_CHECK(file != NULL);
  PBSavePlayer_descriptor_ = file->message_type(0);
  static const int PBSavePlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSavePlayer, bag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSavePlayer, task_),
  };
  PBSavePlayer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBSavePlayer_descriptor_,
      PBSavePlayer::internal_default_instance(),
      PBSavePlayer_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBSavePlayer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBSavePlayer, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dbmodule_2ehxx);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBSavePlayer_descriptor_, PBSavePlayer::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dbmodule_2ehxx() {
  PBSavePlayer_default_instance_.Shutdown();
  delete PBSavePlayer_reflection_;
}

void protobuf_InitDefaults_dbmodule_2ehxx_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_InitDefaults_common_2ehxx();
  PBSavePlayer_default_instance_.DefaultConstruct();
  PBSavePlayer_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_dbmodule_2ehxx_once_);
void protobuf_InitDefaults_dbmodule_2ehxx() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_dbmodule_2ehxx_once_,
                 &protobuf_InitDefaults_dbmodule_2ehxx_impl);
}
void protobuf_AddDesc_dbmodule_2ehxx_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_dbmodule_2ehxx();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014dbmodule.hxx\032\ncommon.hxx\":\n\014PBSavePlay"
    "er\022\023\n\003bag\030\001 \001(\0132\006.PBBag\022\025\n\004task\030\002 \001(\0132\007."
    "PBTaskb\006proto3", 94);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dbmodule.hxx", &protobuf_RegisterTypes);
  ::protobuf_AddDesc_common_2ehxx();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dbmodule_2ehxx);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_dbmodule_2ehxx_once_);
void protobuf_AddDesc_dbmodule_2ehxx() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_dbmodule_2ehxx_once_,
                 &protobuf_AddDesc_dbmodule_2ehxx_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dbmodule_2ehxx {
  StaticDescriptorInitializer_dbmodule_2ehxx() {
    protobuf_AddDesc_dbmodule_2ehxx();
  }
} static_descriptor_initializer_dbmodule_2ehxx_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBSavePlayer::kBagFieldNumber;
const int PBSavePlayer::kTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBSavePlayer::PBSavePlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dbmodule_2ehxx();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBSavePlayer)
}

void PBSavePlayer::InitAsDefaultInstance() {
  bag_ = const_cast< ::PBBag*>(
      ::PBBag::internal_default_instance());
  task_ = const_cast< ::PBTask*>(
      ::PBTask::internal_default_instance());
}

PBSavePlayer::PBSavePlayer(const PBSavePlayer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBSavePlayer)
}

void PBSavePlayer::SharedCtor() {
  bag_ = NULL;
  task_ = NULL;
  _cached_size_ = 0;
}

PBSavePlayer::~PBSavePlayer() {
  // @@protoc_insertion_point(destructor:PBSavePlayer)
  SharedDtor();
}

void PBSavePlayer::SharedDtor() {
  if (this != &PBSavePlayer_default_instance_.get()) {
    delete bag_;
    delete task_;
  }
}

void PBSavePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBSavePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBSavePlayer_descriptor_;
}

const PBSavePlayer& PBSavePlayer::default_instance() {
  protobuf_InitDefaults_dbmodule_2ehxx();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PBSavePlayer> PBSavePlayer_default_instance_;

PBSavePlayer* PBSavePlayer::New(::google::protobuf::Arena* arena) const {
  PBSavePlayer* n = new PBSavePlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBSavePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:PBSavePlayer)
  if (GetArenaNoVirtual() == NULL && bag_ != NULL) delete bag_;
  bag_ = NULL;
  if (GetArenaNoVirtual() == NULL && task_ != NULL) delete task_;
  task_ = NULL;
}

bool PBSavePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBSavePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBBag bag = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_task;
        break;
      }

      // optional .PBTask task = 2;
      case 2: {
        if (tag == 18) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBSavePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBSavePlayer)
  return false;
#undef DO_
}

void PBSavePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBSavePlayer)
  // optional .PBBag bag = 1;
  if (this->has_bag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->bag_, output);
  }

  // optional .PBTask task = 2;
  if (this->has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->task_, output);
  }

  // @@protoc_insertion_point(serialize_end:PBSavePlayer)
}

::google::protobuf::uint8* PBSavePlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PBSavePlayer)
  // optional .PBBag bag = 1;
  if (this->has_bag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->bag_, false, target);
  }

  // optional .PBTask task = 2;
  if (this->has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->task_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBSavePlayer)
  return target;
}

size_t PBSavePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBSavePlayer)
  size_t total_size = 0;

  // optional .PBBag bag = 1;
  if (this->has_bag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bag_);
  }

  // optional .PBTask task = 2;
  if (this->has_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->task_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBSavePlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBSavePlayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBSavePlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBSavePlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBSavePlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBSavePlayer)
    UnsafeMergeFrom(*source);
  }
}

void PBSavePlayer::MergeFrom(const PBSavePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBSavePlayer)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PBSavePlayer::UnsafeMergeFrom(const PBSavePlayer& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_bag()) {
    mutable_bag()->::PBBag::MergeFrom(from.bag());
  }
  if (from.has_task()) {
    mutable_task()->::PBTask::MergeFrom(from.task());
  }
}

void PBSavePlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBSavePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBSavePlayer::CopyFrom(const PBSavePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBSavePlayer)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PBSavePlayer::IsInitialized() const {

  return true;
}

void PBSavePlayer::Swap(PBSavePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBSavePlayer::InternalSwap(PBSavePlayer* other) {
  std::swap(bag_, other->bag_);
  std::swap(task_, other->task_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBSavePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBSavePlayer_descriptor_;
  metadata.reflection = PBSavePlayer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBSavePlayer

// optional .PBBag bag = 1;
bool PBSavePlayer::has_bag() const {
  return this != internal_default_instance() && bag_ != NULL;
}
void PBSavePlayer::clear_bag() {
  if (GetArenaNoVirtual() == NULL && bag_ != NULL) delete bag_;
  bag_ = NULL;
}
const ::PBBag& PBSavePlayer::bag() const {
  // @@protoc_insertion_point(field_get:PBSavePlayer.bag)
  return bag_ != NULL ? *bag_
                         : *::PBBag::internal_default_instance();
}
::PBBag* PBSavePlayer::mutable_bag() {
  
  if (bag_ == NULL) {
    bag_ = new ::PBBag;
  }
  // @@protoc_insertion_point(field_mutable:PBSavePlayer.bag)
  return bag_;
}
::PBBag* PBSavePlayer::release_bag() {
  // @@protoc_insertion_point(field_release:PBSavePlayer.bag)
  
  ::PBBag* temp = bag_;
  bag_ = NULL;
  return temp;
}
void PBSavePlayer::set_allocated_bag(::PBBag* bag) {
  delete bag_;
  bag_ = bag;
  if (bag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PBSavePlayer.bag)
}

// optional .PBTask task = 2;
bool PBSavePlayer::has_task() const {
  return this != internal_default_instance() && task_ != NULL;
}
void PBSavePlayer::clear_task() {
  if (GetArenaNoVirtual() == NULL && task_ != NULL) delete task_;
  task_ = NULL;
}
const ::PBTask& PBSavePlayer::task() const {
  // @@protoc_insertion_point(field_get:PBSavePlayer.task)
  return task_ != NULL ? *task_
                         : *::PBTask::internal_default_instance();
}
::PBTask* PBSavePlayer::mutable_task() {
  
  if (task_ == NULL) {
    task_ = new ::PBTask;
  }
  // @@protoc_insertion_point(field_mutable:PBSavePlayer.task)
  return task_;
}
::PBTask* PBSavePlayer::release_task() {
  // @@protoc_insertion_point(field_release:PBSavePlayer.task)
  
  ::PBTask* temp = task_;
  task_ = NULL;
  return temp;
}
void PBSavePlayer::set_allocated_task(::PBTask* task) {
  delete task_;
  task_ = task;
  if (task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PBSavePlayer.task)
}

inline const PBSavePlayer* PBSavePlayer::internal_default_instance() {
  return &PBSavePlayer_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
